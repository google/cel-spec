// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.27.1
// source: cel/expr/conformance/proto2/test_all_types.proto

package proto2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalEnum int32

const (
	GlobalEnum_GOO GlobalEnum = 0
	GlobalEnum_GAR GlobalEnum = 1
	GlobalEnum_GAZ GlobalEnum = 2
)

// Enum value maps for GlobalEnum.
var (
	GlobalEnum_name = map[int32]string{
		0: "GOO",
		1: "GAR",
		2: "GAZ",
	}
	GlobalEnum_value = map[string]int32{
		"GOO": 0,
		"GAR": 1,
		"GAZ": 2,
	}
)

func (x GlobalEnum) Enum() *GlobalEnum {
	p := new(GlobalEnum)
	*p = x
	return p
}

func (x GlobalEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_cel_expr_conformance_proto2_test_all_types_proto_enumTypes[0].Descriptor()
}

func (GlobalEnum) Type() protoreflect.EnumType {
	return &file_cel_expr_conformance_proto2_test_all_types_proto_enumTypes[0]
}

func (x GlobalEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GlobalEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GlobalEnum(num)
	return nil
}

// Deprecated: Use GlobalEnum.Descriptor instead.
func (GlobalEnum) EnumDescriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{0}
}

type TestAllTypes_NestedEnum int32

const (
	TestAllTypes_FOO TestAllTypes_NestedEnum = 0
	TestAllTypes_BAR TestAllTypes_NestedEnum = 1
	TestAllTypes_BAZ TestAllTypes_NestedEnum = 2
)

// Enum value maps for TestAllTypes_NestedEnum.
var (
	TestAllTypes_NestedEnum_name = map[int32]string{
		0: "FOO",
		1: "BAR",
		2: "BAZ",
	}
	TestAllTypes_NestedEnum_value = map[string]int32{
		"FOO": 0,
		"BAR": 1,
		"BAZ": 2,
	}
)

func (x TestAllTypes_NestedEnum) Enum() *TestAllTypes_NestedEnum {
	p := new(TestAllTypes_NestedEnum)
	*p = x
	return p
}

func (x TestAllTypes_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestAllTypes_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_cel_expr_conformance_proto2_test_all_types_proto_enumTypes[1].Descriptor()
}

func (TestAllTypes_NestedEnum) Type() protoreflect.EnumType {
	return &file_cel_expr_conformance_proto2_test_all_types_proto_enumTypes[1]
}

func (x TestAllTypes_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TestAllTypes_NestedEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TestAllTypes_NestedEnum(num)
	return nil
}

// Deprecated: Use TestAllTypes_NestedEnum.Descriptor instead.
func (TestAllTypes_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{0, 0}
}

type TestAllTypes struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	SingleInt32         *int32                  `protobuf:"varint,1,opt,name=single_int32,json=singleInt32,def=-32" json:"single_int32,omitempty"`
	SingleInt64         *int64                  `protobuf:"varint,2,opt,name=single_int64,json=singleInt64,def=-64" json:"single_int64,omitempty"`
	SingleUint32        *uint32                 `protobuf:"varint,3,opt,name=single_uint32,json=singleUint32,def=32" json:"single_uint32,omitempty"`
	SingleUint64        *uint64                 `protobuf:"varint,4,opt,name=single_uint64,json=singleUint64,def=64" json:"single_uint64,omitempty"`
	SingleSint32        *int32                  `protobuf:"zigzag32,5,opt,name=single_sint32,json=singleSint32" json:"single_sint32,omitempty"`
	SingleSint64        *int64                  `protobuf:"zigzag64,6,opt,name=single_sint64,json=singleSint64" json:"single_sint64,omitempty"`
	SingleFixed32       *uint32                 `protobuf:"fixed32,7,opt,name=single_fixed32,json=singleFixed32" json:"single_fixed32,omitempty"`
	SingleFixed64       *uint64                 `protobuf:"fixed64,8,opt,name=single_fixed64,json=singleFixed64" json:"single_fixed64,omitempty"`
	SingleSfixed32      *int32                  `protobuf:"fixed32,9,opt,name=single_sfixed32,json=singleSfixed32" json:"single_sfixed32,omitempty"`
	SingleSfixed64      *int64                  `protobuf:"fixed64,10,opt,name=single_sfixed64,json=singleSfixed64" json:"single_sfixed64,omitempty"`
	SingleFloat         *float32                `protobuf:"fixed32,11,opt,name=single_float,json=singleFloat,def=3" json:"single_float,omitempty"`
	SingleDouble        *float64                `protobuf:"fixed64,12,opt,name=single_double,json=singleDouble,def=6.4" json:"single_double,omitempty"`
	SingleBool          *bool                   `protobuf:"varint,13,opt,name=single_bool,json=singleBool,def=1" json:"single_bool,omitempty"`
	SingleString        *string                 `protobuf:"bytes,14,opt,name=single_string,json=singleString,def=empty" json:"single_string,omitempty"`
	SingleBytes         []byte                  `protobuf:"bytes,15,opt,name=single_bytes,json=singleBytes,def=none" json:"single_bytes,omitempty"`
	In                  *bool                   `protobuf:"varint,18,opt,name=in" json:"in,omitempty"`
	SingleAny           *anypb.Any              `protobuf:"bytes,100,opt,name=single_any,json=singleAny" json:"single_any,omitempty"`
	SingleDuration      *durationpb.Duration    `protobuf:"bytes,101,opt,name=single_duration,json=singleDuration" json:"single_duration,omitempty"`
	SingleTimestamp     *timestamppb.Timestamp  `protobuf:"bytes,102,opt,name=single_timestamp,json=singleTimestamp" json:"single_timestamp,omitempty"`
	SingleStruct        *structpb.Struct        `protobuf:"bytes,103,opt,name=single_struct,json=singleStruct" json:"single_struct,omitempty"`
	SingleValue         *structpb.Value         `protobuf:"bytes,104,opt,name=single_value,json=singleValue" json:"single_value,omitempty"`
	SingleInt64Wrapper  *wrapperspb.Int64Value  `protobuf:"bytes,105,opt,name=single_int64_wrapper,json=singleInt64Wrapper" json:"single_int64_wrapper,omitempty"`
	SingleInt32Wrapper  *wrapperspb.Int32Value  `protobuf:"bytes,106,opt,name=single_int32_wrapper,json=singleInt32Wrapper" json:"single_int32_wrapper,omitempty"`
	SingleDoubleWrapper *wrapperspb.DoubleValue `protobuf:"bytes,107,opt,name=single_double_wrapper,json=singleDoubleWrapper" json:"single_double_wrapper,omitempty"`
	SingleFloatWrapper  *wrapperspb.FloatValue  `protobuf:"bytes,108,opt,name=single_float_wrapper,json=singleFloatWrapper" json:"single_float_wrapper,omitempty"`
	SingleUint64Wrapper *wrapperspb.UInt64Value `protobuf:"bytes,109,opt,name=single_uint64_wrapper,json=singleUint64Wrapper" json:"single_uint64_wrapper,omitempty"`
	SingleUint32Wrapper *wrapperspb.UInt32Value `protobuf:"bytes,110,opt,name=single_uint32_wrapper,json=singleUint32Wrapper" json:"single_uint32_wrapper,omitempty"`
	SingleStringWrapper *wrapperspb.StringValue `protobuf:"bytes,111,opt,name=single_string_wrapper,json=singleStringWrapper" json:"single_string_wrapper,omitempty"`
	SingleBoolWrapper   *wrapperspb.BoolValue   `protobuf:"bytes,112,opt,name=single_bool_wrapper,json=singleBoolWrapper" json:"single_bool_wrapper,omitempty"`
	SingleBytesWrapper  *wrapperspb.BytesValue  `protobuf:"bytes,113,opt,name=single_bytes_wrapper,json=singleBytesWrapper" json:"single_bytes_wrapper,omitempty"`
	ListValue           *structpb.ListValue     `protobuf:"bytes,114,opt,name=list_value,json=listValue" json:"list_value,omitempty"`
	NullValue           *structpb.NullValue     `protobuf:"varint,115,opt,name=null_value,json=nullValue,enum=google.protobuf.NullValue" json:"null_value,omitempty"`
	OptionalNullValue   *structpb.NullValue     `protobuf:"varint,116,opt,name=optional_null_value,json=optionalNullValue,enum=google.protobuf.NullValue" json:"optional_null_value,omitempty"`
	FieldMask           *fieldmaskpb.FieldMask  `protobuf:"bytes,117,opt,name=field_mask,json=fieldMask" json:"field_mask,omitempty"`
	Empty               *emptypb.Empty          `protobuf:"bytes,118,opt,name=empty" json:"empty,omitempty"`
	// Types that are valid to be assigned to NestedType:
	//
	//	*TestAllTypes_SingleNestedMessage
	//	*TestAllTypes_SingleNestedEnum
	NestedType             isTestAllTypes_NestedType              `protobuf_oneof:"nested_type"`
	StandaloneMessage      *TestAllTypes_NestedMessage            `protobuf:"bytes,23,opt,name=standalone_message,json=standaloneMessage" json:"standalone_message,omitempty"`
	StandaloneEnum         *TestAllTypes_NestedEnum               `protobuf:"varint,24,opt,name=standalone_enum,json=standaloneEnum,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum" json:"standalone_enum,omitempty"`
	RepeatedInt32          []int32                                `protobuf:"varint,31,rep,name=repeated_int32,json=repeatedInt32" json:"repeated_int32,omitempty"`
	RepeatedInt64          []int64                                `protobuf:"varint,32,rep,name=repeated_int64,json=repeatedInt64" json:"repeated_int64,omitempty"`
	RepeatedUint32         []uint32                               `protobuf:"varint,33,rep,name=repeated_uint32,json=repeatedUint32" json:"repeated_uint32,omitempty"`
	RepeatedUint64         []uint64                               `protobuf:"varint,34,rep,name=repeated_uint64,json=repeatedUint64" json:"repeated_uint64,omitempty"`
	RepeatedSint32         []int32                                `protobuf:"zigzag32,35,rep,name=repeated_sint32,json=repeatedSint32" json:"repeated_sint32,omitempty"`
	RepeatedSint64         []int64                                `protobuf:"zigzag64,36,rep,name=repeated_sint64,json=repeatedSint64" json:"repeated_sint64,omitempty"`
	RepeatedFixed32        []uint32                               `protobuf:"fixed32,37,rep,name=repeated_fixed32,json=repeatedFixed32" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64        []uint64                               `protobuf:"fixed64,38,rep,name=repeated_fixed64,json=repeatedFixed64" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32       []int32                                `protobuf:"fixed32,39,rep,name=repeated_sfixed32,json=repeatedSfixed32" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64       []int64                                `protobuf:"fixed64,40,rep,name=repeated_sfixed64,json=repeatedSfixed64" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat          []float32                              `protobuf:"fixed32,41,rep,name=repeated_float,json=repeatedFloat" json:"repeated_float,omitempty"`
	RepeatedDouble         []float64                              `protobuf:"fixed64,42,rep,name=repeated_double,json=repeatedDouble" json:"repeated_double,omitempty"`
	RepeatedBool           []bool                                 `protobuf:"varint,43,rep,name=repeated_bool,json=repeatedBool" json:"repeated_bool,omitempty"`
	RepeatedString         []string                               `protobuf:"bytes,44,rep,name=repeated_string,json=repeatedString" json:"repeated_string,omitempty"`
	RepeatedBytes          [][]byte                               `protobuf:"bytes,45,rep,name=repeated_bytes,json=repeatedBytes" json:"repeated_bytes,omitempty"`
	RepeatedNestedMessage  []*TestAllTypes_NestedMessage          `protobuf:"bytes,51,rep,name=repeated_nested_message,json=repeatedNestedMessage" json:"repeated_nested_message,omitempty"`
	RepeatedNestedEnum     []TestAllTypes_NestedEnum              `protobuf:"varint,52,rep,name=repeated_nested_enum,json=repeatedNestedEnum,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum" json:"repeated_nested_enum,omitempty"`
	RepeatedStringPiece    []string                               `protobuf:"bytes,53,rep,name=repeated_string_piece,json=repeatedStringPiece" json:"repeated_string_piece,omitempty"`
	RepeatedCord           []string                               `protobuf:"bytes,54,rep,name=repeated_cord,json=repeatedCord" json:"repeated_cord,omitempty"`
	RepeatedLazyMessage    []*TestAllTypes_NestedMessage          `protobuf:"bytes,55,rep,name=repeated_lazy_message,json=repeatedLazyMessage" json:"repeated_lazy_message,omitempty"`
	RepeatedAny            []*anypb.Any                           `protobuf:"bytes,120,rep,name=repeated_any,json=repeatedAny" json:"repeated_any,omitempty"`
	RepeatedDuration       []*durationpb.Duration                 `protobuf:"bytes,121,rep,name=repeated_duration,json=repeatedDuration" json:"repeated_duration,omitempty"`
	RepeatedTimestamp      []*timestamppb.Timestamp               `protobuf:"bytes,122,rep,name=repeated_timestamp,json=repeatedTimestamp" json:"repeated_timestamp,omitempty"`
	RepeatedStruct         []*structpb.Struct                     `protobuf:"bytes,123,rep,name=repeated_struct,json=repeatedStruct" json:"repeated_struct,omitempty"`
	RepeatedValue          []*structpb.Value                      `protobuf:"bytes,124,rep,name=repeated_value,json=repeatedValue" json:"repeated_value,omitempty"`
	RepeatedInt64Wrapper   []*wrapperspb.Int64Value               `protobuf:"bytes,125,rep,name=repeated_int64_wrapper,json=repeatedInt64Wrapper" json:"repeated_int64_wrapper,omitempty"`
	RepeatedInt32Wrapper   []*wrapperspb.Int32Value               `protobuf:"bytes,126,rep,name=repeated_int32_wrapper,json=repeatedInt32Wrapper" json:"repeated_int32_wrapper,omitempty"`
	RepeatedDoubleWrapper  []*wrapperspb.DoubleValue              `protobuf:"bytes,127,rep,name=repeated_double_wrapper,json=repeatedDoubleWrapper" json:"repeated_double_wrapper,omitempty"`
	RepeatedFloatWrapper   []*wrapperspb.FloatValue               `protobuf:"bytes,128,rep,name=repeated_float_wrapper,json=repeatedFloatWrapper" json:"repeated_float_wrapper,omitempty"`
	RepeatedUint64Wrapper  []*wrapperspb.UInt64Value              `protobuf:"bytes,129,rep,name=repeated_uint64_wrapper,json=repeatedUint64Wrapper" json:"repeated_uint64_wrapper,omitempty"`
	RepeatedUint32Wrapper  []*wrapperspb.UInt32Value              `protobuf:"bytes,130,rep,name=repeated_uint32_wrapper,json=repeatedUint32Wrapper" json:"repeated_uint32_wrapper,omitempty"`
	RepeatedStringWrapper  []*wrapperspb.StringValue              `protobuf:"bytes,131,rep,name=repeated_string_wrapper,json=repeatedStringWrapper" json:"repeated_string_wrapper,omitempty"`
	RepeatedBoolWrapper    []*wrapperspb.BoolValue                `protobuf:"bytes,132,rep,name=repeated_bool_wrapper,json=repeatedBoolWrapper" json:"repeated_bool_wrapper,omitempty"`
	RepeatedBytesWrapper   []*wrapperspb.BytesValue               `protobuf:"bytes,133,rep,name=repeated_bytes_wrapper,json=repeatedBytesWrapper" json:"repeated_bytes_wrapper,omitempty"`
	RepeatedListValue      []*structpb.ListValue                  `protobuf:"bytes,134,rep,name=repeated_list_value,json=repeatedListValue" json:"repeated_list_value,omitempty"`
	RepeatedNullValue      []structpb.NullValue                   `protobuf:"varint,135,rep,name=repeated_null_value,json=repeatedNullValue,enum=google.protobuf.NullValue" json:"repeated_null_value,omitempty"`
	MapInt64NestedType     map[int64]*NestedTestAllTypes          `protobuf:"bytes,62,rep,name=map_int64_nested_type,json=mapInt64NestedType" json:"map_int64_nested_type,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolBool            map[bool]bool                          `protobuf:"bytes,63,rep,name=map_bool_bool,json=mapBoolBool" json:"map_bool_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapBoolString          map[bool]string                        `protobuf:"bytes,64,rep,name=map_bool_string,json=mapBoolString" json:"map_bool_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolBytes           map[bool][]byte                        `protobuf:"bytes,65,rep,name=map_bool_bytes,json=mapBoolBytes" json:"map_bool_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolInt32           map[bool]int32                         `protobuf:"bytes,66,rep,name=map_bool_int32,json=mapBoolInt32" json:"map_bool_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapBoolInt64           map[bool]int64                         `protobuf:"bytes,67,rep,name=map_bool_int64,json=mapBoolInt64" json:"map_bool_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapBoolUint32          map[bool]uint32                        `protobuf:"bytes,68,rep,name=map_bool_uint32,json=mapBoolUint32" json:"map_bool_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapBoolUint64          map[bool]uint64                        `protobuf:"bytes,69,rep,name=map_bool_uint64,json=mapBoolUint64" json:"map_bool_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapBoolFloat           map[bool]float32                       `protobuf:"bytes,70,rep,name=map_bool_float,json=mapBoolFloat" json:"map_bool_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapBoolDouble          map[bool]float64                       `protobuf:"bytes,71,rep,name=map_bool_double,json=mapBoolDouble" json:"map_bool_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapBoolEnum            map[bool]TestAllTypes_NestedEnum       `protobuf:"bytes,72,rep,name=map_bool_enum,json=mapBoolEnum" json:"map_bool_enum,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum"`
	MapBoolMessage         map[bool]*TestAllTypes_NestedMessage   `protobuf:"bytes,73,rep,name=map_bool_message,json=mapBoolMessage" json:"map_bool_message,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolDuration        map[bool]*durationpb.Duration          `protobuf:"bytes,228,rep,name=map_bool_duration,json=mapBoolDuration" json:"map_bool_duration,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolTimestamp       map[bool]*timestamppb.Timestamp        `protobuf:"bytes,229,rep,name=map_bool_timestamp,json=mapBoolTimestamp" json:"map_bool_timestamp,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolNullValue       map[bool]structpb.NullValue            `protobuf:"bytes,230,rep,name=map_bool_null_value,json=mapBoolNullValue" json:"map_bool_null_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=google.protobuf.NullValue"`
	MapBoolAny             map[bool]*anypb.Any                    `protobuf:"bytes,246,rep,name=map_bool_any,json=mapBoolAny" json:"map_bool_any,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolStruct          map[bool]*structpb.Struct              `protobuf:"bytes,247,rep,name=map_bool_struct,json=mapBoolStruct" json:"map_bool_struct,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolValue           map[bool]*structpb.Value               `protobuf:"bytes,248,rep,name=map_bool_value,json=mapBoolValue" json:"map_bool_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolListValue       map[bool]*structpb.ListValue           `protobuf:"bytes,249,rep,name=map_bool_list_value,json=mapBoolListValue" json:"map_bool_list_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolInt64Wrapper    map[bool]*wrapperspb.Int64Value        `protobuf:"bytes,250,rep,name=map_bool_int64_wrapper,json=mapBoolInt64Wrapper" json:"map_bool_int64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolInt32Wrapper    map[bool]*wrapperspb.Int32Value        `protobuf:"bytes,251,rep,name=map_bool_int32_wrapper,json=mapBoolInt32Wrapper" json:"map_bool_int32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolDoubleWrapper   map[bool]*wrapperspb.DoubleValue       `protobuf:"bytes,252,rep,name=map_bool_double_wrapper,json=mapBoolDoubleWrapper" json:"map_bool_double_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolFloatWrapper    map[bool]*wrapperspb.FloatValue        `protobuf:"bytes,253,rep,name=map_bool_float_wrapper,json=mapBoolFloatWrapper" json:"map_bool_float_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolUint64Wrapper   map[bool]*wrapperspb.UInt64Value       `protobuf:"bytes,254,rep,name=map_bool_uint64_wrapper,json=mapBoolUint64Wrapper" json:"map_bool_uint64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolUint32Wrapper   map[bool]*wrapperspb.UInt32Value       `protobuf:"bytes,255,rep,name=map_bool_uint32_wrapper,json=mapBoolUint32Wrapper" json:"map_bool_uint32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolStringWrapper   map[bool]*wrapperspb.StringValue       `protobuf:"bytes,256,rep,name=map_bool_string_wrapper,json=mapBoolStringWrapper" json:"map_bool_string_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolBoolWrapper     map[bool]*wrapperspb.BoolValue         `protobuf:"bytes,257,rep,name=map_bool_bool_wrapper,json=mapBoolBoolWrapper" json:"map_bool_bool_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapBoolBytesWrapper    map[bool]*wrapperspb.BytesValue        `protobuf:"bytes,258,rep,name=map_bool_bytes_wrapper,json=mapBoolBytesWrapper" json:"map_bool_bytes_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Bool           map[int32]bool                         `protobuf:"bytes,74,rep,name=map_int32_bool,json=mapInt32Bool" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt32String         map[int32]string                       `protobuf:"bytes,75,rep,name=map_int32_string,json=mapInt32String" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Bytes          map[int32][]byte                       `protobuf:"bytes,76,rep,name=map_int32_bytes,json=mapInt32Bytes" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Int32          map[int32]int32                        `protobuf:"bytes,77,rep,name=map_int32_int32,json=mapInt32Int32" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt32Int64          map[int32]int64                        `protobuf:"bytes,78,rep,name=map_int32_int64,json=mapInt32Int64" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt32Uint32         map[int32]uint32                       `protobuf:"bytes,79,rep,name=map_int32_uint32,json=mapInt32Uint32" json:"map_int32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt32Uint64         map[int32]uint64                       `protobuf:"bytes,80,rep,name=map_int32_uint64,json=mapInt32Uint64" json:"map_int32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt32Float          map[int32]float32                      `protobuf:"bytes,81,rep,name=map_int32_float,json=mapInt32Float" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapInt32Double         map[int32]float64                      `protobuf:"bytes,82,rep,name=map_int32_double,json=mapInt32Double" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapInt32Enum           map[int32]TestAllTypes_NestedEnum      `protobuf:"bytes,83,rep,name=map_int32_enum,json=mapInt32Enum" json:"map_int32_enum,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum"`
	MapInt32Message        map[int32]*TestAllTypes_NestedMessage  `protobuf:"bytes,84,rep,name=map_int32_message,json=mapInt32Message" json:"map_int32_message,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Duration       map[int32]*durationpb.Duration         `protobuf:"bytes,231,rep,name=map_int32_duration,json=mapInt32Duration" json:"map_int32_duration,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Timestamp      map[int32]*timestamppb.Timestamp       `protobuf:"bytes,232,rep,name=map_int32_timestamp,json=mapInt32Timestamp" json:"map_int32_timestamp,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32NullValue      map[int32]structpb.NullValue           `protobuf:"bytes,233,rep,name=map_int32_null_value,json=mapInt32NullValue" json:"map_int32_null_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=google.protobuf.NullValue"`
	MapInt32Any            map[int32]*anypb.Any                   `protobuf:"bytes,259,rep,name=map_int32_any,json=mapInt32Any" json:"map_int32_any,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Struct         map[int32]*structpb.Struct             `protobuf:"bytes,260,rep,name=map_int32_struct,json=mapInt32Struct" json:"map_int32_struct,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Value          map[int32]*structpb.Value              `protobuf:"bytes,261,rep,name=map_int32_value,json=mapInt32Value" json:"map_int32_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32ListValue      map[int32]*structpb.ListValue          `protobuf:"bytes,262,rep,name=map_int32_list_value,json=mapInt32ListValue" json:"map_int32_list_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Int64Wrapper   map[int32]*wrapperspb.Int64Value       `protobuf:"bytes,263,rep,name=map_int32_int64_wrapper,json=mapInt32Int64Wrapper" json:"map_int32_int64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Int32Wrapper   map[int32]*wrapperspb.Int32Value       `protobuf:"bytes,264,rep,name=map_int32_int32_wrapper,json=mapInt32Int32Wrapper" json:"map_int32_int32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32DoubleWrapper  map[int32]*wrapperspb.DoubleValue      `protobuf:"bytes,265,rep,name=map_int32_double_wrapper,json=mapInt32DoubleWrapper" json:"map_int32_double_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32FloatWrapper   map[int32]*wrapperspb.FloatValue       `protobuf:"bytes,266,rep,name=map_int32_float_wrapper,json=mapInt32FloatWrapper" json:"map_int32_float_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Uint64Wrapper  map[int32]*wrapperspb.UInt64Value      `protobuf:"bytes,267,rep,name=map_int32_uint64_wrapper,json=mapInt32Uint64Wrapper" json:"map_int32_uint64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32Uint32Wrapper  map[int32]*wrapperspb.UInt32Value      `protobuf:"bytes,268,rep,name=map_int32_uint32_wrapper,json=mapInt32Uint32Wrapper" json:"map_int32_uint32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32StringWrapper  map[int32]*wrapperspb.StringValue      `protobuf:"bytes,269,rep,name=map_int32_string_wrapper,json=mapInt32StringWrapper" json:"map_int32_string_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32BoolWrapper    map[int32]*wrapperspb.BoolValue        `protobuf:"bytes,270,rep,name=map_int32_bool_wrapper,json=mapInt32BoolWrapper" json:"map_int32_bool_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt32BytesWrapper   map[int32]*wrapperspb.BytesValue       `protobuf:"bytes,271,rep,name=map_int32_bytes_wrapper,json=mapInt32BytesWrapper" json:"map_int32_bytes_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Bool           map[int64]bool                         `protobuf:"bytes,85,rep,name=map_int64_bool,json=mapInt64Bool" json:"map_int64_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64String         map[int64]string                       `protobuf:"bytes,86,rep,name=map_int64_string,json=mapInt64String" json:"map_int64_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Bytes          map[int64][]byte                       `protobuf:"bytes,87,rep,name=map_int64_bytes,json=mapInt64Bytes" json:"map_int64_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Int32          map[int64]int32                        `protobuf:"bytes,88,rep,name=map_int64_int32,json=mapInt64Int32" json:"map_int64_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64Int64          map[int64]int64                        `protobuf:"bytes,89,rep,name=map_int64_int64,json=mapInt64Int64" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64Uint32         map[int64]uint32                       `protobuf:"bytes,90,rep,name=map_int64_uint32,json=mapInt64Uint32" json:"map_int64_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64Uint64         map[int64]uint64                       `protobuf:"bytes,91,rep,name=map_int64_uint64,json=mapInt64Uint64" json:"map_int64_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapInt64Float          map[int64]float32                      `protobuf:"bytes,92,rep,name=map_int64_float,json=mapInt64Float" json:"map_int64_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapInt64Double         map[int64]float64                      `protobuf:"bytes,93,rep,name=map_int64_double,json=mapInt64Double" json:"map_int64_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapInt64Enum           map[int64]TestAllTypes_NestedEnum      `protobuf:"bytes,94,rep,name=map_int64_enum,json=mapInt64Enum" json:"map_int64_enum,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum"`
	MapInt64Message        map[int64]*TestAllTypes_NestedMessage  `protobuf:"bytes,95,rep,name=map_int64_message,json=mapInt64Message" json:"map_int64_message,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Duration       map[int64]*durationpb.Duration         `protobuf:"bytes,234,rep,name=map_int64_duration,json=mapInt64Duration" json:"map_int64_duration,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Timestamp      map[int64]*timestamppb.Timestamp       `protobuf:"bytes,235,rep,name=map_int64_timestamp,json=mapInt64Timestamp" json:"map_int64_timestamp,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64NullValue      map[int64]structpb.NullValue           `protobuf:"bytes,236,rep,name=map_int64_null_value,json=mapInt64NullValue" json:"map_int64_null_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=google.protobuf.NullValue"`
	MapInt64Any            map[int64]*anypb.Any                   `protobuf:"bytes,272,rep,name=map_int64_any,json=mapInt64Any" json:"map_int64_any,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Struct         map[int64]*structpb.Struct             `protobuf:"bytes,273,rep,name=map_int64_struct,json=mapInt64Struct" json:"map_int64_struct,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Value          map[int64]*structpb.Value              `protobuf:"bytes,274,rep,name=map_int64_value,json=mapInt64Value" json:"map_int64_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64ListValue      map[int64]*structpb.ListValue          `protobuf:"bytes,275,rep,name=map_int64_list_value,json=mapInt64ListValue" json:"map_int64_list_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Int64Wrapper   map[int64]*wrapperspb.Int64Value       `protobuf:"bytes,276,rep,name=map_int64_int64_wrapper,json=mapInt64Int64Wrapper" json:"map_int64_int64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Int32Wrapper   map[int64]*wrapperspb.Int32Value       `protobuf:"bytes,277,rep,name=map_int64_int32_wrapper,json=mapInt64Int32Wrapper" json:"map_int64_int32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64DoubleWrapper  map[int64]*wrapperspb.DoubleValue      `protobuf:"bytes,278,rep,name=map_int64_double_wrapper,json=mapInt64DoubleWrapper" json:"map_int64_double_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64FloatWrapper   map[int64]*wrapperspb.FloatValue       `protobuf:"bytes,279,rep,name=map_int64_float_wrapper,json=mapInt64FloatWrapper" json:"map_int64_float_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Uint64Wrapper  map[int64]*wrapperspb.UInt64Value      `protobuf:"bytes,280,rep,name=map_int64_uint64_wrapper,json=mapInt64Uint64Wrapper" json:"map_int64_uint64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64Uint32Wrapper  map[int64]*wrapperspb.UInt32Value      `protobuf:"bytes,281,rep,name=map_int64_uint32_wrapper,json=mapInt64Uint32Wrapper" json:"map_int64_uint32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64StringWrapper  map[int64]*wrapperspb.StringValue      `protobuf:"bytes,282,rep,name=map_int64_string_wrapper,json=mapInt64StringWrapper" json:"map_int64_string_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64BoolWrapper    map[int64]*wrapperspb.BoolValue        `protobuf:"bytes,283,rep,name=map_int64_bool_wrapper,json=mapInt64BoolWrapper" json:"map_int64_bool_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64BytesWrapper   map[int64]*wrapperspb.BytesValue       `protobuf:"bytes,284,rep,name=map_int64_bytes_wrapper,json=mapInt64BytesWrapper" json:"map_int64_bytes_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Bool          map[uint32]bool                        `protobuf:"bytes,96,rep,name=map_uint32_bool,json=mapUint32Bool" json:"map_uint32_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32String        map[uint32]string                      `protobuf:"bytes,97,rep,name=map_uint32_string,json=mapUint32String" json:"map_uint32_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Bytes         map[uint32][]byte                      `protobuf:"bytes,98,rep,name=map_uint32_bytes,json=mapUint32Bytes" json:"map_uint32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Int32         map[uint32]int32                       `protobuf:"bytes,99,rep,name=map_uint32_int32,json=mapUint32Int32" json:"map_uint32_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32Int64         map[uint32]int64                       `protobuf:"bytes,200,rep,name=map_uint32_int64,json=mapUint32Int64" json:"map_uint32_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32Uint32        map[uint32]uint32                      `protobuf:"bytes,201,rep,name=map_uint32_uint32,json=mapUint32Uint32" json:"map_uint32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32Uint64        map[uint32]uint64                      `protobuf:"bytes,202,rep,name=map_uint32_uint64,json=mapUint32Uint64" json:"map_uint32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint32Float         map[uint32]float32                     `protobuf:"bytes,203,rep,name=map_uint32_float,json=mapUint32Float" json:"map_uint32_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapUint32Double        map[uint32]float64                     `protobuf:"bytes,204,rep,name=map_uint32_double,json=mapUint32Double" json:"map_uint32_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapUint32Enum          map[uint32]TestAllTypes_NestedEnum     `protobuf:"bytes,205,rep,name=map_uint32_enum,json=mapUint32Enum" json:"map_uint32_enum,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum"`
	MapUint32Message       map[uint32]*TestAllTypes_NestedMessage `protobuf:"bytes,206,rep,name=map_uint32_message,json=mapUint32Message" json:"map_uint32_message,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Duration      map[uint32]*durationpb.Duration        `protobuf:"bytes,237,rep,name=map_uint32_duration,json=mapUint32Duration" json:"map_uint32_duration,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Timestamp     map[uint32]*timestamppb.Timestamp      `protobuf:"bytes,238,rep,name=map_uint32_timestamp,json=mapUint32Timestamp" json:"map_uint32_timestamp,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32NullValue     map[uint32]structpb.NullValue          `protobuf:"bytes,239,rep,name=map_uint32_null_value,json=mapUint32NullValue" json:"map_uint32_null_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=google.protobuf.NullValue"`
	MapUint32Any           map[uint32]*anypb.Any                  `protobuf:"bytes,285,rep,name=map_uint32_any,json=mapUint32Any" json:"map_uint32_any,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Struct        map[uint32]*structpb.Struct            `protobuf:"bytes,286,rep,name=map_uint32_struct,json=mapUint32Struct" json:"map_uint32_struct,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Value         map[uint32]*structpb.Value             `protobuf:"bytes,287,rep,name=map_uint32_value,json=mapUint32Value" json:"map_uint32_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32ListValue     map[uint32]*structpb.ListValue         `protobuf:"bytes,288,rep,name=map_uint32_list_value,json=mapUint32ListValue" json:"map_uint32_list_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Int64Wrapper  map[uint32]*wrapperspb.Int64Value      `protobuf:"bytes,289,rep,name=map_uint32_int64_wrapper,json=mapUint32Int64Wrapper" json:"map_uint32_int64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Int32Wrapper  map[uint32]*wrapperspb.Int32Value      `protobuf:"bytes,290,rep,name=map_uint32_int32_wrapper,json=mapUint32Int32Wrapper" json:"map_uint32_int32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32DoubleWrapper map[uint32]*wrapperspb.DoubleValue     `protobuf:"bytes,291,rep,name=map_uint32_double_wrapper,json=mapUint32DoubleWrapper" json:"map_uint32_double_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32FloatWrapper  map[uint32]*wrapperspb.FloatValue      `protobuf:"bytes,292,rep,name=map_uint32_float_wrapper,json=mapUint32FloatWrapper" json:"map_uint32_float_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Uint64Wrapper map[uint32]*wrapperspb.UInt64Value     `protobuf:"bytes,293,rep,name=map_uint32_uint64_wrapper,json=mapUint32Uint64Wrapper" json:"map_uint32_uint64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32Uint32Wrapper map[uint32]*wrapperspb.UInt32Value     `protobuf:"bytes,294,rep,name=map_uint32_uint32_wrapper,json=mapUint32Uint32Wrapper" json:"map_uint32_uint32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32StringWrapper map[uint32]*wrapperspb.StringValue     `protobuf:"bytes,295,rep,name=map_uint32_string_wrapper,json=mapUint32StringWrapper" json:"map_uint32_string_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32BoolWrapper   map[uint32]*wrapperspb.BoolValue       `protobuf:"bytes,296,rep,name=map_uint32_bool_wrapper,json=mapUint32BoolWrapper" json:"map_uint32_bool_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint32BytesWrapper  map[uint32]*wrapperspb.BytesValue      `protobuf:"bytes,297,rep,name=map_uint32_bytes_wrapper,json=mapUint32BytesWrapper" json:"map_uint32_bytes_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Bool          map[uint64]bool                        `protobuf:"bytes,207,rep,name=map_uint64_bool,json=mapUint64Bool" json:"map_uint64_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64String        map[uint64]string                      `protobuf:"bytes,208,rep,name=map_uint64_string,json=mapUint64String" json:"map_uint64_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Bytes         map[uint64][]byte                      `protobuf:"bytes,209,rep,name=map_uint64_bytes,json=mapUint64Bytes" json:"map_uint64_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Int32         map[uint64]int32                       `protobuf:"bytes,210,rep,name=map_uint64_int32,json=mapUint64Int32" json:"map_uint64_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64Int64         map[uint64]int64                       `protobuf:"bytes,211,rep,name=map_uint64_int64,json=mapUint64Int64" json:"map_uint64_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64Uint32        map[uint64]uint32                      `protobuf:"bytes,212,rep,name=map_uint64_uint32,json=mapUint64Uint32" json:"map_uint64_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64Uint64        map[uint64]uint64                      `protobuf:"bytes,213,rep,name=map_uint64_uint64,json=mapUint64Uint64" json:"map_uint64_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapUint64Float         map[uint64]float32                     `protobuf:"bytes,214,rep,name=map_uint64_float,json=mapUint64Float" json:"map_uint64_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapUint64Double        map[uint64]float64                     `protobuf:"bytes,215,rep,name=map_uint64_double,json=mapUint64Double" json:"map_uint64_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapUint64Enum          map[uint64]TestAllTypes_NestedEnum     `protobuf:"bytes,216,rep,name=map_uint64_enum,json=mapUint64Enum" json:"map_uint64_enum,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum"`
	MapUint64Message       map[uint64]*TestAllTypes_NestedMessage `protobuf:"bytes,217,rep,name=map_uint64_message,json=mapUint64Message" json:"map_uint64_message,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Duration      map[uint64]*durationpb.Duration        `protobuf:"bytes,240,rep,name=map_uint64_duration,json=mapUint64Duration" json:"map_uint64_duration,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Timestamp     map[uint64]*timestamppb.Timestamp      `protobuf:"bytes,241,rep,name=map_uint64_timestamp,json=mapUint64Timestamp" json:"map_uint64_timestamp,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64NullValue     map[uint64]structpb.NullValue          `protobuf:"bytes,242,rep,name=map_uint64_null_value,json=mapUint64NullValue" json:"map_uint64_null_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=google.protobuf.NullValue"`
	MapUint64Any           map[uint64]*anypb.Any                  `protobuf:"bytes,298,rep,name=map_uint64_any,json=mapUint64Any" json:"map_uint64_any,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Struct        map[uint64]*structpb.Struct            `protobuf:"bytes,299,rep,name=map_uint64_struct,json=mapUint64Struct" json:"map_uint64_struct,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Value         map[uint64]*structpb.Value             `protobuf:"bytes,300,rep,name=map_uint64_value,json=mapUint64Value" json:"map_uint64_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64ListValue     map[uint64]*structpb.ListValue         `protobuf:"bytes,301,rep,name=map_uint64_list_value,json=mapUint64ListValue" json:"map_uint64_list_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Int64Wrapper  map[uint64]*wrapperspb.Int64Value      `protobuf:"bytes,302,rep,name=map_uint64_int64_wrapper,json=mapUint64Int64Wrapper" json:"map_uint64_int64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Int32Wrapper  map[uint64]*wrapperspb.Int32Value      `protobuf:"bytes,303,rep,name=map_uint64_int32_wrapper,json=mapUint64Int32Wrapper" json:"map_uint64_int32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64DoubleWrapper map[uint64]*wrapperspb.DoubleValue     `protobuf:"bytes,304,rep,name=map_uint64_double_wrapper,json=mapUint64DoubleWrapper" json:"map_uint64_double_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64FloatWrapper  map[uint64]*wrapperspb.FloatValue      `protobuf:"bytes,305,rep,name=map_uint64_float_wrapper,json=mapUint64FloatWrapper" json:"map_uint64_float_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Uint64Wrapper map[uint64]*wrapperspb.UInt64Value     `protobuf:"bytes,306,rep,name=map_uint64_uint64_wrapper,json=mapUint64Uint64Wrapper" json:"map_uint64_uint64_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64Uint32Wrapper map[uint64]*wrapperspb.UInt32Value     `protobuf:"bytes,307,rep,name=map_uint64_uint32_wrapper,json=mapUint64Uint32Wrapper" json:"map_uint64_uint32_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64StringWrapper map[uint64]*wrapperspb.StringValue     `protobuf:"bytes,308,rep,name=map_uint64_string_wrapper,json=mapUint64StringWrapper" json:"map_uint64_string_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64BoolWrapper   map[uint64]*wrapperspb.BoolValue       `protobuf:"bytes,309,rep,name=map_uint64_bool_wrapper,json=mapUint64BoolWrapper" json:"map_uint64_bool_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapUint64BytesWrapper  map[uint64]*wrapperspb.BytesValue      `protobuf:"bytes,310,rep,name=map_uint64_bytes_wrapper,json=mapUint64BytesWrapper" json:"map_uint64_bytes_wrapper,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringBool          map[string]bool                        `protobuf:"bytes,218,rep,name=map_string_bool,json=mapStringBool" json:"map_string_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringString        map[string]string                      `protobuf:"bytes,61,rep,name=map_string_string,json=mapStringString" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringBytes         map[string][]byte                      `protobuf:"bytes,219,rep,name=map_string_bytes,json=mapStringBytes" json:"map_string_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringInt32         map[string]int32                       `protobuf:"bytes,220,rep,name=map_string_int32,json=mapStringInt32" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringInt64         map[string]int64                       `protobuf:"bytes,221,rep,name=map_string_int64,json=mapStringInt64" json:"map_string_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringUint32        map[string]uint32                      `protobuf:"bytes,222,rep,name=map_string_uint32,json=mapStringUint32" json:"map_string_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringUint64        map[string]uint64                      `protobuf:"bytes,223,rep,name=map_string_uint64,json=mapStringUint64" json:"map_string_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapStringFloat         map[string]float32                     `protobuf:"bytes,224,rep,name=map_string_float,json=mapStringFloat" json:"map_string_float,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	MapStringDouble        map[string]float64                     `protobuf:"bytes,225,rep,name=map_string_double,json=mapStringDouble" json:"map_string_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	MapStringEnum          map[string]TestAllTypes_NestedEnum     `protobuf:"bytes,226,rep,name=map_string_enum,json=mapStringEnum" json:"map_string_enum,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum"`
	MapStringMessage       map[string]*TestAllTypes_NestedMessage `protobuf:"bytes,227,rep,name=map_string_message,json=mapStringMessage" json:"map_string_message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringDuration      map[string]*durationpb.Duration        `protobuf:"bytes,243,rep,name=map_string_duration,json=mapStringDuration" json:"map_string_duration,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringTimestamp     map[string]*timestamppb.Timestamp      `protobuf:"bytes,244,rep,name=map_string_timestamp,json=mapStringTimestamp" json:"map_string_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringNullValue     map[string]structpb.NullValue          `protobuf:"bytes,245,rep,name=map_string_null_value,json=mapStringNullValue" json:"map_string_null_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=google.protobuf.NullValue"`
	MapStringAny           map[string]*anypb.Any                  `protobuf:"bytes,311,rep,name=map_string_any,json=mapStringAny" json:"map_string_any,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringStruct        map[string]*structpb.Struct            `protobuf:"bytes,312,rep,name=map_string_struct,json=mapStringStruct" json:"map_string_struct,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringValue         map[string]*structpb.Value             `protobuf:"bytes,313,rep,name=map_string_value,json=mapStringValue" json:"map_string_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringListValue     map[string]*structpb.ListValue         `protobuf:"bytes,314,rep,name=map_string_list_value,json=mapStringListValue" json:"map_string_list_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringInt64Wrapper  map[string]*wrapperspb.Int64Value      `protobuf:"bytes,315,rep,name=map_string_int64_wrapper,json=mapStringInt64Wrapper" json:"map_string_int64_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringInt32Wrapper  map[string]*wrapperspb.Int32Value      `protobuf:"bytes,316,rep,name=map_string_int32_wrapper,json=mapStringInt32Wrapper" json:"map_string_int32_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringDoubleWrapper map[string]*wrapperspb.DoubleValue     `protobuf:"bytes,317,rep,name=map_string_double_wrapper,json=mapStringDoubleWrapper" json:"map_string_double_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringFloatWrapper  map[string]*wrapperspb.FloatValue      `protobuf:"bytes,318,rep,name=map_string_float_wrapper,json=mapStringFloatWrapper" json:"map_string_float_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringUint64Wrapper map[string]*wrapperspb.UInt64Value     `protobuf:"bytes,319,rep,name=map_string_uint64_wrapper,json=mapStringUint64Wrapper" json:"map_string_uint64_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringUint32Wrapper map[string]*wrapperspb.UInt32Value     `protobuf:"bytes,320,rep,name=map_string_uint32_wrapper,json=mapStringUint32Wrapper" json:"map_string_uint32_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringStringWrapper map[string]*wrapperspb.StringValue     `protobuf:"bytes,321,rep,name=map_string_string_wrapper,json=mapStringStringWrapper" json:"map_string_string_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringBoolWrapper   map[string]*wrapperspb.BoolValue       `protobuf:"bytes,322,rep,name=map_string_bool_wrapper,json=mapStringBoolWrapper" json:"map_string_bool_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringBytesWrapper  map[string]*wrapperspb.BytesValue      `protobuf:"bytes,323,rep,name=map_string_bytes_wrapper,json=mapStringBytesWrapper" json:"map_string_bytes_wrapper,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Kind:
	//
	//	*TestAllTypes_OneofType
	//	*TestAllTypes_OneofMsg
	//	*TestAllTypes_OneofBool
	Kind            isTestAllTypes_Kind       `protobuf_oneof:"kind"`
	Nestedgroup     *TestAllTypes_NestedGroup `protobuf:"group,403,opt,name=NestedGroup,json=nestedgroup" json:"nestedgroup,omitempty"`
	As              *bool                     `protobuf:"varint,500,opt,name=as" json:"as,omitempty"`
	Break           *bool                     `protobuf:"varint,501,opt,name=break" json:"break,omitempty"`
	Const           *bool                     `protobuf:"varint,502,opt,name=const" json:"const,omitempty"`
	Continue        *bool                     `protobuf:"varint,503,opt,name=continue" json:"continue,omitempty"`
	Else            *bool                     `protobuf:"varint,504,opt,name=else" json:"else,omitempty"`
	For             *bool                     `protobuf:"varint,505,opt,name=for" json:"for,omitempty"`
	Function        *bool                     `protobuf:"varint,506,opt,name=function" json:"function,omitempty"`
	If              *bool                     `protobuf:"varint,507,opt,name=if" json:"if,omitempty"`
	Import          *bool                     `protobuf:"varint,508,opt,name=import" json:"import,omitempty"`
	Let             *bool                     `protobuf:"varint,509,opt,name=let" json:"let,omitempty"`
	Loop            *bool                     `protobuf:"varint,510,opt,name=loop" json:"loop,omitempty"`
	Package         *bool                     `protobuf:"varint,511,opt,name=package" json:"package,omitempty"`
	Namespace       *bool                     `protobuf:"varint,512,opt,name=namespace" json:"namespace,omitempty"`
	Return          *bool                     `protobuf:"varint,513,opt,name=return" json:"return,omitempty"`
	Var             *bool                     `protobuf:"varint,514,opt,name=var" json:"var,omitempty"`
	Void            *bool                     `protobuf:"varint,515,opt,name=void" json:"void,omitempty"`
	While           *bool                     `protobuf:"varint,516,opt,name=while" json:"while,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for TestAllTypes fields.
const (
	Default_TestAllTypes_SingleInt32      = int32(-32)
	Default_TestAllTypes_SingleInt64      = int64(-64)
	Default_TestAllTypes_SingleUint32     = uint32(32)
	Default_TestAllTypes_SingleUint64     = uint64(64)
	Default_TestAllTypes_SingleFloat      = float32(3)
	Default_TestAllTypes_SingleDouble     = float64(6.4)
	Default_TestAllTypes_SingleBool       = bool(true)
	Default_TestAllTypes_SingleString     = string("empty")
	Default_TestAllTypes_SingleNestedEnum = TestAllTypes_BAR
)

// Default values for TestAllTypes fields.
var (
	Default_TestAllTypes_SingleBytes = []byte("none")
)

func (x *TestAllTypes) Reset() {
	*x = TestAllTypes{}
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAllTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAllTypes) ProtoMessage() {}

func (x *TestAllTypes) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAllTypes.ProtoReflect.Descriptor instead.
func (*TestAllTypes) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{0}
}

func (x *TestAllTypes) GetSingleInt32() int32 {
	if x != nil && x.SingleInt32 != nil {
		return *x.SingleInt32
	}
	return Default_TestAllTypes_SingleInt32
}

func (x *TestAllTypes) GetSingleInt64() int64 {
	if x != nil && x.SingleInt64 != nil {
		return *x.SingleInt64
	}
	return Default_TestAllTypes_SingleInt64
}

func (x *TestAllTypes) GetSingleUint32() uint32 {
	if x != nil && x.SingleUint32 != nil {
		return *x.SingleUint32
	}
	return Default_TestAllTypes_SingleUint32
}

func (x *TestAllTypes) GetSingleUint64() uint64 {
	if x != nil && x.SingleUint64 != nil {
		return *x.SingleUint64
	}
	return Default_TestAllTypes_SingleUint64
}

func (x *TestAllTypes) GetSingleSint32() int32 {
	if x != nil && x.SingleSint32 != nil {
		return *x.SingleSint32
	}
	return 0
}

func (x *TestAllTypes) GetSingleSint64() int64 {
	if x != nil && x.SingleSint64 != nil {
		return *x.SingleSint64
	}
	return 0
}

func (x *TestAllTypes) GetSingleFixed32() uint32 {
	if x != nil && x.SingleFixed32 != nil {
		return *x.SingleFixed32
	}
	return 0
}

func (x *TestAllTypes) GetSingleFixed64() uint64 {
	if x != nil && x.SingleFixed64 != nil {
		return *x.SingleFixed64
	}
	return 0
}

func (x *TestAllTypes) GetSingleSfixed32() int32 {
	if x != nil && x.SingleSfixed32 != nil {
		return *x.SingleSfixed32
	}
	return 0
}

func (x *TestAllTypes) GetSingleSfixed64() int64 {
	if x != nil && x.SingleSfixed64 != nil {
		return *x.SingleSfixed64
	}
	return 0
}

func (x *TestAllTypes) GetSingleFloat() float32 {
	if x != nil && x.SingleFloat != nil {
		return *x.SingleFloat
	}
	return Default_TestAllTypes_SingleFloat
}

func (x *TestAllTypes) GetSingleDouble() float64 {
	if x != nil && x.SingleDouble != nil {
		return *x.SingleDouble
	}
	return Default_TestAllTypes_SingleDouble
}

func (x *TestAllTypes) GetSingleBool() bool {
	if x != nil && x.SingleBool != nil {
		return *x.SingleBool
	}
	return Default_TestAllTypes_SingleBool
}

func (x *TestAllTypes) GetSingleString() string {
	if x != nil && x.SingleString != nil {
		return *x.SingleString
	}
	return Default_TestAllTypes_SingleString
}

func (x *TestAllTypes) GetSingleBytes() []byte {
	if x != nil && x.SingleBytes != nil {
		return x.SingleBytes
	}
	return append([]byte(nil), Default_TestAllTypes_SingleBytes...)
}

func (x *TestAllTypes) GetIn() bool {
	if x != nil && x.In != nil {
		return *x.In
	}
	return false
}

func (x *TestAllTypes) GetSingleAny() *anypb.Any {
	if x != nil {
		return x.SingleAny
	}
	return nil
}

func (x *TestAllTypes) GetSingleDuration() *durationpb.Duration {
	if x != nil {
		return x.SingleDuration
	}
	return nil
}

func (x *TestAllTypes) GetSingleTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SingleTimestamp
	}
	return nil
}

func (x *TestAllTypes) GetSingleStruct() *structpb.Struct {
	if x != nil {
		return x.SingleStruct
	}
	return nil
}

func (x *TestAllTypes) GetSingleValue() *structpb.Value {
	if x != nil {
		return x.SingleValue
	}
	return nil
}

func (x *TestAllTypes) GetSingleInt64Wrapper() *wrapperspb.Int64Value {
	if x != nil {
		return x.SingleInt64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleInt32Wrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.SingleInt32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleDoubleWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SingleDoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleFloatWrapper() *wrapperspb.FloatValue {
	if x != nil {
		return x.SingleFloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleUint64Wrapper() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SingleUint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleUint32Wrapper() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SingleUint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleStringWrapper() *wrapperspb.StringValue {
	if x != nil {
		return x.SingleStringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleBoolWrapper() *wrapperspb.BoolValue {
	if x != nil {
		return x.SingleBoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetSingleBytesWrapper() *wrapperspb.BytesValue {
	if x != nil {
		return x.SingleBytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetListValue() *structpb.ListValue {
	if x != nil {
		return x.ListValue
	}
	return nil
}

func (x *TestAllTypes) GetNullValue() structpb.NullValue {
	if x != nil && x.NullValue != nil {
		return *x.NullValue
	}
	return structpb.NullValue(0)
}

func (x *TestAllTypes) GetOptionalNullValue() structpb.NullValue {
	if x != nil && x.OptionalNullValue != nil {
		return *x.OptionalNullValue
	}
	return structpb.NullValue(0)
}

func (x *TestAllTypes) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *TestAllTypes) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *TestAllTypes) GetNestedType() isTestAllTypes_NestedType {
	if x != nil {
		return x.NestedType
	}
	return nil
}

func (x *TestAllTypes) GetSingleNestedMessage() *TestAllTypes_NestedMessage {
	if x != nil {
		if x, ok := x.NestedType.(*TestAllTypes_SingleNestedMessage); ok {
			return x.SingleNestedMessage
		}
	}
	return nil
}

func (x *TestAllTypes) GetSingleNestedEnum() TestAllTypes_NestedEnum {
	if x != nil {
		if x, ok := x.NestedType.(*TestAllTypes_SingleNestedEnum); ok {
			return x.SingleNestedEnum
		}
	}
	return Default_TestAllTypes_SingleNestedEnum
}

func (x *TestAllTypes) GetStandaloneMessage() *TestAllTypes_NestedMessage {
	if x != nil {
		return x.StandaloneMessage
	}
	return nil
}

func (x *TestAllTypes) GetStandaloneEnum() TestAllTypes_NestedEnum {
	if x != nil && x.StandaloneEnum != nil {
		return *x.StandaloneEnum
	}
	return TestAllTypes_FOO
}

func (x *TestAllTypes) GetRepeatedInt32() []int32 {
	if x != nil {
		return x.RepeatedInt32
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedInt64() []int64 {
	if x != nil {
		return x.RepeatedInt64
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedUint32() []uint32 {
	if x != nil {
		return x.RepeatedUint32
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedUint64() []uint64 {
	if x != nil {
		return x.RepeatedUint64
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedSint32() []int32 {
	if x != nil {
		return x.RepeatedSint32
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedSint64() []int64 {
	if x != nil {
		return x.RepeatedSint64
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedFixed32() []uint32 {
	if x != nil {
		return x.RepeatedFixed32
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedFixed64() []uint64 {
	if x != nil {
		return x.RepeatedFixed64
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedSfixed32() []int32 {
	if x != nil {
		return x.RepeatedSfixed32
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedSfixed64() []int64 {
	if x != nil {
		return x.RepeatedSfixed64
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedFloat() []float32 {
	if x != nil {
		return x.RepeatedFloat
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedDouble() []float64 {
	if x != nil {
		return x.RepeatedDouble
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedBool() []bool {
	if x != nil {
		return x.RepeatedBool
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedString() []string {
	if x != nil {
		return x.RepeatedString
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedBytes() [][]byte {
	if x != nil {
		return x.RepeatedBytes
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedNestedMessage() []*TestAllTypes_NestedMessage {
	if x != nil {
		return x.RepeatedNestedMessage
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedNestedEnum() []TestAllTypes_NestedEnum {
	if x != nil {
		return x.RepeatedNestedEnum
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedStringPiece() []string {
	if x != nil {
		return x.RepeatedStringPiece
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedCord() []string {
	if x != nil {
		return x.RepeatedCord
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedLazyMessage() []*TestAllTypes_NestedMessage {
	if x != nil {
		return x.RepeatedLazyMessage
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedAny() []*anypb.Any {
	if x != nil {
		return x.RepeatedAny
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedDuration() []*durationpb.Duration {
	if x != nil {
		return x.RepeatedDuration
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.RepeatedTimestamp
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedStruct() []*structpb.Struct {
	if x != nil {
		return x.RepeatedStruct
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedValue() []*structpb.Value {
	if x != nil {
		return x.RepeatedValue
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedInt64Wrapper() []*wrapperspb.Int64Value {
	if x != nil {
		return x.RepeatedInt64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedInt32Wrapper() []*wrapperspb.Int32Value {
	if x != nil {
		return x.RepeatedInt32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedDoubleWrapper() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.RepeatedDoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedFloatWrapper() []*wrapperspb.FloatValue {
	if x != nil {
		return x.RepeatedFloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedUint64Wrapper() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.RepeatedUint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedUint32Wrapper() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.RepeatedUint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedStringWrapper() []*wrapperspb.StringValue {
	if x != nil {
		return x.RepeatedStringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedBoolWrapper() []*wrapperspb.BoolValue {
	if x != nil {
		return x.RepeatedBoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedBytesWrapper() []*wrapperspb.BytesValue {
	if x != nil {
		return x.RepeatedBytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedListValue() []*structpb.ListValue {
	if x != nil {
		return x.RepeatedListValue
	}
	return nil
}

func (x *TestAllTypes) GetRepeatedNullValue() []structpb.NullValue {
	if x != nil {
		return x.RepeatedNullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64NestedType() map[int64]*NestedTestAllTypes {
	if x != nil {
		return x.MapInt64NestedType
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolBool() map[bool]bool {
	if x != nil {
		return x.MapBoolBool
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolString() map[bool]string {
	if x != nil {
		return x.MapBoolString
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolBytes() map[bool][]byte {
	if x != nil {
		return x.MapBoolBytes
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolInt32() map[bool]int32 {
	if x != nil {
		return x.MapBoolInt32
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolInt64() map[bool]int64 {
	if x != nil {
		return x.MapBoolInt64
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolUint32() map[bool]uint32 {
	if x != nil {
		return x.MapBoolUint32
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolUint64() map[bool]uint64 {
	if x != nil {
		return x.MapBoolUint64
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolFloat() map[bool]float32 {
	if x != nil {
		return x.MapBoolFloat
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolDouble() map[bool]float64 {
	if x != nil {
		return x.MapBoolDouble
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolEnum() map[bool]TestAllTypes_NestedEnum {
	if x != nil {
		return x.MapBoolEnum
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolMessage() map[bool]*TestAllTypes_NestedMessage {
	if x != nil {
		return x.MapBoolMessage
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolDuration() map[bool]*durationpb.Duration {
	if x != nil {
		return x.MapBoolDuration
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolTimestamp() map[bool]*timestamppb.Timestamp {
	if x != nil {
		return x.MapBoolTimestamp
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolNullValue() map[bool]structpb.NullValue {
	if x != nil {
		return x.MapBoolNullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolAny() map[bool]*anypb.Any {
	if x != nil {
		return x.MapBoolAny
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolStruct() map[bool]*structpb.Struct {
	if x != nil {
		return x.MapBoolStruct
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolValue() map[bool]*structpb.Value {
	if x != nil {
		return x.MapBoolValue
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolListValue() map[bool]*structpb.ListValue {
	if x != nil {
		return x.MapBoolListValue
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolInt64Wrapper() map[bool]*wrapperspb.Int64Value {
	if x != nil {
		return x.MapBoolInt64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolInt32Wrapper() map[bool]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapBoolInt32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolDoubleWrapper() map[bool]*wrapperspb.DoubleValue {
	if x != nil {
		return x.MapBoolDoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolFloatWrapper() map[bool]*wrapperspb.FloatValue {
	if x != nil {
		return x.MapBoolFloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolUint64Wrapper() map[bool]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapBoolUint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolUint32Wrapper() map[bool]*wrapperspb.UInt32Value {
	if x != nil {
		return x.MapBoolUint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolStringWrapper() map[bool]*wrapperspb.StringValue {
	if x != nil {
		return x.MapBoolStringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolBoolWrapper() map[bool]*wrapperspb.BoolValue {
	if x != nil {
		return x.MapBoolBoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapBoolBytesWrapper() map[bool]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapBoolBytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Bytes() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Int64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Uint32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Uint64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Enum() map[int32]TestAllTypes_NestedEnum {
	if x != nil {
		return x.MapInt32Enum
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Message() map[int32]*TestAllTypes_NestedMessage {
	if x != nil {
		return x.MapInt32Message
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Duration() map[int32]*durationpb.Duration {
	if x != nil {
		return x.MapInt32Duration
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Timestamp() map[int32]*timestamppb.Timestamp {
	if x != nil {
		return x.MapInt32Timestamp
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32NullValue() map[int32]structpb.NullValue {
	if x != nil {
		return x.MapInt32NullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Any() map[int32]*anypb.Any {
	if x != nil {
		return x.MapInt32Any
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Struct() map[int32]*structpb.Struct {
	if x != nil {
		return x.MapInt32Struct
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Value() map[int32]*structpb.Value {
	if x != nil {
		return x.MapInt32Value
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32ListValue() map[int32]*structpb.ListValue {
	if x != nil {
		return x.MapInt32ListValue
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Int64Wrapper() map[int32]*wrapperspb.Int64Value {
	if x != nil {
		return x.MapInt32Int64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Int32Wrapper() map[int32]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapInt32Int32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32DoubleWrapper() map[int32]*wrapperspb.DoubleValue {
	if x != nil {
		return x.MapInt32DoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32FloatWrapper() map[int32]*wrapperspb.FloatValue {
	if x != nil {
		return x.MapInt32FloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Uint64Wrapper() map[int32]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapInt32Uint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32Uint32Wrapper() map[int32]*wrapperspb.UInt32Value {
	if x != nil {
		return x.MapInt32Uint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32StringWrapper() map[int32]*wrapperspb.StringValue {
	if x != nil {
		return x.MapInt32StringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32BoolWrapper() map[int32]*wrapperspb.BoolValue {
	if x != nil {
		return x.MapInt32BoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt32BytesWrapper() map[int32]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapInt32BytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Bool() map[int64]bool {
	if x != nil {
		return x.MapInt64Bool
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64String() map[int64]string {
	if x != nil {
		return x.MapInt64String
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Bytes() map[int64][]byte {
	if x != nil {
		return x.MapInt64Bytes
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Int64() map[int64]int64 {
	if x != nil {
		return x.MapInt64Int64
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Uint32() map[int64]uint32 {
	if x != nil {
		return x.MapInt64Uint32
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Uint64() map[int64]uint64 {
	if x != nil {
		return x.MapInt64Uint64
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Float() map[int64]float32 {
	if x != nil {
		return x.MapInt64Float
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Double() map[int64]float64 {
	if x != nil {
		return x.MapInt64Double
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Enum() map[int64]TestAllTypes_NestedEnum {
	if x != nil {
		return x.MapInt64Enum
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Message() map[int64]*TestAllTypes_NestedMessage {
	if x != nil {
		return x.MapInt64Message
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Duration() map[int64]*durationpb.Duration {
	if x != nil {
		return x.MapInt64Duration
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Timestamp() map[int64]*timestamppb.Timestamp {
	if x != nil {
		return x.MapInt64Timestamp
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64NullValue() map[int64]structpb.NullValue {
	if x != nil {
		return x.MapInt64NullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Any() map[int64]*anypb.Any {
	if x != nil {
		return x.MapInt64Any
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Struct() map[int64]*structpb.Struct {
	if x != nil {
		return x.MapInt64Struct
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Value() map[int64]*structpb.Value {
	if x != nil {
		return x.MapInt64Value
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64ListValue() map[int64]*structpb.ListValue {
	if x != nil {
		return x.MapInt64ListValue
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Int64Wrapper() map[int64]*wrapperspb.Int64Value {
	if x != nil {
		return x.MapInt64Int64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Int32Wrapper() map[int64]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapInt64Int32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64DoubleWrapper() map[int64]*wrapperspb.DoubleValue {
	if x != nil {
		return x.MapInt64DoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64FloatWrapper() map[int64]*wrapperspb.FloatValue {
	if x != nil {
		return x.MapInt64FloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Uint64Wrapper() map[int64]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapInt64Uint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64Uint32Wrapper() map[int64]*wrapperspb.UInt32Value {
	if x != nil {
		return x.MapInt64Uint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64StringWrapper() map[int64]*wrapperspb.StringValue {
	if x != nil {
		return x.MapInt64StringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64BoolWrapper() map[int64]*wrapperspb.BoolValue {
	if x != nil {
		return x.MapInt64BoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapInt64BytesWrapper() map[int64]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapInt64BytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Bool() map[uint32]bool {
	if x != nil {
		return x.MapUint32Bool
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32String() map[uint32]string {
	if x != nil {
		return x.MapUint32String
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Bytes() map[uint32][]byte {
	if x != nil {
		return x.MapUint32Bytes
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Int64() map[uint32]int64 {
	if x != nil {
		return x.MapUint32Int64
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Uint32() map[uint32]uint32 {
	if x != nil {
		return x.MapUint32Uint32
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Uint64() map[uint32]uint64 {
	if x != nil {
		return x.MapUint32Uint64
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Float() map[uint32]float32 {
	if x != nil {
		return x.MapUint32Float
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Double() map[uint32]float64 {
	if x != nil {
		return x.MapUint32Double
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Enum() map[uint32]TestAllTypes_NestedEnum {
	if x != nil {
		return x.MapUint32Enum
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Message() map[uint32]*TestAllTypes_NestedMessage {
	if x != nil {
		return x.MapUint32Message
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Duration() map[uint32]*durationpb.Duration {
	if x != nil {
		return x.MapUint32Duration
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Timestamp() map[uint32]*timestamppb.Timestamp {
	if x != nil {
		return x.MapUint32Timestamp
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32NullValue() map[uint32]structpb.NullValue {
	if x != nil {
		return x.MapUint32NullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Any() map[uint32]*anypb.Any {
	if x != nil {
		return x.MapUint32Any
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Struct() map[uint32]*structpb.Struct {
	if x != nil {
		return x.MapUint32Struct
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Value() map[uint32]*structpb.Value {
	if x != nil {
		return x.MapUint32Value
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32ListValue() map[uint32]*structpb.ListValue {
	if x != nil {
		return x.MapUint32ListValue
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Int64Wrapper() map[uint32]*wrapperspb.Int64Value {
	if x != nil {
		return x.MapUint32Int64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Int32Wrapper() map[uint32]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapUint32Int32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32DoubleWrapper() map[uint32]*wrapperspb.DoubleValue {
	if x != nil {
		return x.MapUint32DoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32FloatWrapper() map[uint32]*wrapperspb.FloatValue {
	if x != nil {
		return x.MapUint32FloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Uint64Wrapper() map[uint32]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapUint32Uint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32Uint32Wrapper() map[uint32]*wrapperspb.UInt32Value {
	if x != nil {
		return x.MapUint32Uint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32StringWrapper() map[uint32]*wrapperspb.StringValue {
	if x != nil {
		return x.MapUint32StringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32BoolWrapper() map[uint32]*wrapperspb.BoolValue {
	if x != nil {
		return x.MapUint32BoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint32BytesWrapper() map[uint32]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapUint32BytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Bool() map[uint64]bool {
	if x != nil {
		return x.MapUint64Bool
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64String() map[uint64]string {
	if x != nil {
		return x.MapUint64String
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Bytes() map[uint64][]byte {
	if x != nil {
		return x.MapUint64Bytes
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Int64() map[uint64]int64 {
	if x != nil {
		return x.MapUint64Int64
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Uint32() map[uint64]uint32 {
	if x != nil {
		return x.MapUint64Uint32
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Uint64() map[uint64]uint64 {
	if x != nil {
		return x.MapUint64Uint64
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Float() map[uint64]float32 {
	if x != nil {
		return x.MapUint64Float
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Double() map[uint64]float64 {
	if x != nil {
		return x.MapUint64Double
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Enum() map[uint64]TestAllTypes_NestedEnum {
	if x != nil {
		return x.MapUint64Enum
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Message() map[uint64]*TestAllTypes_NestedMessage {
	if x != nil {
		return x.MapUint64Message
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Duration() map[uint64]*durationpb.Duration {
	if x != nil {
		return x.MapUint64Duration
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Timestamp() map[uint64]*timestamppb.Timestamp {
	if x != nil {
		return x.MapUint64Timestamp
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64NullValue() map[uint64]structpb.NullValue {
	if x != nil {
		return x.MapUint64NullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Any() map[uint64]*anypb.Any {
	if x != nil {
		return x.MapUint64Any
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Struct() map[uint64]*structpb.Struct {
	if x != nil {
		return x.MapUint64Struct
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Value() map[uint64]*structpb.Value {
	if x != nil {
		return x.MapUint64Value
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64ListValue() map[uint64]*structpb.ListValue {
	if x != nil {
		return x.MapUint64ListValue
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Int64Wrapper() map[uint64]*wrapperspb.Int64Value {
	if x != nil {
		return x.MapUint64Int64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Int32Wrapper() map[uint64]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapUint64Int32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64DoubleWrapper() map[uint64]*wrapperspb.DoubleValue {
	if x != nil {
		return x.MapUint64DoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64FloatWrapper() map[uint64]*wrapperspb.FloatValue {
	if x != nil {
		return x.MapUint64FloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Uint64Wrapper() map[uint64]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapUint64Uint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64Uint32Wrapper() map[uint64]*wrapperspb.UInt32Value {
	if x != nil {
		return x.MapUint64Uint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64StringWrapper() map[uint64]*wrapperspb.StringValue {
	if x != nil {
		return x.MapUint64StringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64BoolWrapper() map[uint64]*wrapperspb.BoolValue {
	if x != nil {
		return x.MapUint64BoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapUint64BytesWrapper() map[uint64]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapUint64BytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringBool() map[string]bool {
	if x != nil {
		return x.MapStringBool
	}
	return nil
}

func (x *TestAllTypes) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *TestAllTypes) GetMapStringBytes() map[string][]byte {
	if x != nil {
		return x.MapStringBytes
	}
	return nil
}

func (x *TestAllTypes) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

func (x *TestAllTypes) GetMapStringInt64() map[string]int64 {
	if x != nil {
		return x.MapStringInt64
	}
	return nil
}

func (x *TestAllTypes) GetMapStringUint32() map[string]uint32 {
	if x != nil {
		return x.MapStringUint32
	}
	return nil
}

func (x *TestAllTypes) GetMapStringUint64() map[string]uint64 {
	if x != nil {
		return x.MapStringUint64
	}
	return nil
}

func (x *TestAllTypes) GetMapStringFloat() map[string]float32 {
	if x != nil {
		return x.MapStringFloat
	}
	return nil
}

func (x *TestAllTypes) GetMapStringDouble() map[string]float64 {
	if x != nil {
		return x.MapStringDouble
	}
	return nil
}

func (x *TestAllTypes) GetMapStringEnum() map[string]TestAllTypes_NestedEnum {
	if x != nil {
		return x.MapStringEnum
	}
	return nil
}

func (x *TestAllTypes) GetMapStringMessage() map[string]*TestAllTypes_NestedMessage {
	if x != nil {
		return x.MapStringMessage
	}
	return nil
}

func (x *TestAllTypes) GetMapStringDuration() map[string]*durationpb.Duration {
	if x != nil {
		return x.MapStringDuration
	}
	return nil
}

func (x *TestAllTypes) GetMapStringTimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.MapStringTimestamp
	}
	return nil
}

func (x *TestAllTypes) GetMapStringNullValue() map[string]structpb.NullValue {
	if x != nil {
		return x.MapStringNullValue
	}
	return nil
}

func (x *TestAllTypes) GetMapStringAny() map[string]*anypb.Any {
	if x != nil {
		return x.MapStringAny
	}
	return nil
}

func (x *TestAllTypes) GetMapStringStruct() map[string]*structpb.Struct {
	if x != nil {
		return x.MapStringStruct
	}
	return nil
}

func (x *TestAllTypes) GetMapStringValue() map[string]*structpb.Value {
	if x != nil {
		return x.MapStringValue
	}
	return nil
}

func (x *TestAllTypes) GetMapStringListValue() map[string]*structpb.ListValue {
	if x != nil {
		return x.MapStringListValue
	}
	return nil
}

func (x *TestAllTypes) GetMapStringInt64Wrapper() map[string]*wrapperspb.Int64Value {
	if x != nil {
		return x.MapStringInt64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringInt32Wrapper() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapStringInt32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringDoubleWrapper() map[string]*wrapperspb.DoubleValue {
	if x != nil {
		return x.MapStringDoubleWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringFloatWrapper() map[string]*wrapperspb.FloatValue {
	if x != nil {
		return x.MapStringFloatWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringUint64Wrapper() map[string]*wrapperspb.UInt64Value {
	if x != nil {
		return x.MapStringUint64Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringUint32Wrapper() map[string]*wrapperspb.UInt32Value {
	if x != nil {
		return x.MapStringUint32Wrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringStringWrapper() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.MapStringStringWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringBoolWrapper() map[string]*wrapperspb.BoolValue {
	if x != nil {
		return x.MapStringBoolWrapper
	}
	return nil
}

func (x *TestAllTypes) GetMapStringBytesWrapper() map[string]*wrapperspb.BytesValue {
	if x != nil {
		return x.MapStringBytesWrapper
	}
	return nil
}

func (x *TestAllTypes) GetKind() isTestAllTypes_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *TestAllTypes) GetOneofType() *NestedTestAllTypes {
	if x != nil {
		if x, ok := x.Kind.(*TestAllTypes_OneofType); ok {
			return x.OneofType
		}
	}
	return nil
}

func (x *TestAllTypes) GetOneofMsg() *TestAllTypes_NestedMessage {
	if x != nil {
		if x, ok := x.Kind.(*TestAllTypes_OneofMsg); ok {
			return x.OneofMsg
		}
	}
	return nil
}

func (x *TestAllTypes) GetOneofBool() bool {
	if x != nil {
		if x, ok := x.Kind.(*TestAllTypes_OneofBool); ok {
			return x.OneofBool
		}
	}
	return false
}

func (x *TestAllTypes) GetNestedgroup() *TestAllTypes_NestedGroup {
	if x != nil {
		return x.Nestedgroup
	}
	return nil
}

func (x *TestAllTypes) GetAs() bool {
	if x != nil && x.As != nil {
		return *x.As
	}
	return false
}

func (x *TestAllTypes) GetBreak() bool {
	if x != nil && x.Break != nil {
		return *x.Break
	}
	return false
}

func (x *TestAllTypes) GetConst() bool {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return false
}

func (x *TestAllTypes) GetContinue() bool {
	if x != nil && x.Continue != nil {
		return *x.Continue
	}
	return false
}

func (x *TestAllTypes) GetElse() bool {
	if x != nil && x.Else != nil {
		return *x.Else
	}
	return false
}

func (x *TestAllTypes) GetFor() bool {
	if x != nil && x.For != nil {
		return *x.For
	}
	return false
}

func (x *TestAllTypes) GetFunction() bool {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return false
}

func (x *TestAllTypes) GetIf() bool {
	if x != nil && x.If != nil {
		return *x.If
	}
	return false
}

func (x *TestAllTypes) GetImport() bool {
	if x != nil && x.Import != nil {
		return *x.Import
	}
	return false
}

func (x *TestAllTypes) GetLet() bool {
	if x != nil && x.Let != nil {
		return *x.Let
	}
	return false
}

func (x *TestAllTypes) GetLoop() bool {
	if x != nil && x.Loop != nil {
		return *x.Loop
	}
	return false
}

func (x *TestAllTypes) GetPackage() bool {
	if x != nil && x.Package != nil {
		return *x.Package
	}
	return false
}

func (x *TestAllTypes) GetNamespace() bool {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return false
}

func (x *TestAllTypes) GetReturn() bool {
	if x != nil && x.Return != nil {
		return *x.Return
	}
	return false
}

func (x *TestAllTypes) GetVar() bool {
	if x != nil && x.Var != nil {
		return *x.Var
	}
	return false
}

func (x *TestAllTypes) GetVoid() bool {
	if x != nil && x.Void != nil {
		return *x.Void
	}
	return false
}

func (x *TestAllTypes) GetWhile() bool {
	if x != nil && x.While != nil {
		return *x.While
	}
	return false
}

type isTestAllTypes_NestedType interface {
	isTestAllTypes_NestedType()
}

type TestAllTypes_SingleNestedMessage struct {
	SingleNestedMessage *TestAllTypes_NestedMessage `protobuf:"bytes,21,opt,name=single_nested_message,json=singleNestedMessage,oneof"`
}

type TestAllTypes_SingleNestedEnum struct {
	SingleNestedEnum TestAllTypes_NestedEnum `protobuf:"varint,22,opt,name=single_nested_enum,json=singleNestedEnum,enum=cel.expr.conformance.proto2.TestAllTypes_NestedEnum,oneof,def=1"`
}

func (*TestAllTypes_SingleNestedMessage) isTestAllTypes_NestedType() {}

func (*TestAllTypes_SingleNestedEnum) isTestAllTypes_NestedType() {}

type isTestAllTypes_Kind interface {
	isTestAllTypes_Kind()
}

type TestAllTypes_OneofType struct {
	OneofType *NestedTestAllTypes `protobuf:"bytes,400,opt,name=oneof_type,json=oneofType,oneof"`
}

type TestAllTypes_OneofMsg struct {
	OneofMsg *TestAllTypes_NestedMessage `protobuf:"bytes,401,opt,name=oneof_msg,json=oneofMsg,oneof"`
}

type TestAllTypes_OneofBool struct {
	OneofBool bool `protobuf:"varint,402,opt,name=oneof_bool,json=oneofBool,oneof"`
}

func (*TestAllTypes_OneofType) isTestAllTypes_Kind() {}

func (*TestAllTypes_OneofMsg) isTestAllTypes_Kind() {}

func (*TestAllTypes_OneofBool) isTestAllTypes_Kind() {}

type NestedTestAllTypes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Child         *NestedTestAllTypes    `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
	Payload       *TestAllTypes          `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NestedTestAllTypes) Reset() {
	*x = NestedTestAllTypes{}
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedTestAllTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedTestAllTypes) ProtoMessage() {}

func (x *NestedTestAllTypes) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedTestAllTypes.ProtoReflect.Descriptor instead.
func (*NestedTestAllTypes) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{1}
}

func (x *NestedTestAllTypes) GetChild() *NestedTestAllTypes {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *NestedTestAllTypes) GetPayload() *TestAllTypes {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TestRequired struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequiredInt32 *int32                 `protobuf:"varint,1,req,name=required_int32,json=requiredInt32" json:"required_int32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRequired) Reset() {
	*x = TestRequired{}
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequired) ProtoMessage() {}

func (x *TestRequired) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequired.ProtoReflect.Descriptor instead.
func (*TestRequired) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{2}
}

func (x *TestRequired) GetRequiredInt32() int32 {
	if x != nil && x.RequiredInt32 != nil {
		return *x.RequiredInt32
	}
	return 0
}

type TestAllTypes_NestedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bb            *int32                 `protobuf:"varint,1,opt,name=bb" json:"bb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestAllTypes_NestedMessage) Reset() {
	*x = TestAllTypes_NestedMessage{}
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAllTypes_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAllTypes_NestedMessage) ProtoMessage() {}

func (x *TestAllTypes_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAllTypes_NestedMessage.ProtoReflect.Descriptor instead.
func (*TestAllTypes_NestedMessage) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestAllTypes_NestedMessage) GetBb() int32 {
	if x != nil && x.Bb != nil {
		return *x.Bb
	}
	return 0
}

type TestAllTypes_NestedGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SingleId      *int32                 `protobuf:"varint,404,opt,name=single_id,json=singleId" json:"single_id,omitempty"`
	SingleName    *string                `protobuf:"bytes,405,opt,name=single_name,json=singleName" json:"single_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestAllTypes_NestedGroup) Reset() {
	*x = TestAllTypes_NestedGroup{}
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAllTypes_NestedGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAllTypes_NestedGroup) ProtoMessage() {}

func (x *TestAllTypes_NestedGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAllTypes_NestedGroup.ProtoReflect.Descriptor instead.
func (*TestAllTypes_NestedGroup) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP(), []int{0, 164}
}

func (x *TestAllTypes_NestedGroup) GetSingleId() int32 {
	if x != nil && x.SingleId != nil {
		return *x.SingleId
	}
	return 0
}

func (x *TestAllTypes_NestedGroup) GetSingleName() string {
	if x != nil && x.SingleName != nil {
		return *x.SingleName
	}
	return ""
}

var File_cel_expr_conformance_proto2_test_all_types_proto protoreflect.FileDescriptor

const file_cel_expr_conformance_proto2_test_all_types_proto_rawDesc = "" +
	"\n" +
	"0cel/expr/conformance/proto2/test_all_types.proto\x12\x1bcel.expr.conformance.proto2\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xf0\xae\x02\n" +
	"\fTestAllTypes\x12&\n" +
	"\fsingle_int32\x18\x01 \x01(\x05:\x03-32R\vsingleInt32\x12&\n" +
	"\fsingle_int64\x18\x02 \x01(\x03:\x03-64R\vsingleInt64\x12'\n" +
	"\rsingle_uint32\x18\x03 \x01(\r:\x0232R\fsingleUint32\x12'\n" +
	"\rsingle_uint64\x18\x04 \x01(\x04:\x0264R\fsingleUint64\x12#\n" +
	"\rsingle_sint32\x18\x05 \x01(\x11R\fsingleSint32\x12#\n" +
	"\rsingle_sint64\x18\x06 \x01(\x12R\fsingleSint64\x12%\n" +
	"\x0esingle_fixed32\x18\a \x01(\aR\rsingleFixed32\x12%\n" +
	"\x0esingle_fixed64\x18\b \x01(\x06R\rsingleFixed64\x12'\n" +
	"\x0fsingle_sfixed32\x18\t \x01(\x0fR\x0esingleSfixed32\x12'\n" +
	"\x0fsingle_sfixed64\x18\n" +
	" \x01(\x10R\x0esingleSfixed64\x12$\n" +
	"\fsingle_float\x18\v \x01(\x02:\x013R\vsingleFloat\x12(\n" +
	"\rsingle_double\x18\f \x01(\x01:\x036.4R\fsingleDouble\x12%\n" +
	"\vsingle_bool\x18\r \x01(\b:\x04trueR\n" +
	"singleBool\x12*\n" +
	"\rsingle_string\x18\x0e \x01(\t:\x05emptyR\fsingleString\x12'\n" +
	"\fsingle_bytes\x18\x0f \x01(\f:\x04noneR\vsingleBytes\x12\x0e\n" +
	"\x02in\x18\x12 \x01(\bR\x02in\x123\n" +
	"\n" +
	"single_any\x18d \x01(\v2\x14.google.protobuf.AnyR\tsingleAny\x12B\n" +
	"\x0fsingle_duration\x18e \x01(\v2\x19.google.protobuf.DurationR\x0esingleDuration\x12E\n" +
	"\x10single_timestamp\x18f \x01(\v2\x1a.google.protobuf.TimestampR\x0fsingleTimestamp\x12<\n" +
	"\rsingle_struct\x18g \x01(\v2\x17.google.protobuf.StructR\fsingleStruct\x129\n" +
	"\fsingle_value\x18h \x01(\v2\x16.google.protobuf.ValueR\vsingleValue\x12M\n" +
	"\x14single_int64_wrapper\x18i \x01(\v2\x1b.google.protobuf.Int64ValueR\x12singleInt64Wrapper\x12M\n" +
	"\x14single_int32_wrapper\x18j \x01(\v2\x1b.google.protobuf.Int32ValueR\x12singleInt32Wrapper\x12P\n" +
	"\x15single_double_wrapper\x18k \x01(\v2\x1c.google.protobuf.DoubleValueR\x13singleDoubleWrapper\x12M\n" +
	"\x14single_float_wrapper\x18l \x01(\v2\x1b.google.protobuf.FloatValueR\x12singleFloatWrapper\x12P\n" +
	"\x15single_uint64_wrapper\x18m \x01(\v2\x1c.google.protobuf.UInt64ValueR\x13singleUint64Wrapper\x12P\n" +
	"\x15single_uint32_wrapper\x18n \x01(\v2\x1c.google.protobuf.UInt32ValueR\x13singleUint32Wrapper\x12P\n" +
	"\x15single_string_wrapper\x18o \x01(\v2\x1c.google.protobuf.StringValueR\x13singleStringWrapper\x12J\n" +
	"\x13single_bool_wrapper\x18p \x01(\v2\x1a.google.protobuf.BoolValueR\x11singleBoolWrapper\x12M\n" +
	"\x14single_bytes_wrapper\x18q \x01(\v2\x1b.google.protobuf.BytesValueR\x12singleBytesWrapper\x129\n" +
	"\n" +
	"list_value\x18r \x01(\v2\x1a.google.protobuf.ListValueR\tlistValue\x129\n" +
	"\n" +
	"null_value\x18s \x01(\x0e2\x1a.google.protobuf.NullValueR\tnullValue\x12J\n" +
	"\x13optional_null_value\x18t \x01(\x0e2\x1a.google.protobuf.NullValueR\x11optionalNullValue\x129\n" +
	"\n" +
	"field_mask\x18u \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMask\x12,\n" +
	"\x05empty\x18v \x01(\v2\x16.google.protobuf.EmptyR\x05empty\x12m\n" +
	"\x15single_nested_message\x18\x15 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageH\x00R\x13singleNestedMessage\x12i\n" +
	"\x12single_nested_enum\x18\x16 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnum:\x03BARH\x00R\x10singleNestedEnum\x12f\n" +
	"\x12standalone_message\x18\x17 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x11standaloneMessage\x12]\n" +
	"\x0fstandalone_enum\x18\x18 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x0estandaloneEnum\x12%\n" +
	"\x0erepeated_int32\x18\x1f \x03(\x05R\rrepeatedInt32\x12%\n" +
	"\x0erepeated_int64\x18  \x03(\x03R\rrepeatedInt64\x12'\n" +
	"\x0frepeated_uint32\x18! \x03(\rR\x0erepeatedUint32\x12'\n" +
	"\x0frepeated_uint64\x18\" \x03(\x04R\x0erepeatedUint64\x12'\n" +
	"\x0frepeated_sint32\x18# \x03(\x11R\x0erepeatedSint32\x12'\n" +
	"\x0frepeated_sint64\x18$ \x03(\x12R\x0erepeatedSint64\x12)\n" +
	"\x10repeated_fixed32\x18% \x03(\aR\x0frepeatedFixed32\x12)\n" +
	"\x10repeated_fixed64\x18& \x03(\x06R\x0frepeatedFixed64\x12+\n" +
	"\x11repeated_sfixed32\x18' \x03(\x0fR\x10repeatedSfixed32\x12+\n" +
	"\x11repeated_sfixed64\x18( \x03(\x10R\x10repeatedSfixed64\x12%\n" +
	"\x0erepeated_float\x18) \x03(\x02R\rrepeatedFloat\x12'\n" +
	"\x0frepeated_double\x18* \x03(\x01R\x0erepeatedDouble\x12#\n" +
	"\rrepeated_bool\x18+ \x03(\bR\frepeatedBool\x12'\n" +
	"\x0frepeated_string\x18, \x03(\tR\x0erepeatedString\x12%\n" +
	"\x0erepeated_bytes\x18- \x03(\fR\rrepeatedBytes\x12o\n" +
	"\x17repeated_nested_message\x183 \x03(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x15repeatedNestedMessage\x12f\n" +
	"\x14repeated_nested_enum\x184 \x03(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x12repeatedNestedEnum\x126\n" +
	"\x15repeated_string_piece\x185 \x03(\tB\x02\b\x02R\x13repeatedStringPiece\x12'\n" +
	"\rrepeated_cord\x186 \x03(\tB\x02\b\x01R\frepeatedCord\x12k\n" +
	"\x15repeated_lazy_message\x187 \x03(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x13repeatedLazyMessage\x127\n" +
	"\frepeated_any\x18x \x03(\v2\x14.google.protobuf.AnyR\vrepeatedAny\x12F\n" +
	"\x11repeated_duration\x18y \x03(\v2\x19.google.protobuf.DurationR\x10repeatedDuration\x12I\n" +
	"\x12repeated_timestamp\x18z \x03(\v2\x1a.google.protobuf.TimestampR\x11repeatedTimestamp\x12@\n" +
	"\x0frepeated_struct\x18{ \x03(\v2\x17.google.protobuf.StructR\x0erepeatedStruct\x12=\n" +
	"\x0erepeated_value\x18| \x03(\v2\x16.google.protobuf.ValueR\rrepeatedValue\x12Q\n" +
	"\x16repeated_int64_wrapper\x18} \x03(\v2\x1b.google.protobuf.Int64ValueR\x14repeatedInt64Wrapper\x12Q\n" +
	"\x16repeated_int32_wrapper\x18~ \x03(\v2\x1b.google.protobuf.Int32ValueR\x14repeatedInt32Wrapper\x12T\n" +
	"\x17repeated_double_wrapper\x18\x7f \x03(\v2\x1c.google.protobuf.DoubleValueR\x15repeatedDoubleWrapper\x12R\n" +
	"\x16repeated_float_wrapper\x18\x80\x01 \x03(\v2\x1b.google.protobuf.FloatValueR\x14repeatedFloatWrapper\x12U\n" +
	"\x17repeated_uint64_wrapper\x18\x81\x01 \x03(\v2\x1c.google.protobuf.UInt64ValueR\x15repeatedUint64Wrapper\x12U\n" +
	"\x17repeated_uint32_wrapper\x18\x82\x01 \x03(\v2\x1c.google.protobuf.UInt32ValueR\x15repeatedUint32Wrapper\x12U\n" +
	"\x17repeated_string_wrapper\x18\x83\x01 \x03(\v2\x1c.google.protobuf.StringValueR\x15repeatedStringWrapper\x12O\n" +
	"\x15repeated_bool_wrapper\x18\x84\x01 \x03(\v2\x1a.google.protobuf.BoolValueR\x13repeatedBoolWrapper\x12R\n" +
	"\x16repeated_bytes_wrapper\x18\x85\x01 \x03(\v2\x1b.google.protobuf.BytesValueR\x14repeatedBytesWrapper\x12K\n" +
	"\x13repeated_list_value\x18\x86\x01 \x03(\v2\x1a.google.protobuf.ListValueR\x11repeatedListValue\x12K\n" +
	"\x13repeated_null_value\x18\x87\x01 \x03(\x0e2\x1a.google.protobuf.NullValueR\x11repeatedNullValue\x12t\n" +
	"\x15map_int64_nested_type\x18> \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapInt64NestedTypeEntryR\x12mapInt64NestedType\x12^\n" +
	"\rmap_bool_bool\x18? \x03(\v2:.cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolEntryR\vmapBoolBool\x12d\n" +
	"\x0fmap_bool_string\x18@ \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapBoolStringEntryR\rmapBoolString\x12a\n" +
	"\x0emap_bool_bytes\x18A \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesEntryR\fmapBoolBytes\x12a\n" +
	"\x0emap_bool_int32\x18B \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32EntryR\fmapBoolInt32\x12a\n" +
	"\x0emap_bool_int64\x18C \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64EntryR\fmapBoolInt64\x12d\n" +
	"\x0fmap_bool_uint32\x18D \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32EntryR\rmapBoolUint32\x12d\n" +
	"\x0fmap_bool_uint64\x18E \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64EntryR\rmapBoolUint64\x12a\n" +
	"\x0emap_bool_float\x18F \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatEntryR\fmapBoolFloat\x12d\n" +
	"\x0fmap_bool_double\x18G \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleEntryR\rmapBoolDouble\x12^\n" +
	"\rmap_bool_enum\x18H \x03(\v2:.cel.expr.conformance.proto2.TestAllTypes.MapBoolEnumEntryR\vmapBoolEnum\x12g\n" +
	"\x10map_bool_message\x18I \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapBoolMessageEntryR\x0emapBoolMessage\x12k\n" +
	"\x11map_bool_duration\x18\xe4\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapBoolDurationEntryR\x0fmapBoolDuration\x12n\n" +
	"\x12map_bool_timestamp\x18\xe5\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapBoolTimestampEntryR\x10mapBoolTimestamp\x12o\n" +
	"\x13map_bool_null_value\x18\xe6\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapBoolNullValueEntryR\x10mapBoolNullValue\x12\\\n" +
	"\fmap_bool_any\x18\xf6\x01 \x03(\v29.cel.expr.conformance.proto2.TestAllTypes.MapBoolAnyEntryR\n" +
	"mapBoolAny\x12e\n" +
	"\x0fmap_bool_struct\x18\xf7\x01 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapBoolStructEntryR\rmapBoolStruct\x12b\n" +
	"\x0emap_bool_value\x18\xf8\x01 \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapBoolValueEntryR\fmapBoolValue\x12o\n" +
	"\x13map_bool_list_value\x18\xf9\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapBoolListValueEntryR\x10mapBoolListValue\x12x\n" +
	"\x16map_bool_int64_wrapper\x18\xfa\x01 \x03(\v2B.cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64WrapperEntryR\x13mapBoolInt64Wrapper\x12x\n" +
	"\x16map_bool_int32_wrapper\x18\xfb\x01 \x03(\v2B.cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32WrapperEntryR\x13mapBoolInt32Wrapper\x12{\n" +
	"\x17map_bool_double_wrapper\x18\xfc\x01 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleWrapperEntryR\x14mapBoolDoubleWrapper\x12x\n" +
	"\x16map_bool_float_wrapper\x18\xfd\x01 \x03(\v2B.cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatWrapperEntryR\x13mapBoolFloatWrapper\x12{\n" +
	"\x17map_bool_uint64_wrapper\x18\xfe\x01 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64WrapperEntryR\x14mapBoolUint64Wrapper\x12{\n" +
	"\x17map_bool_uint32_wrapper\x18\xff\x01 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32WrapperEntryR\x14mapBoolUint32Wrapper\x12{\n" +
	"\x17map_bool_string_wrapper\x18\x80\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapBoolStringWrapperEntryR\x14mapBoolStringWrapper\x12u\n" +
	"\x15map_bool_bool_wrapper\x18\x81\x02 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolWrapperEntryR\x12mapBoolBoolWrapper\x12x\n" +
	"\x16map_bool_bytes_wrapper\x18\x82\x02 \x03(\v2B.cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesWrapperEntryR\x13mapBoolBytesWrapper\x12a\n" +
	"\x0emap_int32_bool\x18J \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolEntryR\fmapInt32Bool\x12g\n" +
	"\x10map_int32_string\x18K \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt32StringEntryR\x0emapInt32String\x12d\n" +
	"\x0fmap_int32_bytes\x18L \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesEntryR\rmapInt32Bytes\x12d\n" +
	"\x0fmap_int32_int32\x18M \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32EntryR\rmapInt32Int32\x12d\n" +
	"\x0fmap_int32_int64\x18N \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64EntryR\rmapInt32Int64\x12g\n" +
	"\x10map_int32_uint32\x18O \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32EntryR\x0emapInt32Uint32\x12g\n" +
	"\x10map_int32_uint64\x18P \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64EntryR\x0emapInt32Uint64\x12d\n" +
	"\x0fmap_int32_float\x18Q \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatEntryR\rmapInt32Float\x12g\n" +
	"\x10map_int32_double\x18R \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleEntryR\x0emapInt32Double\x12a\n" +
	"\x0emap_int32_enum\x18S \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapInt32EnumEntryR\fmapInt32Enum\x12j\n" +
	"\x11map_int32_message\x18T \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapInt32MessageEntryR\x0fmapInt32Message\x12n\n" +
	"\x12map_int32_duration\x18\xe7\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapInt32DurationEntryR\x10mapInt32Duration\x12q\n" +
	"\x13map_int32_timestamp\x18\xe8\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapInt32TimestampEntryR\x11mapInt32Timestamp\x12r\n" +
	"\x14map_int32_null_value\x18\xe9\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapInt32NullValueEntryR\x11mapInt32NullValue\x12_\n" +
	"\rmap_int32_any\x18\x83\x02 \x03(\v2:.cel.expr.conformance.proto2.TestAllTypes.MapInt32AnyEntryR\vmapInt32Any\x12h\n" +
	"\x10map_int32_struct\x18\x84\x02 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt32StructEntryR\x0emapInt32Struct\x12e\n" +
	"\x0fmap_int32_value\x18\x85\x02 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt32ValueEntryR\rmapInt32Value\x12r\n" +
	"\x14map_int32_list_value\x18\x86\x02 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapInt32ListValueEntryR\x11mapInt32ListValue\x12{\n" +
	"\x17map_int32_int64_wrapper\x18\x87\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64WrapperEntryR\x14mapInt32Int64Wrapper\x12{\n" +
	"\x17map_int32_int32_wrapper\x18\x88\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32WrapperEntryR\x14mapInt32Int32Wrapper\x12~\n" +
	"\x18map_int32_double_wrapper\x18\x89\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleWrapperEntryR\x15mapInt32DoubleWrapper\x12{\n" +
	"\x17map_int32_float_wrapper\x18\x8a\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatWrapperEntryR\x14mapInt32FloatWrapper\x12~\n" +
	"\x18map_int32_uint64_wrapper\x18\x8b\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64WrapperEntryR\x15mapInt32Uint64Wrapper\x12~\n" +
	"\x18map_int32_uint32_wrapper\x18\x8c\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32WrapperEntryR\x15mapInt32Uint32Wrapper\x12~\n" +
	"\x18map_int32_string_wrapper\x18\x8d\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt32StringWrapperEntryR\x15mapInt32StringWrapper\x12x\n" +
	"\x16map_int32_bool_wrapper\x18\x8e\x02 \x03(\v2B.cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolWrapperEntryR\x13mapInt32BoolWrapper\x12{\n" +
	"\x17map_int32_bytes_wrapper\x18\x8f\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesWrapperEntryR\x14mapInt32BytesWrapper\x12a\n" +
	"\x0emap_int64_bool\x18U \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolEntryR\fmapInt64Bool\x12g\n" +
	"\x10map_int64_string\x18V \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt64StringEntryR\x0emapInt64String\x12d\n" +
	"\x0fmap_int64_bytes\x18W \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesEntryR\rmapInt64Bytes\x12d\n" +
	"\x0fmap_int64_int32\x18X \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32EntryR\rmapInt64Int32\x12d\n" +
	"\x0fmap_int64_int64\x18Y \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64EntryR\rmapInt64Int64\x12g\n" +
	"\x10map_int64_uint32\x18Z \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32EntryR\x0emapInt64Uint32\x12g\n" +
	"\x10map_int64_uint64\x18[ \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64EntryR\x0emapInt64Uint64\x12d\n" +
	"\x0fmap_int64_float\x18\\ \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatEntryR\rmapInt64Float\x12g\n" +
	"\x10map_int64_double\x18] \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleEntryR\x0emapInt64Double\x12a\n" +
	"\x0emap_int64_enum\x18^ \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapInt64EnumEntryR\fmapInt64Enum\x12j\n" +
	"\x11map_int64_message\x18_ \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapInt64MessageEntryR\x0fmapInt64Message\x12n\n" +
	"\x12map_int64_duration\x18\xea\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapInt64DurationEntryR\x10mapInt64Duration\x12q\n" +
	"\x13map_int64_timestamp\x18\xeb\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapInt64TimestampEntryR\x11mapInt64Timestamp\x12r\n" +
	"\x14map_int64_null_value\x18\xec\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapInt64NullValueEntryR\x11mapInt64NullValue\x12_\n" +
	"\rmap_int64_any\x18\x90\x02 \x03(\v2:.cel.expr.conformance.proto2.TestAllTypes.MapInt64AnyEntryR\vmapInt64Any\x12h\n" +
	"\x10map_int64_struct\x18\x91\x02 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapInt64StructEntryR\x0emapInt64Struct\x12e\n" +
	"\x0fmap_int64_value\x18\x92\x02 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapInt64ValueEntryR\rmapInt64Value\x12r\n" +
	"\x14map_int64_list_value\x18\x93\x02 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapInt64ListValueEntryR\x11mapInt64ListValue\x12{\n" +
	"\x17map_int64_int64_wrapper\x18\x94\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64WrapperEntryR\x14mapInt64Int64Wrapper\x12{\n" +
	"\x17map_int64_int32_wrapper\x18\x95\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32WrapperEntryR\x14mapInt64Int32Wrapper\x12~\n" +
	"\x18map_int64_double_wrapper\x18\x96\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleWrapperEntryR\x15mapInt64DoubleWrapper\x12{\n" +
	"\x17map_int64_float_wrapper\x18\x97\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatWrapperEntryR\x14mapInt64FloatWrapper\x12~\n" +
	"\x18map_int64_uint64_wrapper\x18\x98\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64WrapperEntryR\x15mapInt64Uint64Wrapper\x12~\n" +
	"\x18map_int64_uint32_wrapper\x18\x99\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32WrapperEntryR\x15mapInt64Uint32Wrapper\x12~\n" +
	"\x18map_int64_string_wrapper\x18\x9a\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapInt64StringWrapperEntryR\x15mapInt64StringWrapper\x12x\n" +
	"\x16map_int64_bool_wrapper\x18\x9b\x02 \x03(\v2B.cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolWrapperEntryR\x13mapInt64BoolWrapper\x12{\n" +
	"\x17map_int64_bytes_wrapper\x18\x9c\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesWrapperEntryR\x14mapInt64BytesWrapper\x12d\n" +
	"\x0fmap_uint32_bool\x18` \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolEntryR\rmapUint32Bool\x12j\n" +
	"\x11map_uint32_string\x18a \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint32StringEntryR\x0fmapUint32String\x12g\n" +
	"\x10map_uint32_bytes\x18b \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesEntryR\x0emapUint32Bytes\x12g\n" +
	"\x10map_uint32_int32\x18c \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32EntryR\x0emapUint32Int32\x12h\n" +
	"\x10map_uint32_int64\x18\xc8\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64EntryR\x0emapUint32Int64\x12k\n" +
	"\x11map_uint32_uint32\x18\xc9\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32EntryR\x0fmapUint32Uint32\x12k\n" +
	"\x11map_uint32_uint64\x18\xca\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64EntryR\x0fmapUint32Uint64\x12h\n" +
	"\x10map_uint32_float\x18\xcb\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatEntryR\x0emapUint32Float\x12k\n" +
	"\x11map_uint32_double\x18\xcc\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleEntryR\x0fmapUint32Double\x12e\n" +
	"\x0fmap_uint32_enum\x18\xcd\x01 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapUint32EnumEntryR\rmapUint32Enum\x12n\n" +
	"\x12map_uint32_message\x18\xce\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapUint32MessageEntryR\x10mapUint32Message\x12q\n" +
	"\x13map_uint32_duration\x18\xed\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapUint32DurationEntryR\x11mapUint32Duration\x12t\n" +
	"\x14map_uint32_timestamp\x18\xee\x01 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapUint32TimestampEntryR\x12mapUint32Timestamp\x12u\n" +
	"\x15map_uint32_null_value\x18\xef\x01 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapUint32NullValueEntryR\x12mapUint32NullValue\x12b\n" +
	"\x0emap_uint32_any\x18\x9d\x02 \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapUint32AnyEntryR\fmapUint32Any\x12k\n" +
	"\x11map_uint32_struct\x18\x9e\x02 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint32StructEntryR\x0fmapUint32Struct\x12h\n" +
	"\x10map_uint32_value\x18\x9f\x02 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint32ValueEntryR\x0emapUint32Value\x12u\n" +
	"\x15map_uint32_list_value\x18\xa0\x02 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapUint32ListValueEntryR\x12mapUint32ListValue\x12~\n" +
	"\x18map_uint32_int64_wrapper\x18\xa1\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64WrapperEntryR\x15mapUint32Int64Wrapper\x12~\n" +
	"\x18map_uint32_int32_wrapper\x18\xa2\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32WrapperEntryR\x15mapUint32Int32Wrapper\x12\x81\x01\n" +
	"\x19map_uint32_double_wrapper\x18\xa3\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleWrapperEntryR\x16mapUint32DoubleWrapper\x12~\n" +
	"\x18map_uint32_float_wrapper\x18\xa4\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatWrapperEntryR\x15mapUint32FloatWrapper\x12\x81\x01\n" +
	"\x19map_uint32_uint64_wrapper\x18\xa5\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64WrapperEntryR\x16mapUint32Uint64Wrapper\x12\x81\x01\n" +
	"\x19map_uint32_uint32_wrapper\x18\xa6\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32WrapperEntryR\x16mapUint32Uint32Wrapper\x12\x81\x01\n" +
	"\x19map_uint32_string_wrapper\x18\xa7\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint32StringWrapperEntryR\x16mapUint32StringWrapper\x12{\n" +
	"\x17map_uint32_bool_wrapper\x18\xa8\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolWrapperEntryR\x14mapUint32BoolWrapper\x12~\n" +
	"\x18map_uint32_bytes_wrapper\x18\xa9\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesWrapperEntryR\x15mapUint32BytesWrapper\x12e\n" +
	"\x0fmap_uint64_bool\x18\xcf\x01 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolEntryR\rmapUint64Bool\x12k\n" +
	"\x11map_uint64_string\x18\xd0\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint64StringEntryR\x0fmapUint64String\x12h\n" +
	"\x10map_uint64_bytes\x18\xd1\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesEntryR\x0emapUint64Bytes\x12h\n" +
	"\x10map_uint64_int32\x18\xd2\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32EntryR\x0emapUint64Int32\x12h\n" +
	"\x10map_uint64_int64\x18\xd3\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64EntryR\x0emapUint64Int64\x12k\n" +
	"\x11map_uint64_uint32\x18\xd4\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32EntryR\x0fmapUint64Uint32\x12k\n" +
	"\x11map_uint64_uint64\x18\xd5\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64EntryR\x0fmapUint64Uint64\x12h\n" +
	"\x10map_uint64_float\x18\xd6\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatEntryR\x0emapUint64Float\x12k\n" +
	"\x11map_uint64_double\x18\xd7\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleEntryR\x0fmapUint64Double\x12e\n" +
	"\x0fmap_uint64_enum\x18\xd8\x01 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapUint64EnumEntryR\rmapUint64Enum\x12n\n" +
	"\x12map_uint64_message\x18\xd9\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapUint64MessageEntryR\x10mapUint64Message\x12q\n" +
	"\x13map_uint64_duration\x18\xf0\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapUint64DurationEntryR\x11mapUint64Duration\x12t\n" +
	"\x14map_uint64_timestamp\x18\xf1\x01 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapUint64TimestampEntryR\x12mapUint64Timestamp\x12u\n" +
	"\x15map_uint64_null_value\x18\xf2\x01 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapUint64NullValueEntryR\x12mapUint64NullValue\x12b\n" +
	"\x0emap_uint64_any\x18\xaa\x02 \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapUint64AnyEntryR\fmapUint64Any\x12k\n" +
	"\x11map_uint64_struct\x18\xab\x02 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapUint64StructEntryR\x0fmapUint64Struct\x12h\n" +
	"\x10map_uint64_value\x18\xac\x02 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapUint64ValueEntryR\x0emapUint64Value\x12u\n" +
	"\x15map_uint64_list_value\x18\xad\x02 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapUint64ListValueEntryR\x12mapUint64ListValue\x12~\n" +
	"\x18map_uint64_int64_wrapper\x18\xae\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64WrapperEntryR\x15mapUint64Int64Wrapper\x12~\n" +
	"\x18map_uint64_int32_wrapper\x18\xaf\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32WrapperEntryR\x15mapUint64Int32Wrapper\x12\x81\x01\n" +
	"\x19map_uint64_double_wrapper\x18\xb0\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleWrapperEntryR\x16mapUint64DoubleWrapper\x12~\n" +
	"\x18map_uint64_float_wrapper\x18\xb1\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatWrapperEntryR\x15mapUint64FloatWrapper\x12\x81\x01\n" +
	"\x19map_uint64_uint64_wrapper\x18\xb2\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64WrapperEntryR\x16mapUint64Uint64Wrapper\x12\x81\x01\n" +
	"\x19map_uint64_uint32_wrapper\x18\xb3\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32WrapperEntryR\x16mapUint64Uint32Wrapper\x12\x81\x01\n" +
	"\x19map_uint64_string_wrapper\x18\xb4\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapUint64StringWrapperEntryR\x16mapUint64StringWrapper\x12{\n" +
	"\x17map_uint64_bool_wrapper\x18\xb5\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolWrapperEntryR\x14mapUint64BoolWrapper\x12~\n" +
	"\x18map_uint64_bytes_wrapper\x18\xb6\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesWrapperEntryR\x15mapUint64BytesWrapper\x12e\n" +
	"\x0fmap_string_bool\x18\xda\x01 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapStringBoolEntryR\rmapStringBool\x12j\n" +
	"\x11map_string_string\x18= \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapStringStringEntryR\x0fmapStringString\x12h\n" +
	"\x10map_string_bytes\x18\xdb\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapStringBytesEntryR\x0emapStringBytes\x12h\n" +
	"\x10map_string_int32\x18\xdc\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapStringInt32EntryR\x0emapStringInt32\x12h\n" +
	"\x10map_string_int64\x18\xdd\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapStringInt64EntryR\x0emapStringInt64\x12k\n" +
	"\x11map_string_uint32\x18\xde\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapStringUint32EntryR\x0fmapStringUint32\x12k\n" +
	"\x11map_string_uint64\x18\xdf\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapStringUint64EntryR\x0fmapStringUint64\x12h\n" +
	"\x10map_string_float\x18\xe0\x01 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapStringFloatEntryR\x0emapStringFloat\x12k\n" +
	"\x11map_string_double\x18\xe1\x01 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleEntryR\x0fmapStringDouble\x12e\n" +
	"\x0fmap_string_enum\x18\xe2\x01 \x03(\v2<.cel.expr.conformance.proto2.TestAllTypes.MapStringEnumEntryR\rmapStringEnum\x12n\n" +
	"\x12map_string_message\x18\xe3\x01 \x03(\v2?.cel.expr.conformance.proto2.TestAllTypes.MapStringMessageEntryR\x10mapStringMessage\x12q\n" +
	"\x13map_string_duration\x18\xf3\x01 \x03(\v2@.cel.expr.conformance.proto2.TestAllTypes.MapStringDurationEntryR\x11mapStringDuration\x12t\n" +
	"\x14map_string_timestamp\x18\xf4\x01 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapStringTimestampEntryR\x12mapStringTimestamp\x12u\n" +
	"\x15map_string_null_value\x18\xf5\x01 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapStringNullValueEntryR\x12mapStringNullValue\x12b\n" +
	"\x0emap_string_any\x18\xb7\x02 \x03(\v2;.cel.expr.conformance.proto2.TestAllTypes.MapStringAnyEntryR\fmapStringAny\x12k\n" +
	"\x11map_string_struct\x18\xb8\x02 \x03(\v2>.cel.expr.conformance.proto2.TestAllTypes.MapStringStructEntryR\x0fmapStringStruct\x12h\n" +
	"\x10map_string_value\x18\xb9\x02 \x03(\v2=.cel.expr.conformance.proto2.TestAllTypes.MapStringValueEntryR\x0emapStringValue\x12u\n" +
	"\x15map_string_list_value\x18\xba\x02 \x03(\v2A.cel.expr.conformance.proto2.TestAllTypes.MapStringListValueEntryR\x12mapStringListValue\x12~\n" +
	"\x18map_string_int64_wrapper\x18\xbb\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapStringInt64WrapperEntryR\x15mapStringInt64Wrapper\x12~\n" +
	"\x18map_string_int32_wrapper\x18\xbc\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapStringInt32WrapperEntryR\x15mapStringInt32Wrapper\x12\x81\x01\n" +
	"\x19map_string_double_wrapper\x18\xbd\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleWrapperEntryR\x16mapStringDoubleWrapper\x12~\n" +
	"\x18map_string_float_wrapper\x18\xbe\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapStringFloatWrapperEntryR\x15mapStringFloatWrapper\x12\x81\x01\n" +
	"\x19map_string_uint64_wrapper\x18\xbf\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapStringUint64WrapperEntryR\x16mapStringUint64Wrapper\x12\x81\x01\n" +
	"\x19map_string_uint32_wrapper\x18\xc0\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapStringUint32WrapperEntryR\x16mapStringUint32Wrapper\x12\x81\x01\n" +
	"\x19map_string_string_wrapper\x18\xc1\x02 \x03(\v2E.cel.expr.conformance.proto2.TestAllTypes.MapStringStringWrapperEntryR\x16mapStringStringWrapper\x12{\n" +
	"\x17map_string_bool_wrapper\x18\xc2\x02 \x03(\v2C.cel.expr.conformance.proto2.TestAllTypes.MapStringBoolWrapperEntryR\x14mapStringBoolWrapper\x12~\n" +
	"\x18map_string_bytes_wrapper\x18\xc3\x02 \x03(\v2D.cel.expr.conformance.proto2.TestAllTypes.MapStringBytesWrapperEntryR\x15mapStringBytesWrapper\x12Q\n" +
	"\n" +
	"oneof_type\x18\x90\x03 \x01(\v2/.cel.expr.conformance.proto2.NestedTestAllTypesH\x01R\toneofType\x12W\n" +
	"\toneof_msg\x18\x91\x03 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageH\x01R\boneofMsg\x12 \n" +
	"\n" +
	"oneof_bool\x18\x92\x03 \x01(\bH\x01R\toneofBool\x12X\n" +
	"\vnestedgroup\x18\x93\x03 \x01(\n" +
	"25.cel.expr.conformance.proto2.TestAllTypes.NestedGroupR\vnestedgroup\x12\x0f\n" +
	"\x02as\x18\xf4\x03 \x01(\bR\x02as\x12\x15\n" +
	"\x05break\x18\xf5\x03 \x01(\bR\x05break\x12\x15\n" +
	"\x05const\x18\xf6\x03 \x01(\bR\x05const\x12\x1b\n" +
	"\bcontinue\x18\xf7\x03 \x01(\bR\bcontinue\x12\x13\n" +
	"\x04else\x18\xf8\x03 \x01(\bR\x04else\x12\x11\n" +
	"\x03for\x18\xf9\x03 \x01(\bR\x03for\x12\x1b\n" +
	"\bfunction\x18\xfa\x03 \x01(\bR\bfunction\x12\x0f\n" +
	"\x02if\x18\xfb\x03 \x01(\bR\x02if\x12\x17\n" +
	"\x06import\x18\xfc\x03 \x01(\bR\x06import\x12\x11\n" +
	"\x03let\x18\xfd\x03 \x01(\bR\x03let\x12\x13\n" +
	"\x04loop\x18\xfe\x03 \x01(\bR\x04loop\x12\x19\n" +
	"\apackage\x18\xff\x03 \x01(\bR\apackage\x12\x1d\n" +
	"\tnamespace\x18\x80\x04 \x01(\bR\tnamespace\x12\x17\n" +
	"\x06return\x18\x81\x04 \x01(\bR\x06return\x12\x11\n" +
	"\x03var\x18\x82\x04 \x01(\bR\x03var\x12\x13\n" +
	"\x04void\x18\x83\x04 \x01(\bR\x04void\x12\x15\n" +
	"\x05while\x18\x84\x04 \x01(\bR\x05while\x1a\x1f\n" +
	"\rNestedMessage\x12\x0e\n" +
	"\x02bb\x18\x01 \x01(\x05R\x02bb\x1av\n" +
	"\x17MapInt64NestedTypeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12E\n" +
	"\x05value\x18\x02 \x01(\v2/.cel.expr.conformance.proto2.NestedTestAllTypesR\x05value:\x028\x01\x1a>\n" +
	"\x10MapBoolBoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a@\n" +
	"\x12MapBoolStringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11MapBoolBytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a?\n" +
	"\x11MapBoolInt32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a?\n" +
	"\x11MapBoolInt64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a@\n" +
	"\x12MapBoolUint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a@\n" +
	"\x12MapBoolUint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a?\n" +
	"\x11MapBoolFloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a@\n" +
	"\x12MapBoolDoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1at\n" +
	"\x10MapBoolEnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x05value:\x028\x01\x1az\n" +
	"\x13MapBoolMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x05value:\x028\x01\x1a]\n" +
	"\x14MapBoolDurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x05value:\x028\x01\x1a_\n" +
	"\x15MapBoolTimestampEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05value:\x028\x01\x1a_\n" +
	"\x15MapBoolNullValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.google.protobuf.NullValueR\x05value:\x028\x01\x1aS\n" +
	"\x0fMapBoolAnyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1aY\n" +
	"\x12MapBoolStructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1aW\n" +
	"\x11MapBoolValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1a_\n" +
	"\x15MapBoolListValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01\x1ac\n" +
	"\x18MapBoolInt64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05value:\x028\x01\x1ac\n" +
	"\x18MapBoolInt32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x05value:\x028\x01\x1ae\n" +
	"\x19MapBoolDoubleWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value:\x028\x01\x1ac\n" +
	"\x18MapBoolFloatWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x05value:\x028\x01\x1ae\n" +
	"\x19MapBoolUint64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05value:\x028\x01\x1ae\n" +
	"\x19MapBoolUint32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x05value:\x028\x01\x1ae\n" +
	"\x19MapBoolStringWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1aa\n" +
	"\x17MapBoolBoolWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x05value:\x028\x01\x1ac\n" +
	"\x18MapBoolBytesWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.BytesValueR\x05value:\x028\x01\x1a?\n" +
	"\x11MapInt32BoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt32StringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt32BytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt32Int32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt32Int64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt32Uint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt32Uint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt32FloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt32DoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1au\n" +
	"\x11MapInt32EnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x05value:\x028\x01\x1a{\n" +
	"\x14MapInt32MessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x05value:\x028\x01\x1a^\n" +
	"\x15MapInt32DurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x05value:\x028\x01\x1a`\n" +
	"\x16MapInt32TimestampEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05value:\x028\x01\x1a`\n" +
	"\x16MapInt32NullValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.google.protobuf.NullValueR\x05value:\x028\x01\x1aT\n" +
	"\x10MapInt32AnyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1aZ\n" +
	"\x13MapInt32StructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1aX\n" +
	"\x12MapInt32ValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1a`\n" +
	"\x16MapInt32ListValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt32Int64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt32Int32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt32DoubleWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt32FloatWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt32Uint64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt32Uint32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt32StringWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1ab\n" +
	"\x18MapInt32BoolWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt32BytesWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.BytesValueR\x05value:\x028\x01\x1a?\n" +
	"\x11MapInt64BoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt64StringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt64BytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt64Int32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt64Int64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt64Uint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt64Uint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a@\n" +
	"\x12MapInt64FloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1aA\n" +
	"\x13MapInt64DoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1au\n" +
	"\x11MapInt64EnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x05value:\x028\x01\x1a{\n" +
	"\x14MapInt64MessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x05value:\x028\x01\x1a^\n" +
	"\x15MapInt64DurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x05value:\x028\x01\x1a`\n" +
	"\x16MapInt64TimestampEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05value:\x028\x01\x1a`\n" +
	"\x16MapInt64NullValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.google.protobuf.NullValueR\x05value:\x028\x01\x1aT\n" +
	"\x10MapInt64AnyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1aZ\n" +
	"\x13MapInt64StructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1aX\n" +
	"\x12MapInt64ValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1a`\n" +
	"\x16MapInt64ListValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt64Int64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt64Int32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt64DoubleWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt64FloatWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt64Uint64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt64Uint32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x05value:\x028\x01\x1af\n" +
	"\x1aMapInt64StringWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1ab\n" +
	"\x18MapInt64BoolWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x05value:\x028\x01\x1ad\n" +
	"\x19MapInt64BytesWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.BytesValueR\x05value:\x028\x01\x1a@\n" +
	"\x12MapUint32BoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint32StringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint32BytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint32Int32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint32Int64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint32Uint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint32Uint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint32FloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint32DoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1av\n" +
	"\x12MapUint32EnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x05value:\x028\x01\x1a|\n" +
	"\x15MapUint32MessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x05value:\x028\x01\x1a_\n" +
	"\x16MapUint32DurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x05value:\x028\x01\x1aa\n" +
	"\x17MapUint32TimestampEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05value:\x028\x01\x1aa\n" +
	"\x17MapUint32NullValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.google.protobuf.NullValueR\x05value:\x028\x01\x1aU\n" +
	"\x11MapUint32AnyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1a[\n" +
	"\x14MapUint32StructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1aY\n" +
	"\x13MapUint32ValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1aa\n" +
	"\x17MapUint32ListValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint32Int64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint32Int32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint32DoubleWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint32FloatWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint32Uint64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint32Uint32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint32StringWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1ac\n" +
	"\x19MapUint32BoolWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint32BytesWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.BytesValueR\x05value:\x028\x01\x1a@\n" +
	"\x12MapUint64BoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint64StringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint64BytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint64Int32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint64Int64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint64Uint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint64Uint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1aA\n" +
	"\x13MapUint64FloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1aB\n" +
	"\x14MapUint64DoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1av\n" +
	"\x12MapUint64EnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x05value:\x028\x01\x1a|\n" +
	"\x15MapUint64MessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x05value:\x028\x01\x1a_\n" +
	"\x16MapUint64DurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x05value:\x028\x01\x1aa\n" +
	"\x17MapUint64TimestampEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05value:\x028\x01\x1aa\n" +
	"\x17MapUint64NullValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.google.protobuf.NullValueR\x05value:\x028\x01\x1aU\n" +
	"\x11MapUint64AnyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1a[\n" +
	"\x14MapUint64StructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1aY\n" +
	"\x13MapUint64ValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1aa\n" +
	"\x17MapUint64ListValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint64Int64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint64Int32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint64DoubleWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint64FloatWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint64Uint64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint64Uint32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapUint64StringWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1ac\n" +
	"\x19MapUint64BoolWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapUint64BytesWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.BytesValueR\x05value:\x028\x01\x1a@\n" +
	"\x12MapStringBoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aB\n" +
	"\x14MapStringStringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aA\n" +
	"\x13MapStringBytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aA\n" +
	"\x13MapStringInt32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aA\n" +
	"\x13MapStringInt64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aB\n" +
	"\x14MapStringUint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aB\n" +
	"\x14MapStringUint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1aA\n" +
	"\x13MapStringFloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1aB\n" +
	"\x14MapStringDoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1av\n" +
	"\x12MapStringEnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\x0e24.cel.expr.conformance.proto2.TestAllTypes.NestedEnumR\x05value:\x028\x01\x1a|\n" +
	"\x15MapStringMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12M\n" +
	"\x05value\x18\x02 \x01(\v27.cel.expr.conformance.proto2.TestAllTypes.NestedMessageR\x05value:\x028\x01\x1a_\n" +
	"\x16MapStringDurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x05value:\x028\x01\x1aa\n" +
	"\x17MapStringTimestampEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05value:\x028\x01\x1aa\n" +
	"\x17MapStringNullValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.google.protobuf.NullValueR\x05value:\x028\x01\x1aU\n" +
	"\x11MapStringAnyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1a[\n" +
	"\x14MapStringStructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1aY\n" +
	"\x13MapStringValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1aa\n" +
	"\x17MapStringListValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.ListValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapStringInt64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapStringInt32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapStringDoubleWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapStringFloatWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapStringUint64WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapStringUint32WrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x05value:\x028\x01\x1ag\n" +
	"\x1bMapStringStringWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1ac\n" +
	"\x19MapStringBoolWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x05value:\x028\x01\x1ae\n" +
	"\x1aMapStringBytesWrapperEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.google.protobuf.BytesValueR\x05value:\x028\x01\x1aM\n" +
	"\vNestedGroup\x12\x1c\n" +
	"\tsingle_id\x18\x94\x03 \x01(\x05R\bsingleId\x12 \n" +
	"\vsingle_name\x18\x95\x03 \x01(\tR\n" +
	"singleName\"'\n" +
	"\n" +
	"NestedEnum\x12\a\n" +
	"\x03FOO\x10\x00\x12\a\n" +
	"\x03BAR\x10\x01\x12\a\n" +
	"\x03BAZ\x10\x02*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\r\n" +
	"\vnested_typeB\x06\n" +
	"\x04kind\"\xa0\x01\n" +
	"\x12NestedTestAllTypes\x12E\n" +
	"\x05child\x18\x01 \x01(\v2/.cel.expr.conformance.proto2.NestedTestAllTypesR\x05child\x12C\n" +
	"\apayload\x18\x02 \x01(\v2).cel.expr.conformance.proto2.TestAllTypesR\apayload\"5\n" +
	"\fTestRequired\x12%\n" +
	"\x0erequired_int32\x18\x01 \x02(\x05R\rrequiredInt32*'\n" +
	"\n" +
	"GlobalEnum\x12\a\n" +
	"\x03GOO\x10\x00\x12\a\n" +
	"\x03GAR\x10\x01\x12\a\n" +
	"\x03GAZ\x10\x02BZ\n" +
	"\x1fdev.cel.expr.conformance.proto2B\x11TestAllTypesProtoP\x01Z\x1fcel.dev/expr/conformance/proto2\xf8\x01\x01"

var (
	file_cel_expr_conformance_proto2_test_all_types_proto_rawDescOnce sync.Once
	file_cel_expr_conformance_proto2_test_all_types_proto_rawDescData []byte
)

func file_cel_expr_conformance_proto2_test_all_types_proto_rawDescGZIP() []byte {
	file_cel_expr_conformance_proto2_test_all_types_proto_rawDescOnce.Do(func() {
		file_cel_expr_conformance_proto2_test_all_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cel_expr_conformance_proto2_test_all_types_proto_rawDesc), len(file_cel_expr_conformance_proto2_test_all_types_proto_rawDesc)))
	})
	return file_cel_expr_conformance_proto2_test_all_types_proto_rawDescData
}

var file_cel_expr_conformance_proto2_test_all_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes = make([]protoimpl.MessageInfo, 168)
var file_cel_expr_conformance_proto2_test_all_types_proto_goTypes = []any{
	(GlobalEnum)(0),                    // 0: cel.expr.conformance.proto2.GlobalEnum
	(TestAllTypes_NestedEnum)(0),       // 1: cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	(*TestAllTypes)(nil),               // 2: cel.expr.conformance.proto2.TestAllTypes
	(*NestedTestAllTypes)(nil),         // 3: cel.expr.conformance.proto2.NestedTestAllTypes
	(*TestRequired)(nil),               // 4: cel.expr.conformance.proto2.TestRequired
	(*TestAllTypes_NestedMessage)(nil), // 5: cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	nil,                                // 6: cel.expr.conformance.proto2.TestAllTypes.MapInt64NestedTypeEntry
	nil,                                // 7: cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolEntry
	nil,                                // 8: cel.expr.conformance.proto2.TestAllTypes.MapBoolStringEntry
	nil,                                // 9: cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesEntry
	nil,                                // 10: cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32Entry
	nil,                                // 11: cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64Entry
	nil,                                // 12: cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32Entry
	nil,                                // 13: cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64Entry
	nil,                                // 14: cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatEntry
	nil,                                // 15: cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleEntry
	nil,                                // 16: cel.expr.conformance.proto2.TestAllTypes.MapBoolEnumEntry
	nil,                                // 17: cel.expr.conformance.proto2.TestAllTypes.MapBoolMessageEntry
	nil,                                // 18: cel.expr.conformance.proto2.TestAllTypes.MapBoolDurationEntry
	nil,                                // 19: cel.expr.conformance.proto2.TestAllTypes.MapBoolTimestampEntry
	nil,                                // 20: cel.expr.conformance.proto2.TestAllTypes.MapBoolNullValueEntry
	nil,                                // 21: cel.expr.conformance.proto2.TestAllTypes.MapBoolAnyEntry
	nil,                                // 22: cel.expr.conformance.proto2.TestAllTypes.MapBoolStructEntry
	nil,                                // 23: cel.expr.conformance.proto2.TestAllTypes.MapBoolValueEntry
	nil,                                // 24: cel.expr.conformance.proto2.TestAllTypes.MapBoolListValueEntry
	nil,                                // 25: cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64WrapperEntry
	nil,                                // 26: cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32WrapperEntry
	nil,                                // 27: cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleWrapperEntry
	nil,                                // 28: cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatWrapperEntry
	nil,                                // 29: cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64WrapperEntry
	nil,                                // 30: cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32WrapperEntry
	nil,                                // 31: cel.expr.conformance.proto2.TestAllTypes.MapBoolStringWrapperEntry
	nil,                                // 32: cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolWrapperEntry
	nil,                                // 33: cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesWrapperEntry
	nil,                                // 34: cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolEntry
	nil,                                // 35: cel.expr.conformance.proto2.TestAllTypes.MapInt32StringEntry
	nil,                                // 36: cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesEntry
	nil,                                // 37: cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32Entry
	nil,                                // 38: cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64Entry
	nil,                                // 39: cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32Entry
	nil,                                // 40: cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64Entry
	nil,                                // 41: cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatEntry
	nil,                                // 42: cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleEntry
	nil,                                // 43: cel.expr.conformance.proto2.TestAllTypes.MapInt32EnumEntry
	nil,                                // 44: cel.expr.conformance.proto2.TestAllTypes.MapInt32MessageEntry
	nil,                                // 45: cel.expr.conformance.proto2.TestAllTypes.MapInt32DurationEntry
	nil,                                // 46: cel.expr.conformance.proto2.TestAllTypes.MapInt32TimestampEntry
	nil,                                // 47: cel.expr.conformance.proto2.TestAllTypes.MapInt32NullValueEntry
	nil,                                // 48: cel.expr.conformance.proto2.TestAllTypes.MapInt32AnyEntry
	nil,                                // 49: cel.expr.conformance.proto2.TestAllTypes.MapInt32StructEntry
	nil,                                // 50: cel.expr.conformance.proto2.TestAllTypes.MapInt32ValueEntry
	nil,                                // 51: cel.expr.conformance.proto2.TestAllTypes.MapInt32ListValueEntry
	nil,                                // 52: cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64WrapperEntry
	nil,                                // 53: cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32WrapperEntry
	nil,                                // 54: cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleWrapperEntry
	nil,                                // 55: cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatWrapperEntry
	nil,                                // 56: cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64WrapperEntry
	nil,                                // 57: cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32WrapperEntry
	nil,                                // 58: cel.expr.conformance.proto2.TestAllTypes.MapInt32StringWrapperEntry
	nil,                                // 59: cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolWrapperEntry
	nil,                                // 60: cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesWrapperEntry
	nil,                                // 61: cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolEntry
	nil,                                // 62: cel.expr.conformance.proto2.TestAllTypes.MapInt64StringEntry
	nil,                                // 63: cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesEntry
	nil,                                // 64: cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32Entry
	nil,                                // 65: cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64Entry
	nil,                                // 66: cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32Entry
	nil,                                // 67: cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64Entry
	nil,                                // 68: cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatEntry
	nil,                                // 69: cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleEntry
	nil,                                // 70: cel.expr.conformance.proto2.TestAllTypes.MapInt64EnumEntry
	nil,                                // 71: cel.expr.conformance.proto2.TestAllTypes.MapInt64MessageEntry
	nil,                                // 72: cel.expr.conformance.proto2.TestAllTypes.MapInt64DurationEntry
	nil,                                // 73: cel.expr.conformance.proto2.TestAllTypes.MapInt64TimestampEntry
	nil,                                // 74: cel.expr.conformance.proto2.TestAllTypes.MapInt64NullValueEntry
	nil,                                // 75: cel.expr.conformance.proto2.TestAllTypes.MapInt64AnyEntry
	nil,                                // 76: cel.expr.conformance.proto2.TestAllTypes.MapInt64StructEntry
	nil,                                // 77: cel.expr.conformance.proto2.TestAllTypes.MapInt64ValueEntry
	nil,                                // 78: cel.expr.conformance.proto2.TestAllTypes.MapInt64ListValueEntry
	nil,                                // 79: cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64WrapperEntry
	nil,                                // 80: cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32WrapperEntry
	nil,                                // 81: cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleWrapperEntry
	nil,                                // 82: cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatWrapperEntry
	nil,                                // 83: cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64WrapperEntry
	nil,                                // 84: cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32WrapperEntry
	nil,                                // 85: cel.expr.conformance.proto2.TestAllTypes.MapInt64StringWrapperEntry
	nil,                                // 86: cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolWrapperEntry
	nil,                                // 87: cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesWrapperEntry
	nil,                                // 88: cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolEntry
	nil,                                // 89: cel.expr.conformance.proto2.TestAllTypes.MapUint32StringEntry
	nil,                                // 90: cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesEntry
	nil,                                // 91: cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32Entry
	nil,                                // 92: cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64Entry
	nil,                                // 93: cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32Entry
	nil,                                // 94: cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64Entry
	nil,                                // 95: cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatEntry
	nil,                                // 96: cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleEntry
	nil,                                // 97: cel.expr.conformance.proto2.TestAllTypes.MapUint32EnumEntry
	nil,                                // 98: cel.expr.conformance.proto2.TestAllTypes.MapUint32MessageEntry
	nil,                                // 99: cel.expr.conformance.proto2.TestAllTypes.MapUint32DurationEntry
	nil,                                // 100: cel.expr.conformance.proto2.TestAllTypes.MapUint32TimestampEntry
	nil,                                // 101: cel.expr.conformance.proto2.TestAllTypes.MapUint32NullValueEntry
	nil,                                // 102: cel.expr.conformance.proto2.TestAllTypes.MapUint32AnyEntry
	nil,                                // 103: cel.expr.conformance.proto2.TestAllTypes.MapUint32StructEntry
	nil,                                // 104: cel.expr.conformance.proto2.TestAllTypes.MapUint32ValueEntry
	nil,                                // 105: cel.expr.conformance.proto2.TestAllTypes.MapUint32ListValueEntry
	nil,                                // 106: cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64WrapperEntry
	nil,                                // 107: cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32WrapperEntry
	nil,                                // 108: cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleWrapperEntry
	nil,                                // 109: cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatWrapperEntry
	nil,                                // 110: cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64WrapperEntry
	nil,                                // 111: cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32WrapperEntry
	nil,                                // 112: cel.expr.conformance.proto2.TestAllTypes.MapUint32StringWrapperEntry
	nil,                                // 113: cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolWrapperEntry
	nil,                                // 114: cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesWrapperEntry
	nil,                                // 115: cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolEntry
	nil,                                // 116: cel.expr.conformance.proto2.TestAllTypes.MapUint64StringEntry
	nil,                                // 117: cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesEntry
	nil,                                // 118: cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32Entry
	nil,                                // 119: cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64Entry
	nil,                                // 120: cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32Entry
	nil,                                // 121: cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64Entry
	nil,                                // 122: cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatEntry
	nil,                                // 123: cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleEntry
	nil,                                // 124: cel.expr.conformance.proto2.TestAllTypes.MapUint64EnumEntry
	nil,                                // 125: cel.expr.conformance.proto2.TestAllTypes.MapUint64MessageEntry
	nil,                                // 126: cel.expr.conformance.proto2.TestAllTypes.MapUint64DurationEntry
	nil,                                // 127: cel.expr.conformance.proto2.TestAllTypes.MapUint64TimestampEntry
	nil,                                // 128: cel.expr.conformance.proto2.TestAllTypes.MapUint64NullValueEntry
	nil,                                // 129: cel.expr.conformance.proto2.TestAllTypes.MapUint64AnyEntry
	nil,                                // 130: cel.expr.conformance.proto2.TestAllTypes.MapUint64StructEntry
	nil,                                // 131: cel.expr.conformance.proto2.TestAllTypes.MapUint64ValueEntry
	nil,                                // 132: cel.expr.conformance.proto2.TestAllTypes.MapUint64ListValueEntry
	nil,                                // 133: cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64WrapperEntry
	nil,                                // 134: cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32WrapperEntry
	nil,                                // 135: cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleWrapperEntry
	nil,                                // 136: cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatWrapperEntry
	nil,                                // 137: cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64WrapperEntry
	nil,                                // 138: cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32WrapperEntry
	nil,                                // 139: cel.expr.conformance.proto2.TestAllTypes.MapUint64StringWrapperEntry
	nil,                                // 140: cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolWrapperEntry
	nil,                                // 141: cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesWrapperEntry
	nil,                                // 142: cel.expr.conformance.proto2.TestAllTypes.MapStringBoolEntry
	nil,                                // 143: cel.expr.conformance.proto2.TestAllTypes.MapStringStringEntry
	nil,                                // 144: cel.expr.conformance.proto2.TestAllTypes.MapStringBytesEntry
	nil,                                // 145: cel.expr.conformance.proto2.TestAllTypes.MapStringInt32Entry
	nil,                                // 146: cel.expr.conformance.proto2.TestAllTypes.MapStringInt64Entry
	nil,                                // 147: cel.expr.conformance.proto2.TestAllTypes.MapStringUint32Entry
	nil,                                // 148: cel.expr.conformance.proto2.TestAllTypes.MapStringUint64Entry
	nil,                                // 149: cel.expr.conformance.proto2.TestAllTypes.MapStringFloatEntry
	nil,                                // 150: cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleEntry
	nil,                                // 151: cel.expr.conformance.proto2.TestAllTypes.MapStringEnumEntry
	nil,                                // 152: cel.expr.conformance.proto2.TestAllTypes.MapStringMessageEntry
	nil,                                // 153: cel.expr.conformance.proto2.TestAllTypes.MapStringDurationEntry
	nil,                                // 154: cel.expr.conformance.proto2.TestAllTypes.MapStringTimestampEntry
	nil,                                // 155: cel.expr.conformance.proto2.TestAllTypes.MapStringNullValueEntry
	nil,                                // 156: cel.expr.conformance.proto2.TestAllTypes.MapStringAnyEntry
	nil,                                // 157: cel.expr.conformance.proto2.TestAllTypes.MapStringStructEntry
	nil,                                // 158: cel.expr.conformance.proto2.TestAllTypes.MapStringValueEntry
	nil,                                // 159: cel.expr.conformance.proto2.TestAllTypes.MapStringListValueEntry
	nil,                                // 160: cel.expr.conformance.proto2.TestAllTypes.MapStringInt64WrapperEntry
	nil,                                // 161: cel.expr.conformance.proto2.TestAllTypes.MapStringInt32WrapperEntry
	nil,                                // 162: cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleWrapperEntry
	nil,                                // 163: cel.expr.conformance.proto2.TestAllTypes.MapStringFloatWrapperEntry
	nil,                                // 164: cel.expr.conformance.proto2.TestAllTypes.MapStringUint64WrapperEntry
	nil,                                // 165: cel.expr.conformance.proto2.TestAllTypes.MapStringUint32WrapperEntry
	nil,                                // 166: cel.expr.conformance.proto2.TestAllTypes.MapStringStringWrapperEntry
	nil,                                // 167: cel.expr.conformance.proto2.TestAllTypes.MapStringBoolWrapperEntry
	nil,                                // 168: cel.expr.conformance.proto2.TestAllTypes.MapStringBytesWrapperEntry
	(*TestAllTypes_NestedGroup)(nil),   // 169: cel.expr.conformance.proto2.TestAllTypes.NestedGroup
	(*anypb.Any)(nil),                  // 170: google.protobuf.Any
	(*durationpb.Duration)(nil),        // 171: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),      // 172: google.protobuf.Timestamp
	(*structpb.Struct)(nil),            // 173: google.protobuf.Struct
	(*structpb.Value)(nil),             // 174: google.protobuf.Value
	(*wrapperspb.Int64Value)(nil),      // 175: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),      // 176: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),     // 177: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),      // 178: google.protobuf.FloatValue
	(*wrapperspb.UInt64Value)(nil),     // 179: google.protobuf.UInt64Value
	(*wrapperspb.UInt32Value)(nil),     // 180: google.protobuf.UInt32Value
	(*wrapperspb.StringValue)(nil),     // 181: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),       // 182: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),      // 183: google.protobuf.BytesValue
	(*structpb.ListValue)(nil),         // 184: google.protobuf.ListValue
	(structpb.NullValue)(0),            // 185: google.protobuf.NullValue
	(*fieldmaskpb.FieldMask)(nil),      // 186: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),              // 187: google.protobuf.Empty
}
var file_cel_expr_conformance_proto2_test_all_types_proto_depIdxs = []int32{
	170, // 0: cel.expr.conformance.proto2.TestAllTypes.single_any:type_name -> google.protobuf.Any
	171, // 1: cel.expr.conformance.proto2.TestAllTypes.single_duration:type_name -> google.protobuf.Duration
	172, // 2: cel.expr.conformance.proto2.TestAllTypes.single_timestamp:type_name -> google.protobuf.Timestamp
	173, // 3: cel.expr.conformance.proto2.TestAllTypes.single_struct:type_name -> google.protobuf.Struct
	174, // 4: cel.expr.conformance.proto2.TestAllTypes.single_value:type_name -> google.protobuf.Value
	175, // 5: cel.expr.conformance.proto2.TestAllTypes.single_int64_wrapper:type_name -> google.protobuf.Int64Value
	176, // 6: cel.expr.conformance.proto2.TestAllTypes.single_int32_wrapper:type_name -> google.protobuf.Int32Value
	177, // 7: cel.expr.conformance.proto2.TestAllTypes.single_double_wrapper:type_name -> google.protobuf.DoubleValue
	178, // 8: cel.expr.conformance.proto2.TestAllTypes.single_float_wrapper:type_name -> google.protobuf.FloatValue
	179, // 9: cel.expr.conformance.proto2.TestAllTypes.single_uint64_wrapper:type_name -> google.protobuf.UInt64Value
	180, // 10: cel.expr.conformance.proto2.TestAllTypes.single_uint32_wrapper:type_name -> google.protobuf.UInt32Value
	181, // 11: cel.expr.conformance.proto2.TestAllTypes.single_string_wrapper:type_name -> google.protobuf.StringValue
	182, // 12: cel.expr.conformance.proto2.TestAllTypes.single_bool_wrapper:type_name -> google.protobuf.BoolValue
	183, // 13: cel.expr.conformance.proto2.TestAllTypes.single_bytes_wrapper:type_name -> google.protobuf.BytesValue
	184, // 14: cel.expr.conformance.proto2.TestAllTypes.list_value:type_name -> google.protobuf.ListValue
	185, // 15: cel.expr.conformance.proto2.TestAllTypes.null_value:type_name -> google.protobuf.NullValue
	185, // 16: cel.expr.conformance.proto2.TestAllTypes.optional_null_value:type_name -> google.protobuf.NullValue
	186, // 17: cel.expr.conformance.proto2.TestAllTypes.field_mask:type_name -> google.protobuf.FieldMask
	187, // 18: cel.expr.conformance.proto2.TestAllTypes.empty:type_name -> google.protobuf.Empty
	5,   // 19: cel.expr.conformance.proto2.TestAllTypes.single_nested_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	1,   // 20: cel.expr.conformance.proto2.TestAllTypes.single_nested_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 21: cel.expr.conformance.proto2.TestAllTypes.standalone_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	1,   // 22: cel.expr.conformance.proto2.TestAllTypes.standalone_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 23: cel.expr.conformance.proto2.TestAllTypes.repeated_nested_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	1,   // 24: cel.expr.conformance.proto2.TestAllTypes.repeated_nested_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 25: cel.expr.conformance.proto2.TestAllTypes.repeated_lazy_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	170, // 26: cel.expr.conformance.proto2.TestAllTypes.repeated_any:type_name -> google.protobuf.Any
	171, // 27: cel.expr.conformance.proto2.TestAllTypes.repeated_duration:type_name -> google.protobuf.Duration
	172, // 28: cel.expr.conformance.proto2.TestAllTypes.repeated_timestamp:type_name -> google.protobuf.Timestamp
	173, // 29: cel.expr.conformance.proto2.TestAllTypes.repeated_struct:type_name -> google.protobuf.Struct
	174, // 30: cel.expr.conformance.proto2.TestAllTypes.repeated_value:type_name -> google.protobuf.Value
	175, // 31: cel.expr.conformance.proto2.TestAllTypes.repeated_int64_wrapper:type_name -> google.protobuf.Int64Value
	176, // 32: cel.expr.conformance.proto2.TestAllTypes.repeated_int32_wrapper:type_name -> google.protobuf.Int32Value
	177, // 33: cel.expr.conformance.proto2.TestAllTypes.repeated_double_wrapper:type_name -> google.protobuf.DoubleValue
	178, // 34: cel.expr.conformance.proto2.TestAllTypes.repeated_float_wrapper:type_name -> google.protobuf.FloatValue
	179, // 35: cel.expr.conformance.proto2.TestAllTypes.repeated_uint64_wrapper:type_name -> google.protobuf.UInt64Value
	180, // 36: cel.expr.conformance.proto2.TestAllTypes.repeated_uint32_wrapper:type_name -> google.protobuf.UInt32Value
	181, // 37: cel.expr.conformance.proto2.TestAllTypes.repeated_string_wrapper:type_name -> google.protobuf.StringValue
	182, // 38: cel.expr.conformance.proto2.TestAllTypes.repeated_bool_wrapper:type_name -> google.protobuf.BoolValue
	183, // 39: cel.expr.conformance.proto2.TestAllTypes.repeated_bytes_wrapper:type_name -> google.protobuf.BytesValue
	184, // 40: cel.expr.conformance.proto2.TestAllTypes.repeated_list_value:type_name -> google.protobuf.ListValue
	185, // 41: cel.expr.conformance.proto2.TestAllTypes.repeated_null_value:type_name -> google.protobuf.NullValue
	6,   // 42: cel.expr.conformance.proto2.TestAllTypes.map_int64_nested_type:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64NestedTypeEntry
	7,   // 43: cel.expr.conformance.proto2.TestAllTypes.map_bool_bool:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolEntry
	8,   // 44: cel.expr.conformance.proto2.TestAllTypes.map_bool_string:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolStringEntry
	9,   // 45: cel.expr.conformance.proto2.TestAllTypes.map_bool_bytes:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesEntry
	10,  // 46: cel.expr.conformance.proto2.TestAllTypes.map_bool_int32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32Entry
	11,  // 47: cel.expr.conformance.proto2.TestAllTypes.map_bool_int64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64Entry
	12,  // 48: cel.expr.conformance.proto2.TestAllTypes.map_bool_uint32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32Entry
	13,  // 49: cel.expr.conformance.proto2.TestAllTypes.map_bool_uint64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64Entry
	14,  // 50: cel.expr.conformance.proto2.TestAllTypes.map_bool_float:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatEntry
	15,  // 51: cel.expr.conformance.proto2.TestAllTypes.map_bool_double:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleEntry
	16,  // 52: cel.expr.conformance.proto2.TestAllTypes.map_bool_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolEnumEntry
	17,  // 53: cel.expr.conformance.proto2.TestAllTypes.map_bool_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolMessageEntry
	18,  // 54: cel.expr.conformance.proto2.TestAllTypes.map_bool_duration:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolDurationEntry
	19,  // 55: cel.expr.conformance.proto2.TestAllTypes.map_bool_timestamp:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolTimestampEntry
	20,  // 56: cel.expr.conformance.proto2.TestAllTypes.map_bool_null_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolNullValueEntry
	21,  // 57: cel.expr.conformance.proto2.TestAllTypes.map_bool_any:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolAnyEntry
	22,  // 58: cel.expr.conformance.proto2.TestAllTypes.map_bool_struct:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolStructEntry
	23,  // 59: cel.expr.conformance.proto2.TestAllTypes.map_bool_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolValueEntry
	24,  // 60: cel.expr.conformance.proto2.TestAllTypes.map_bool_list_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolListValueEntry
	25,  // 61: cel.expr.conformance.proto2.TestAllTypes.map_bool_int64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64WrapperEntry
	26,  // 62: cel.expr.conformance.proto2.TestAllTypes.map_bool_int32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32WrapperEntry
	27,  // 63: cel.expr.conformance.proto2.TestAllTypes.map_bool_double_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleWrapperEntry
	28,  // 64: cel.expr.conformance.proto2.TestAllTypes.map_bool_float_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatWrapperEntry
	29,  // 65: cel.expr.conformance.proto2.TestAllTypes.map_bool_uint64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64WrapperEntry
	30,  // 66: cel.expr.conformance.proto2.TestAllTypes.map_bool_uint32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32WrapperEntry
	31,  // 67: cel.expr.conformance.proto2.TestAllTypes.map_bool_string_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolStringWrapperEntry
	32,  // 68: cel.expr.conformance.proto2.TestAllTypes.map_bool_bool_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolWrapperEntry
	33,  // 69: cel.expr.conformance.proto2.TestAllTypes.map_bool_bytes_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesWrapperEntry
	34,  // 70: cel.expr.conformance.proto2.TestAllTypes.map_int32_bool:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolEntry
	35,  // 71: cel.expr.conformance.proto2.TestAllTypes.map_int32_string:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32StringEntry
	36,  // 72: cel.expr.conformance.proto2.TestAllTypes.map_int32_bytes:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesEntry
	37,  // 73: cel.expr.conformance.proto2.TestAllTypes.map_int32_int32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32Entry
	38,  // 74: cel.expr.conformance.proto2.TestAllTypes.map_int32_int64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64Entry
	39,  // 75: cel.expr.conformance.proto2.TestAllTypes.map_int32_uint32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32Entry
	40,  // 76: cel.expr.conformance.proto2.TestAllTypes.map_int32_uint64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64Entry
	41,  // 77: cel.expr.conformance.proto2.TestAllTypes.map_int32_float:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatEntry
	42,  // 78: cel.expr.conformance.proto2.TestAllTypes.map_int32_double:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleEntry
	43,  // 79: cel.expr.conformance.proto2.TestAllTypes.map_int32_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32EnumEntry
	44,  // 80: cel.expr.conformance.proto2.TestAllTypes.map_int32_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32MessageEntry
	45,  // 81: cel.expr.conformance.proto2.TestAllTypes.map_int32_duration:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32DurationEntry
	46,  // 82: cel.expr.conformance.proto2.TestAllTypes.map_int32_timestamp:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32TimestampEntry
	47,  // 83: cel.expr.conformance.proto2.TestAllTypes.map_int32_null_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32NullValueEntry
	48,  // 84: cel.expr.conformance.proto2.TestAllTypes.map_int32_any:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32AnyEntry
	49,  // 85: cel.expr.conformance.proto2.TestAllTypes.map_int32_struct:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32StructEntry
	50,  // 86: cel.expr.conformance.proto2.TestAllTypes.map_int32_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32ValueEntry
	51,  // 87: cel.expr.conformance.proto2.TestAllTypes.map_int32_list_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32ListValueEntry
	52,  // 88: cel.expr.conformance.proto2.TestAllTypes.map_int32_int64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64WrapperEntry
	53,  // 89: cel.expr.conformance.proto2.TestAllTypes.map_int32_int32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32WrapperEntry
	54,  // 90: cel.expr.conformance.proto2.TestAllTypes.map_int32_double_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleWrapperEntry
	55,  // 91: cel.expr.conformance.proto2.TestAllTypes.map_int32_float_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatWrapperEntry
	56,  // 92: cel.expr.conformance.proto2.TestAllTypes.map_int32_uint64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64WrapperEntry
	57,  // 93: cel.expr.conformance.proto2.TestAllTypes.map_int32_uint32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32WrapperEntry
	58,  // 94: cel.expr.conformance.proto2.TestAllTypes.map_int32_string_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32StringWrapperEntry
	59,  // 95: cel.expr.conformance.proto2.TestAllTypes.map_int32_bool_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolWrapperEntry
	60,  // 96: cel.expr.conformance.proto2.TestAllTypes.map_int32_bytes_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesWrapperEntry
	61,  // 97: cel.expr.conformance.proto2.TestAllTypes.map_int64_bool:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolEntry
	62,  // 98: cel.expr.conformance.proto2.TestAllTypes.map_int64_string:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64StringEntry
	63,  // 99: cel.expr.conformance.proto2.TestAllTypes.map_int64_bytes:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesEntry
	64,  // 100: cel.expr.conformance.proto2.TestAllTypes.map_int64_int32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32Entry
	65,  // 101: cel.expr.conformance.proto2.TestAllTypes.map_int64_int64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64Entry
	66,  // 102: cel.expr.conformance.proto2.TestAllTypes.map_int64_uint32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32Entry
	67,  // 103: cel.expr.conformance.proto2.TestAllTypes.map_int64_uint64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64Entry
	68,  // 104: cel.expr.conformance.proto2.TestAllTypes.map_int64_float:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatEntry
	69,  // 105: cel.expr.conformance.proto2.TestAllTypes.map_int64_double:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleEntry
	70,  // 106: cel.expr.conformance.proto2.TestAllTypes.map_int64_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64EnumEntry
	71,  // 107: cel.expr.conformance.proto2.TestAllTypes.map_int64_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64MessageEntry
	72,  // 108: cel.expr.conformance.proto2.TestAllTypes.map_int64_duration:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64DurationEntry
	73,  // 109: cel.expr.conformance.proto2.TestAllTypes.map_int64_timestamp:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64TimestampEntry
	74,  // 110: cel.expr.conformance.proto2.TestAllTypes.map_int64_null_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64NullValueEntry
	75,  // 111: cel.expr.conformance.proto2.TestAllTypes.map_int64_any:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64AnyEntry
	76,  // 112: cel.expr.conformance.proto2.TestAllTypes.map_int64_struct:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64StructEntry
	77,  // 113: cel.expr.conformance.proto2.TestAllTypes.map_int64_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64ValueEntry
	78,  // 114: cel.expr.conformance.proto2.TestAllTypes.map_int64_list_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64ListValueEntry
	79,  // 115: cel.expr.conformance.proto2.TestAllTypes.map_int64_int64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64WrapperEntry
	80,  // 116: cel.expr.conformance.proto2.TestAllTypes.map_int64_int32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32WrapperEntry
	81,  // 117: cel.expr.conformance.proto2.TestAllTypes.map_int64_double_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleWrapperEntry
	82,  // 118: cel.expr.conformance.proto2.TestAllTypes.map_int64_float_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatWrapperEntry
	83,  // 119: cel.expr.conformance.proto2.TestAllTypes.map_int64_uint64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64WrapperEntry
	84,  // 120: cel.expr.conformance.proto2.TestAllTypes.map_int64_uint32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32WrapperEntry
	85,  // 121: cel.expr.conformance.proto2.TestAllTypes.map_int64_string_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64StringWrapperEntry
	86,  // 122: cel.expr.conformance.proto2.TestAllTypes.map_int64_bool_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolWrapperEntry
	87,  // 123: cel.expr.conformance.proto2.TestAllTypes.map_int64_bytes_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesWrapperEntry
	88,  // 124: cel.expr.conformance.proto2.TestAllTypes.map_uint32_bool:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolEntry
	89,  // 125: cel.expr.conformance.proto2.TestAllTypes.map_uint32_string:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32StringEntry
	90,  // 126: cel.expr.conformance.proto2.TestAllTypes.map_uint32_bytes:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesEntry
	91,  // 127: cel.expr.conformance.proto2.TestAllTypes.map_uint32_int32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32Entry
	92,  // 128: cel.expr.conformance.proto2.TestAllTypes.map_uint32_int64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64Entry
	93,  // 129: cel.expr.conformance.proto2.TestAllTypes.map_uint32_uint32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32Entry
	94,  // 130: cel.expr.conformance.proto2.TestAllTypes.map_uint32_uint64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64Entry
	95,  // 131: cel.expr.conformance.proto2.TestAllTypes.map_uint32_float:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatEntry
	96,  // 132: cel.expr.conformance.proto2.TestAllTypes.map_uint32_double:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleEntry
	97,  // 133: cel.expr.conformance.proto2.TestAllTypes.map_uint32_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32EnumEntry
	98,  // 134: cel.expr.conformance.proto2.TestAllTypes.map_uint32_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32MessageEntry
	99,  // 135: cel.expr.conformance.proto2.TestAllTypes.map_uint32_duration:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32DurationEntry
	100, // 136: cel.expr.conformance.proto2.TestAllTypes.map_uint32_timestamp:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32TimestampEntry
	101, // 137: cel.expr.conformance.proto2.TestAllTypes.map_uint32_null_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32NullValueEntry
	102, // 138: cel.expr.conformance.proto2.TestAllTypes.map_uint32_any:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32AnyEntry
	103, // 139: cel.expr.conformance.proto2.TestAllTypes.map_uint32_struct:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32StructEntry
	104, // 140: cel.expr.conformance.proto2.TestAllTypes.map_uint32_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32ValueEntry
	105, // 141: cel.expr.conformance.proto2.TestAllTypes.map_uint32_list_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32ListValueEntry
	106, // 142: cel.expr.conformance.proto2.TestAllTypes.map_uint32_int64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64WrapperEntry
	107, // 143: cel.expr.conformance.proto2.TestAllTypes.map_uint32_int32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32WrapperEntry
	108, // 144: cel.expr.conformance.proto2.TestAllTypes.map_uint32_double_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleWrapperEntry
	109, // 145: cel.expr.conformance.proto2.TestAllTypes.map_uint32_float_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatWrapperEntry
	110, // 146: cel.expr.conformance.proto2.TestAllTypes.map_uint32_uint64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64WrapperEntry
	111, // 147: cel.expr.conformance.proto2.TestAllTypes.map_uint32_uint32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32WrapperEntry
	112, // 148: cel.expr.conformance.proto2.TestAllTypes.map_uint32_string_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32StringWrapperEntry
	113, // 149: cel.expr.conformance.proto2.TestAllTypes.map_uint32_bool_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolWrapperEntry
	114, // 150: cel.expr.conformance.proto2.TestAllTypes.map_uint32_bytes_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesWrapperEntry
	115, // 151: cel.expr.conformance.proto2.TestAllTypes.map_uint64_bool:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolEntry
	116, // 152: cel.expr.conformance.proto2.TestAllTypes.map_uint64_string:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64StringEntry
	117, // 153: cel.expr.conformance.proto2.TestAllTypes.map_uint64_bytes:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesEntry
	118, // 154: cel.expr.conformance.proto2.TestAllTypes.map_uint64_int32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32Entry
	119, // 155: cel.expr.conformance.proto2.TestAllTypes.map_uint64_int64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64Entry
	120, // 156: cel.expr.conformance.proto2.TestAllTypes.map_uint64_uint32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32Entry
	121, // 157: cel.expr.conformance.proto2.TestAllTypes.map_uint64_uint64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64Entry
	122, // 158: cel.expr.conformance.proto2.TestAllTypes.map_uint64_float:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatEntry
	123, // 159: cel.expr.conformance.proto2.TestAllTypes.map_uint64_double:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleEntry
	124, // 160: cel.expr.conformance.proto2.TestAllTypes.map_uint64_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64EnumEntry
	125, // 161: cel.expr.conformance.proto2.TestAllTypes.map_uint64_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64MessageEntry
	126, // 162: cel.expr.conformance.proto2.TestAllTypes.map_uint64_duration:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64DurationEntry
	127, // 163: cel.expr.conformance.proto2.TestAllTypes.map_uint64_timestamp:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64TimestampEntry
	128, // 164: cel.expr.conformance.proto2.TestAllTypes.map_uint64_null_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64NullValueEntry
	129, // 165: cel.expr.conformance.proto2.TestAllTypes.map_uint64_any:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64AnyEntry
	130, // 166: cel.expr.conformance.proto2.TestAllTypes.map_uint64_struct:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64StructEntry
	131, // 167: cel.expr.conformance.proto2.TestAllTypes.map_uint64_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64ValueEntry
	132, // 168: cel.expr.conformance.proto2.TestAllTypes.map_uint64_list_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64ListValueEntry
	133, // 169: cel.expr.conformance.proto2.TestAllTypes.map_uint64_int64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64WrapperEntry
	134, // 170: cel.expr.conformance.proto2.TestAllTypes.map_uint64_int32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32WrapperEntry
	135, // 171: cel.expr.conformance.proto2.TestAllTypes.map_uint64_double_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleWrapperEntry
	136, // 172: cel.expr.conformance.proto2.TestAllTypes.map_uint64_float_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatWrapperEntry
	137, // 173: cel.expr.conformance.proto2.TestAllTypes.map_uint64_uint64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64WrapperEntry
	138, // 174: cel.expr.conformance.proto2.TestAllTypes.map_uint64_uint32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32WrapperEntry
	139, // 175: cel.expr.conformance.proto2.TestAllTypes.map_uint64_string_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64StringWrapperEntry
	140, // 176: cel.expr.conformance.proto2.TestAllTypes.map_uint64_bool_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolWrapperEntry
	141, // 177: cel.expr.conformance.proto2.TestAllTypes.map_uint64_bytes_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesWrapperEntry
	142, // 178: cel.expr.conformance.proto2.TestAllTypes.map_string_bool:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringBoolEntry
	143, // 179: cel.expr.conformance.proto2.TestAllTypes.map_string_string:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringStringEntry
	144, // 180: cel.expr.conformance.proto2.TestAllTypes.map_string_bytes:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringBytesEntry
	145, // 181: cel.expr.conformance.proto2.TestAllTypes.map_string_int32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringInt32Entry
	146, // 182: cel.expr.conformance.proto2.TestAllTypes.map_string_int64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringInt64Entry
	147, // 183: cel.expr.conformance.proto2.TestAllTypes.map_string_uint32:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringUint32Entry
	148, // 184: cel.expr.conformance.proto2.TestAllTypes.map_string_uint64:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringUint64Entry
	149, // 185: cel.expr.conformance.proto2.TestAllTypes.map_string_float:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringFloatEntry
	150, // 186: cel.expr.conformance.proto2.TestAllTypes.map_string_double:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleEntry
	151, // 187: cel.expr.conformance.proto2.TestAllTypes.map_string_enum:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringEnumEntry
	152, // 188: cel.expr.conformance.proto2.TestAllTypes.map_string_message:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringMessageEntry
	153, // 189: cel.expr.conformance.proto2.TestAllTypes.map_string_duration:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringDurationEntry
	154, // 190: cel.expr.conformance.proto2.TestAllTypes.map_string_timestamp:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringTimestampEntry
	155, // 191: cel.expr.conformance.proto2.TestAllTypes.map_string_null_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringNullValueEntry
	156, // 192: cel.expr.conformance.proto2.TestAllTypes.map_string_any:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringAnyEntry
	157, // 193: cel.expr.conformance.proto2.TestAllTypes.map_string_struct:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringStructEntry
	158, // 194: cel.expr.conformance.proto2.TestAllTypes.map_string_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringValueEntry
	159, // 195: cel.expr.conformance.proto2.TestAllTypes.map_string_list_value:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringListValueEntry
	160, // 196: cel.expr.conformance.proto2.TestAllTypes.map_string_int64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringInt64WrapperEntry
	161, // 197: cel.expr.conformance.proto2.TestAllTypes.map_string_int32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringInt32WrapperEntry
	162, // 198: cel.expr.conformance.proto2.TestAllTypes.map_string_double_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleWrapperEntry
	163, // 199: cel.expr.conformance.proto2.TestAllTypes.map_string_float_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringFloatWrapperEntry
	164, // 200: cel.expr.conformance.proto2.TestAllTypes.map_string_uint64_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringUint64WrapperEntry
	165, // 201: cel.expr.conformance.proto2.TestAllTypes.map_string_uint32_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringUint32WrapperEntry
	166, // 202: cel.expr.conformance.proto2.TestAllTypes.map_string_string_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringStringWrapperEntry
	167, // 203: cel.expr.conformance.proto2.TestAllTypes.map_string_bool_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringBoolWrapperEntry
	168, // 204: cel.expr.conformance.proto2.TestAllTypes.map_string_bytes_wrapper:type_name -> cel.expr.conformance.proto2.TestAllTypes.MapStringBytesWrapperEntry
	3,   // 205: cel.expr.conformance.proto2.TestAllTypes.oneof_type:type_name -> cel.expr.conformance.proto2.NestedTestAllTypes
	5,   // 206: cel.expr.conformance.proto2.TestAllTypes.oneof_msg:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	169, // 207: cel.expr.conformance.proto2.TestAllTypes.nestedgroup:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedGroup
	3,   // 208: cel.expr.conformance.proto2.NestedTestAllTypes.child:type_name -> cel.expr.conformance.proto2.NestedTestAllTypes
	2,   // 209: cel.expr.conformance.proto2.NestedTestAllTypes.payload:type_name -> cel.expr.conformance.proto2.TestAllTypes
	3,   // 210: cel.expr.conformance.proto2.TestAllTypes.MapInt64NestedTypeEntry.value:type_name -> cel.expr.conformance.proto2.NestedTestAllTypes
	1,   // 211: cel.expr.conformance.proto2.TestAllTypes.MapBoolEnumEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 212: cel.expr.conformance.proto2.TestAllTypes.MapBoolMessageEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	171, // 213: cel.expr.conformance.proto2.TestAllTypes.MapBoolDurationEntry.value:type_name -> google.protobuf.Duration
	172, // 214: cel.expr.conformance.proto2.TestAllTypes.MapBoolTimestampEntry.value:type_name -> google.protobuf.Timestamp
	185, // 215: cel.expr.conformance.proto2.TestAllTypes.MapBoolNullValueEntry.value:type_name -> google.protobuf.NullValue
	170, // 216: cel.expr.conformance.proto2.TestAllTypes.MapBoolAnyEntry.value:type_name -> google.protobuf.Any
	173, // 217: cel.expr.conformance.proto2.TestAllTypes.MapBoolStructEntry.value:type_name -> google.protobuf.Struct
	174, // 218: cel.expr.conformance.proto2.TestAllTypes.MapBoolValueEntry.value:type_name -> google.protobuf.Value
	184, // 219: cel.expr.conformance.proto2.TestAllTypes.MapBoolListValueEntry.value:type_name -> google.protobuf.ListValue
	175, // 220: cel.expr.conformance.proto2.TestAllTypes.MapBoolInt64WrapperEntry.value:type_name -> google.protobuf.Int64Value
	176, // 221: cel.expr.conformance.proto2.TestAllTypes.MapBoolInt32WrapperEntry.value:type_name -> google.protobuf.Int32Value
	177, // 222: cel.expr.conformance.proto2.TestAllTypes.MapBoolDoubleWrapperEntry.value:type_name -> google.protobuf.DoubleValue
	178, // 223: cel.expr.conformance.proto2.TestAllTypes.MapBoolFloatWrapperEntry.value:type_name -> google.protobuf.FloatValue
	179, // 224: cel.expr.conformance.proto2.TestAllTypes.MapBoolUint64WrapperEntry.value:type_name -> google.protobuf.UInt64Value
	180, // 225: cel.expr.conformance.proto2.TestAllTypes.MapBoolUint32WrapperEntry.value:type_name -> google.protobuf.UInt32Value
	181, // 226: cel.expr.conformance.proto2.TestAllTypes.MapBoolStringWrapperEntry.value:type_name -> google.protobuf.StringValue
	182, // 227: cel.expr.conformance.proto2.TestAllTypes.MapBoolBoolWrapperEntry.value:type_name -> google.protobuf.BoolValue
	183, // 228: cel.expr.conformance.proto2.TestAllTypes.MapBoolBytesWrapperEntry.value:type_name -> google.protobuf.BytesValue
	1,   // 229: cel.expr.conformance.proto2.TestAllTypes.MapInt32EnumEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 230: cel.expr.conformance.proto2.TestAllTypes.MapInt32MessageEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	171, // 231: cel.expr.conformance.proto2.TestAllTypes.MapInt32DurationEntry.value:type_name -> google.protobuf.Duration
	172, // 232: cel.expr.conformance.proto2.TestAllTypes.MapInt32TimestampEntry.value:type_name -> google.protobuf.Timestamp
	185, // 233: cel.expr.conformance.proto2.TestAllTypes.MapInt32NullValueEntry.value:type_name -> google.protobuf.NullValue
	170, // 234: cel.expr.conformance.proto2.TestAllTypes.MapInt32AnyEntry.value:type_name -> google.protobuf.Any
	173, // 235: cel.expr.conformance.proto2.TestAllTypes.MapInt32StructEntry.value:type_name -> google.protobuf.Struct
	174, // 236: cel.expr.conformance.proto2.TestAllTypes.MapInt32ValueEntry.value:type_name -> google.protobuf.Value
	184, // 237: cel.expr.conformance.proto2.TestAllTypes.MapInt32ListValueEntry.value:type_name -> google.protobuf.ListValue
	175, // 238: cel.expr.conformance.proto2.TestAllTypes.MapInt32Int64WrapperEntry.value:type_name -> google.protobuf.Int64Value
	176, // 239: cel.expr.conformance.proto2.TestAllTypes.MapInt32Int32WrapperEntry.value:type_name -> google.protobuf.Int32Value
	177, // 240: cel.expr.conformance.proto2.TestAllTypes.MapInt32DoubleWrapperEntry.value:type_name -> google.protobuf.DoubleValue
	178, // 241: cel.expr.conformance.proto2.TestAllTypes.MapInt32FloatWrapperEntry.value:type_name -> google.protobuf.FloatValue
	179, // 242: cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint64WrapperEntry.value:type_name -> google.protobuf.UInt64Value
	180, // 243: cel.expr.conformance.proto2.TestAllTypes.MapInt32Uint32WrapperEntry.value:type_name -> google.protobuf.UInt32Value
	181, // 244: cel.expr.conformance.proto2.TestAllTypes.MapInt32StringWrapperEntry.value:type_name -> google.protobuf.StringValue
	182, // 245: cel.expr.conformance.proto2.TestAllTypes.MapInt32BoolWrapperEntry.value:type_name -> google.protobuf.BoolValue
	183, // 246: cel.expr.conformance.proto2.TestAllTypes.MapInt32BytesWrapperEntry.value:type_name -> google.protobuf.BytesValue
	1,   // 247: cel.expr.conformance.proto2.TestAllTypes.MapInt64EnumEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 248: cel.expr.conformance.proto2.TestAllTypes.MapInt64MessageEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	171, // 249: cel.expr.conformance.proto2.TestAllTypes.MapInt64DurationEntry.value:type_name -> google.protobuf.Duration
	172, // 250: cel.expr.conformance.proto2.TestAllTypes.MapInt64TimestampEntry.value:type_name -> google.protobuf.Timestamp
	185, // 251: cel.expr.conformance.proto2.TestAllTypes.MapInt64NullValueEntry.value:type_name -> google.protobuf.NullValue
	170, // 252: cel.expr.conformance.proto2.TestAllTypes.MapInt64AnyEntry.value:type_name -> google.protobuf.Any
	173, // 253: cel.expr.conformance.proto2.TestAllTypes.MapInt64StructEntry.value:type_name -> google.protobuf.Struct
	174, // 254: cel.expr.conformance.proto2.TestAllTypes.MapInt64ValueEntry.value:type_name -> google.protobuf.Value
	184, // 255: cel.expr.conformance.proto2.TestAllTypes.MapInt64ListValueEntry.value:type_name -> google.protobuf.ListValue
	175, // 256: cel.expr.conformance.proto2.TestAllTypes.MapInt64Int64WrapperEntry.value:type_name -> google.protobuf.Int64Value
	176, // 257: cel.expr.conformance.proto2.TestAllTypes.MapInt64Int32WrapperEntry.value:type_name -> google.protobuf.Int32Value
	177, // 258: cel.expr.conformance.proto2.TestAllTypes.MapInt64DoubleWrapperEntry.value:type_name -> google.protobuf.DoubleValue
	178, // 259: cel.expr.conformance.proto2.TestAllTypes.MapInt64FloatWrapperEntry.value:type_name -> google.protobuf.FloatValue
	179, // 260: cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint64WrapperEntry.value:type_name -> google.protobuf.UInt64Value
	180, // 261: cel.expr.conformance.proto2.TestAllTypes.MapInt64Uint32WrapperEntry.value:type_name -> google.protobuf.UInt32Value
	181, // 262: cel.expr.conformance.proto2.TestAllTypes.MapInt64StringWrapperEntry.value:type_name -> google.protobuf.StringValue
	182, // 263: cel.expr.conformance.proto2.TestAllTypes.MapInt64BoolWrapperEntry.value:type_name -> google.protobuf.BoolValue
	183, // 264: cel.expr.conformance.proto2.TestAllTypes.MapInt64BytesWrapperEntry.value:type_name -> google.protobuf.BytesValue
	1,   // 265: cel.expr.conformance.proto2.TestAllTypes.MapUint32EnumEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 266: cel.expr.conformance.proto2.TestAllTypes.MapUint32MessageEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	171, // 267: cel.expr.conformance.proto2.TestAllTypes.MapUint32DurationEntry.value:type_name -> google.protobuf.Duration
	172, // 268: cel.expr.conformance.proto2.TestAllTypes.MapUint32TimestampEntry.value:type_name -> google.protobuf.Timestamp
	185, // 269: cel.expr.conformance.proto2.TestAllTypes.MapUint32NullValueEntry.value:type_name -> google.protobuf.NullValue
	170, // 270: cel.expr.conformance.proto2.TestAllTypes.MapUint32AnyEntry.value:type_name -> google.protobuf.Any
	173, // 271: cel.expr.conformance.proto2.TestAllTypes.MapUint32StructEntry.value:type_name -> google.protobuf.Struct
	174, // 272: cel.expr.conformance.proto2.TestAllTypes.MapUint32ValueEntry.value:type_name -> google.protobuf.Value
	184, // 273: cel.expr.conformance.proto2.TestAllTypes.MapUint32ListValueEntry.value:type_name -> google.protobuf.ListValue
	175, // 274: cel.expr.conformance.proto2.TestAllTypes.MapUint32Int64WrapperEntry.value:type_name -> google.protobuf.Int64Value
	176, // 275: cel.expr.conformance.proto2.TestAllTypes.MapUint32Int32WrapperEntry.value:type_name -> google.protobuf.Int32Value
	177, // 276: cel.expr.conformance.proto2.TestAllTypes.MapUint32DoubleWrapperEntry.value:type_name -> google.protobuf.DoubleValue
	178, // 277: cel.expr.conformance.proto2.TestAllTypes.MapUint32FloatWrapperEntry.value:type_name -> google.protobuf.FloatValue
	179, // 278: cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint64WrapperEntry.value:type_name -> google.protobuf.UInt64Value
	180, // 279: cel.expr.conformance.proto2.TestAllTypes.MapUint32Uint32WrapperEntry.value:type_name -> google.protobuf.UInt32Value
	181, // 280: cel.expr.conformance.proto2.TestAllTypes.MapUint32StringWrapperEntry.value:type_name -> google.protobuf.StringValue
	182, // 281: cel.expr.conformance.proto2.TestAllTypes.MapUint32BoolWrapperEntry.value:type_name -> google.protobuf.BoolValue
	183, // 282: cel.expr.conformance.proto2.TestAllTypes.MapUint32BytesWrapperEntry.value:type_name -> google.protobuf.BytesValue
	1,   // 283: cel.expr.conformance.proto2.TestAllTypes.MapUint64EnumEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 284: cel.expr.conformance.proto2.TestAllTypes.MapUint64MessageEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	171, // 285: cel.expr.conformance.proto2.TestAllTypes.MapUint64DurationEntry.value:type_name -> google.protobuf.Duration
	172, // 286: cel.expr.conformance.proto2.TestAllTypes.MapUint64TimestampEntry.value:type_name -> google.protobuf.Timestamp
	185, // 287: cel.expr.conformance.proto2.TestAllTypes.MapUint64NullValueEntry.value:type_name -> google.protobuf.NullValue
	170, // 288: cel.expr.conformance.proto2.TestAllTypes.MapUint64AnyEntry.value:type_name -> google.protobuf.Any
	173, // 289: cel.expr.conformance.proto2.TestAllTypes.MapUint64StructEntry.value:type_name -> google.protobuf.Struct
	174, // 290: cel.expr.conformance.proto2.TestAllTypes.MapUint64ValueEntry.value:type_name -> google.protobuf.Value
	184, // 291: cel.expr.conformance.proto2.TestAllTypes.MapUint64ListValueEntry.value:type_name -> google.protobuf.ListValue
	175, // 292: cel.expr.conformance.proto2.TestAllTypes.MapUint64Int64WrapperEntry.value:type_name -> google.protobuf.Int64Value
	176, // 293: cel.expr.conformance.proto2.TestAllTypes.MapUint64Int32WrapperEntry.value:type_name -> google.protobuf.Int32Value
	177, // 294: cel.expr.conformance.proto2.TestAllTypes.MapUint64DoubleWrapperEntry.value:type_name -> google.protobuf.DoubleValue
	178, // 295: cel.expr.conformance.proto2.TestAllTypes.MapUint64FloatWrapperEntry.value:type_name -> google.protobuf.FloatValue
	179, // 296: cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint64WrapperEntry.value:type_name -> google.protobuf.UInt64Value
	180, // 297: cel.expr.conformance.proto2.TestAllTypes.MapUint64Uint32WrapperEntry.value:type_name -> google.protobuf.UInt32Value
	181, // 298: cel.expr.conformance.proto2.TestAllTypes.MapUint64StringWrapperEntry.value:type_name -> google.protobuf.StringValue
	182, // 299: cel.expr.conformance.proto2.TestAllTypes.MapUint64BoolWrapperEntry.value:type_name -> google.protobuf.BoolValue
	183, // 300: cel.expr.conformance.proto2.TestAllTypes.MapUint64BytesWrapperEntry.value:type_name -> google.protobuf.BytesValue
	1,   // 301: cel.expr.conformance.proto2.TestAllTypes.MapStringEnumEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedEnum
	5,   // 302: cel.expr.conformance.proto2.TestAllTypes.MapStringMessageEntry.value:type_name -> cel.expr.conformance.proto2.TestAllTypes.NestedMessage
	171, // 303: cel.expr.conformance.proto2.TestAllTypes.MapStringDurationEntry.value:type_name -> google.protobuf.Duration
	172, // 304: cel.expr.conformance.proto2.TestAllTypes.MapStringTimestampEntry.value:type_name -> google.protobuf.Timestamp
	185, // 305: cel.expr.conformance.proto2.TestAllTypes.MapStringNullValueEntry.value:type_name -> google.protobuf.NullValue
	170, // 306: cel.expr.conformance.proto2.TestAllTypes.MapStringAnyEntry.value:type_name -> google.protobuf.Any
	173, // 307: cel.expr.conformance.proto2.TestAllTypes.MapStringStructEntry.value:type_name -> google.protobuf.Struct
	174, // 308: cel.expr.conformance.proto2.TestAllTypes.MapStringValueEntry.value:type_name -> google.protobuf.Value
	184, // 309: cel.expr.conformance.proto2.TestAllTypes.MapStringListValueEntry.value:type_name -> google.protobuf.ListValue
	175, // 310: cel.expr.conformance.proto2.TestAllTypes.MapStringInt64WrapperEntry.value:type_name -> google.protobuf.Int64Value
	176, // 311: cel.expr.conformance.proto2.TestAllTypes.MapStringInt32WrapperEntry.value:type_name -> google.protobuf.Int32Value
	177, // 312: cel.expr.conformance.proto2.TestAllTypes.MapStringDoubleWrapperEntry.value:type_name -> google.protobuf.DoubleValue
	178, // 313: cel.expr.conformance.proto2.TestAllTypes.MapStringFloatWrapperEntry.value:type_name -> google.protobuf.FloatValue
	179, // 314: cel.expr.conformance.proto2.TestAllTypes.MapStringUint64WrapperEntry.value:type_name -> google.protobuf.UInt64Value
	180, // 315: cel.expr.conformance.proto2.TestAllTypes.MapStringUint32WrapperEntry.value:type_name -> google.protobuf.UInt32Value
	181, // 316: cel.expr.conformance.proto2.TestAllTypes.MapStringStringWrapperEntry.value:type_name -> google.protobuf.StringValue
	182, // 317: cel.expr.conformance.proto2.TestAllTypes.MapStringBoolWrapperEntry.value:type_name -> google.protobuf.BoolValue
	183, // 318: cel.expr.conformance.proto2.TestAllTypes.MapStringBytesWrapperEntry.value:type_name -> google.protobuf.BytesValue
	319, // [319:319] is the sub-list for method output_type
	319, // [319:319] is the sub-list for method input_type
	319, // [319:319] is the sub-list for extension type_name
	319, // [319:319] is the sub-list for extension extendee
	0,   // [0:319] is the sub-list for field type_name
}

func init() { file_cel_expr_conformance_proto2_test_all_types_proto_init() }
func file_cel_expr_conformance_proto2_test_all_types_proto_init() {
	if File_cel_expr_conformance_proto2_test_all_types_proto != nil {
		return
	}
	file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes[0].OneofWrappers = []any{
		(*TestAllTypes_SingleNestedMessage)(nil),
		(*TestAllTypes_SingleNestedEnum)(nil),
		(*TestAllTypes_OneofType)(nil),
		(*TestAllTypes_OneofMsg)(nil),
		(*TestAllTypes_OneofBool)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cel_expr_conformance_proto2_test_all_types_proto_rawDesc), len(file_cel_expr_conformance_proto2_test_all_types_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   168,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cel_expr_conformance_proto2_test_all_types_proto_goTypes,
		DependencyIndexes: file_cel_expr_conformance_proto2_test_all_types_proto_depIdxs,
		EnumInfos:         file_cel_expr_conformance_proto2_test_all_types_proto_enumTypes,
		MessageInfos:      file_cel_expr_conformance_proto2_test_all_types_proto_msgTypes,
	}.Build()
	File_cel_expr_conformance_proto2_test_all_types_proto = out.File
	file_cel_expr_conformance_proto2_test_all_types_proto_goTypes = nil
	file_cel_expr_conformance_proto2_test_all_types_proto_depIdxs = nil
}
