// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.0
// source: cel/expr/conformance/test/suite.proto

package test

import (
	expr "cel.dev/expr"
	conformance "cel.dev/expr/conformance"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Sections    []*TestSection `protobuf:"bytes,3,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *TestSuite) Reset() {
	*x = TestSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuite) ProtoMessage() {}

func (x *TestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuite.ProtoReflect.Descriptor instead.
func (*TestSuite) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_suite_proto_rawDescGZIP(), []int{0}
}

func (x *TestSuite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSuite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestSuite) GetSections() []*TestSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

type TestSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tests       []*TestCase `protobuf:"bytes,3,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *TestSection) Reset() {
	*x = TestSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSection) ProtoMessage() {}

func (x *TestSection) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSection.ProtoReflect.Descriptor instead.
func (*TestSection) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_suite_proto_rawDescGZIP(), []int{1}
}

func (x *TestSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestSection) GetTests() []*TestCase {
	if x != nil {
		return x.Tests
	}
	return nil
}

type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Expr        string                   `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	Env         *conformance.Environment `protobuf:"bytes,4,opt,name=env,proto3" json:"env,omitempty"`
	// Types that are assignable to InputKind:
	//
	//	*TestCase_Bindings
	//	*TestCase_ContextMessage
	//	*TestCase_ContextExpr
	InputKind isTestCase_InputKind `protobuf_oneof:"input_kind"`
	// Types that are assignable to ResultKind:
	//
	//	*TestCase_ResultValue
	//	*TestCase_ResultExpr
	//	*TestCase_EvalError
	//	*TestCase_Unknown
	ResultKind   isTestCase_ResultKind `protobuf_oneof:"result_kind"`
	DeducedType  *expr.Type            `protobuf:"bytes,12,opt,name=deduced_type,json=deducedType,proto3" json:"deduced_type,omitempty"`
	DisableCheck bool                  `protobuf:"varint,13,opt,name=disable_check,json=disableCheck,proto3" json:"disable_check,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_suite_proto_rawDescGZIP(), []int{2}
}

func (x *TestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestCase) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *TestCase) GetEnv() *conformance.Environment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (m *TestCase) GetInputKind() isTestCase_InputKind {
	if m != nil {
		return m.InputKind
	}
	return nil
}

func (x *TestCase) GetBindings() *Bindings {
	if x, ok := x.GetInputKind().(*TestCase_Bindings); ok {
		return x.Bindings
	}
	return nil
}

func (x *TestCase) GetContextMessage() *anypb.Any {
	if x, ok := x.GetInputKind().(*TestCase_ContextMessage); ok {
		return x.ContextMessage
	}
	return nil
}

func (x *TestCase) GetContextExpr() string {
	if x, ok := x.GetInputKind().(*TestCase_ContextExpr); ok {
		return x.ContextExpr
	}
	return ""
}

func (m *TestCase) GetResultKind() isTestCase_ResultKind {
	if m != nil {
		return m.ResultKind
	}
	return nil
}

func (x *TestCase) GetResultValue() *expr.Value {
	if x, ok := x.GetResultKind().(*TestCase_ResultValue); ok {
		return x.ResultValue
	}
	return nil
}

func (x *TestCase) GetResultExpr() string {
	if x, ok := x.GetResultKind().(*TestCase_ResultExpr); ok {
		return x.ResultExpr
	}
	return ""
}

func (x *TestCase) GetEvalError() *expr.ErrorSet {
	if x, ok := x.GetResultKind().(*TestCase_EvalError); ok {
		return x.EvalError
	}
	return nil
}

func (x *TestCase) GetUnknown() *expr.UnknownSet {
	if x, ok := x.GetResultKind().(*TestCase_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *TestCase) GetDeducedType() *expr.Type {
	if x != nil {
		return x.DeducedType
	}
	return nil
}

func (x *TestCase) GetDisableCheck() bool {
	if x != nil {
		return x.DisableCheck
	}
	return false
}

type isTestCase_InputKind interface {
	isTestCase_InputKind()
}

type TestCase_Bindings struct {
	Bindings *Bindings `protobuf:"bytes,5,opt,name=bindings,proto3,oneof"`
}

type TestCase_ContextMessage struct {
	ContextMessage *anypb.Any `protobuf:"bytes,6,opt,name=context_message,json=contextMessage,proto3,oneof"`
}

type TestCase_ContextExpr struct {
	ContextExpr string `protobuf:"bytes,7,opt,name=context_expr,json=contextExpr,proto3,oneof"`
}

func (*TestCase_Bindings) isTestCase_InputKind() {}

func (*TestCase_ContextMessage) isTestCase_InputKind() {}

func (*TestCase_ContextExpr) isTestCase_InputKind() {}

type isTestCase_ResultKind interface {
	isTestCase_ResultKind()
}

type TestCase_ResultValue struct {
	ResultValue *expr.Value `protobuf:"bytes,8,opt,name=result_value,json=resultValue,proto3,oneof"`
}

type TestCase_ResultExpr struct {
	ResultExpr string `protobuf:"bytes,9,opt,name=result_expr,json=resultExpr,proto3,oneof"`
}

type TestCase_EvalError struct {
	EvalError *expr.ErrorSet `protobuf:"bytes,10,opt,name=eval_error,json=evalError,proto3,oneof"`
}

type TestCase_Unknown struct {
	Unknown *expr.UnknownSet `protobuf:"bytes,11,opt,name=unknown,proto3,oneof"`
}

func (*TestCase_ResultValue) isTestCase_ResultKind() {}

func (*TestCase_ResultExpr) isTestCase_ResultKind() {}

func (*TestCase_EvalError) isTestCase_ResultKind() {}

func (*TestCase_Unknown) isTestCase_ResultKind() {}

type Bindings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*expr.Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Bindings) Reset() {
	*x = Bindings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bindings) ProtoMessage() {}

func (x *Bindings) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_suite_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bindings.ProtoReflect.Descriptor instead.
func (*Bindings) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_suite_proto_rawDescGZIP(), []int{3}
}

func (x *Bindings) GetValues() map[string]*expr.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_cel_expr_conformance_test_suite_proto protoreflect.FileDescriptor

var file_cel_expr_conformance_test_suite_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x65, 0x6c, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x63, 0x65, 0x6c, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x65, 0x6c, 0x2f,
	0x65, 0x78, 0x70, 0x72, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x63, 0x65, 0x6c, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x65, 0x6c, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x7e, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22,
	0xe7, 0x04, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x41, 0x0a, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x6c,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x48, 0x01, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x01, 0x52, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x64, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x6c,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x0c, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x08, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x4a, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x4f, 0x0a, 0x1d, 0x64,
	0x65, 0x76, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1d, 0x63, 0x65, 0x6c, 0x2e,
	0x64, 0x65, 0x76, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cel_expr_conformance_test_suite_proto_rawDescOnce sync.Once
	file_cel_expr_conformance_test_suite_proto_rawDescData = file_cel_expr_conformance_test_suite_proto_rawDesc
)

func file_cel_expr_conformance_test_suite_proto_rawDescGZIP() []byte {
	file_cel_expr_conformance_test_suite_proto_rawDescOnce.Do(func() {
		file_cel_expr_conformance_test_suite_proto_rawDescData = protoimpl.X.CompressGZIP(file_cel_expr_conformance_test_suite_proto_rawDescData)
	})
	return file_cel_expr_conformance_test_suite_proto_rawDescData
}

var file_cel_expr_conformance_test_suite_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cel_expr_conformance_test_suite_proto_goTypes = []any{
	(*TestSuite)(nil),               // 0: cel.expr.conformance.test.TestSuite
	(*TestSection)(nil),             // 1: cel.expr.conformance.test.TestSection
	(*TestCase)(nil),                // 2: cel.expr.conformance.test.TestCase
	(*Bindings)(nil),                // 3: cel.expr.conformance.test.Bindings
	nil,                             // 4: cel.expr.conformance.test.Bindings.ValuesEntry
	(*conformance.Environment)(nil), // 5: cel.expr.conformance.Environment
	(*anypb.Any)(nil),               // 6: google.protobuf.Any
	(*expr.Value)(nil),              // 7: cel.expr.Value
	(*expr.ErrorSet)(nil),           // 8: cel.expr.ErrorSet
	(*expr.UnknownSet)(nil),         // 9: cel.expr.UnknownSet
	(*expr.Type)(nil),               // 10: cel.expr.Type
}
var file_cel_expr_conformance_test_suite_proto_depIdxs = []int32{
	1,  // 0: cel.expr.conformance.test.TestSuite.sections:type_name -> cel.expr.conformance.test.TestSection
	2,  // 1: cel.expr.conformance.test.TestSection.tests:type_name -> cel.expr.conformance.test.TestCase
	5,  // 2: cel.expr.conformance.test.TestCase.env:type_name -> cel.expr.conformance.Environment
	3,  // 3: cel.expr.conformance.test.TestCase.bindings:type_name -> cel.expr.conformance.test.Bindings
	6,  // 4: cel.expr.conformance.test.TestCase.context_message:type_name -> google.protobuf.Any
	7,  // 5: cel.expr.conformance.test.TestCase.result_value:type_name -> cel.expr.Value
	8,  // 6: cel.expr.conformance.test.TestCase.eval_error:type_name -> cel.expr.ErrorSet
	9,  // 7: cel.expr.conformance.test.TestCase.unknown:type_name -> cel.expr.UnknownSet
	10, // 8: cel.expr.conformance.test.TestCase.deduced_type:type_name -> cel.expr.Type
	4,  // 9: cel.expr.conformance.test.Bindings.values:type_name -> cel.expr.conformance.test.Bindings.ValuesEntry
	7,  // 10: cel.expr.conformance.test.Bindings.ValuesEntry.value:type_name -> cel.expr.Value
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_cel_expr_conformance_test_suite_proto_init() }
func file_cel_expr_conformance_test_suite_proto_init() {
	if File_cel_expr_conformance_test_suite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cel_expr_conformance_test_suite_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TestSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cel_expr_conformance_test_suite_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TestSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cel_expr_conformance_test_suite_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cel_expr_conformance_test_suite_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Bindings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cel_expr_conformance_test_suite_proto_msgTypes[2].OneofWrappers = []any{
		(*TestCase_Bindings)(nil),
		(*TestCase_ContextMessage)(nil),
		(*TestCase_ContextExpr)(nil),
		(*TestCase_ResultValue)(nil),
		(*TestCase_ResultExpr)(nil),
		(*TestCase_EvalError)(nil),
		(*TestCase_Unknown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cel_expr_conformance_test_suite_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cel_expr_conformance_test_suite_proto_goTypes,
		DependencyIndexes: file_cel_expr_conformance_test_suite_proto_depIdxs,
		MessageInfos:      file_cel_expr_conformance_test_suite_proto_msgTypes,
	}.Build()
	File_cel_expr_conformance_test_suite_proto = out.File
	file_cel_expr_conformance_test_suite_proto_rawDesc = nil
	file_cel_expr_conformance_test_suite_proto_goTypes = nil
	file_cel_expr_conformance_test_suite_proto_depIdxs = nil
}
