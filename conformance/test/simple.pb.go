// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.27.1
// source: cel/expr/conformance/test/simple.proto

package test

import (
	expr "cel.dev/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleTestFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Section       []*SimpleTestSection   `protobuf:"bytes,3,rep,name=section,proto3" json:"section,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleTestFile) Reset() {
	*x = SimpleTestFile{}
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleTestFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTestFile) ProtoMessage() {}

func (x *SimpleTestFile) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTestFile.ProtoReflect.Descriptor instead.
func (*SimpleTestFile) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_simple_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleTestFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleTestFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleTestFile) GetSection() []*SimpleTestSection {
	if x != nil {
		return x.Section
	}
	return nil
}

type SimpleTestSection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Test          []*SimpleTest          `protobuf:"bytes,3,rep,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleTestSection) Reset() {
	*x = SimpleTestSection{}
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleTestSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTestSection) ProtoMessage() {}

func (x *SimpleTestSection) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTestSection.ProtoReflect.Descriptor instead.
func (*SimpleTestSection) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_simple_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleTestSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleTestSection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleTestSection) GetTest() []*SimpleTest {
	if x != nil {
		return x.Test
	}
	return nil
}

type SimpleTest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Name          string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Expr          string                     `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	DisableMacros bool                       `protobuf:"varint,4,opt,name=disable_macros,json=disableMacros,proto3" json:"disable_macros,omitempty"`
	DisableCheck  bool                       `protobuf:"varint,5,opt,name=disable_check,json=disableCheck,proto3" json:"disable_check,omitempty"`
	CheckOnly     bool                       `protobuf:"varint,15,opt,name=check_only,json=checkOnly,proto3" json:"check_only,omitempty"`
	TypeEnv       []*expr.Decl               `protobuf:"bytes,6,rep,name=type_env,json=typeEnv,proto3" json:"type_env,omitempty"`
	Container     string                     `protobuf:"bytes,13,opt,name=container,proto3" json:"container,omitempty"`
	Locale        string                     `protobuf:"bytes,14,opt,name=locale,proto3" json:"locale,omitempty"`
	Bindings      map[string]*expr.ExprValue `protobuf:"bytes,7,rep,name=bindings,proto3" json:"bindings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to ResultMatcher:
	//
	//	*SimpleTest_Value
	//	*SimpleTest_TypedResult
	//	*SimpleTest_EvalError
	//	*SimpleTest_AnyEvalErrors
	//	*SimpleTest_Unknown
	//	*SimpleTest_AnyUnknowns
	ResultMatcher isSimpleTest_ResultMatcher `protobuf_oneof:"result_matcher"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleTest) Reset() {
	*x = SimpleTest{}
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTest) ProtoMessage() {}

func (x *SimpleTest) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTest.ProtoReflect.Descriptor instead.
func (*SimpleTest) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_simple_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleTest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleTest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *SimpleTest) GetDisableMacros() bool {
	if x != nil {
		return x.DisableMacros
	}
	return false
}

func (x *SimpleTest) GetDisableCheck() bool {
	if x != nil {
		return x.DisableCheck
	}
	return false
}

func (x *SimpleTest) GetCheckOnly() bool {
	if x != nil {
		return x.CheckOnly
	}
	return false
}

func (x *SimpleTest) GetTypeEnv() []*expr.Decl {
	if x != nil {
		return x.TypeEnv
	}
	return nil
}

func (x *SimpleTest) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *SimpleTest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *SimpleTest) GetBindings() map[string]*expr.ExprValue {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *SimpleTest) GetResultMatcher() isSimpleTest_ResultMatcher {
	if x != nil {
		return x.ResultMatcher
	}
	return nil
}

func (x *SimpleTest) GetValue() *expr.Value {
	if x != nil {
		if x, ok := x.ResultMatcher.(*SimpleTest_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *SimpleTest) GetTypedResult() *TypedResult {
	if x != nil {
		if x, ok := x.ResultMatcher.(*SimpleTest_TypedResult); ok {
			return x.TypedResult
		}
	}
	return nil
}

func (x *SimpleTest) GetEvalError() *expr.ErrorSet {
	if x != nil {
		if x, ok := x.ResultMatcher.(*SimpleTest_EvalError); ok {
			return x.EvalError
		}
	}
	return nil
}

func (x *SimpleTest) GetAnyEvalErrors() *ErrorSetMatcher {
	if x != nil {
		if x, ok := x.ResultMatcher.(*SimpleTest_AnyEvalErrors); ok {
			return x.AnyEvalErrors
		}
	}
	return nil
}

func (x *SimpleTest) GetUnknown() *expr.UnknownSet {
	if x != nil {
		if x, ok := x.ResultMatcher.(*SimpleTest_Unknown); ok {
			return x.Unknown
		}
	}
	return nil
}

func (x *SimpleTest) GetAnyUnknowns() *UnknownSetMatcher {
	if x != nil {
		if x, ok := x.ResultMatcher.(*SimpleTest_AnyUnknowns); ok {
			return x.AnyUnknowns
		}
	}
	return nil
}

type isSimpleTest_ResultMatcher interface {
	isSimpleTest_ResultMatcher()
}

type SimpleTest_Value struct {
	Value *expr.Value `protobuf:"bytes,8,opt,name=value,proto3,oneof"`
}

type SimpleTest_TypedResult struct {
	TypedResult *TypedResult `protobuf:"bytes,16,opt,name=typed_result,json=typedResult,proto3,oneof"`
}

type SimpleTest_EvalError struct {
	EvalError *expr.ErrorSet `protobuf:"bytes,9,opt,name=eval_error,json=evalError,proto3,oneof"`
}

type SimpleTest_AnyEvalErrors struct {
	AnyEvalErrors *ErrorSetMatcher `protobuf:"bytes,10,opt,name=any_eval_errors,json=anyEvalErrors,proto3,oneof"`
}

type SimpleTest_Unknown struct {
	Unknown *expr.UnknownSet `protobuf:"bytes,11,opt,name=unknown,proto3,oneof"`
}

type SimpleTest_AnyUnknowns struct {
	AnyUnknowns *UnknownSetMatcher `protobuf:"bytes,12,opt,name=any_unknowns,json=anyUnknowns,proto3,oneof"`
}

func (*SimpleTest_Value) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_TypedResult) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_EvalError) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_AnyEvalErrors) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_Unknown) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_AnyUnknowns) isSimpleTest_ResultMatcher() {}

type TypedResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *expr.Value            `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	DeducedType   *expr.Type             `protobuf:"bytes,2,opt,name=deduced_type,json=deducedType,proto3" json:"deduced_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypedResult) Reset() {
	*x = TypedResult{}
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedResult) ProtoMessage() {}

func (x *TypedResult) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedResult.ProtoReflect.Descriptor instead.
func (*TypedResult) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_simple_proto_rawDescGZIP(), []int{3}
}

func (x *TypedResult) GetResult() *expr.Value {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TypedResult) GetDeducedType() *expr.Type {
	if x != nil {
		return x.DeducedType
	}
	return nil
}

type ErrorSetMatcher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errors        []*expr.ErrorSet       `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorSetMatcher) Reset() {
	*x = ErrorSetMatcher{}
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorSetMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorSetMatcher) ProtoMessage() {}

func (x *ErrorSetMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorSetMatcher.ProtoReflect.Descriptor instead.
func (*ErrorSetMatcher) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_simple_proto_rawDescGZIP(), []int{4}
}

func (x *ErrorSetMatcher) GetErrors() []*expr.ErrorSet {
	if x != nil {
		return x.Errors
	}
	return nil
}

type UnknownSetMatcher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unknowns      []*expr.UnknownSet     `protobuf:"bytes,1,rep,name=unknowns,proto3" json:"unknowns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnknownSetMatcher) Reset() {
	*x = UnknownSetMatcher{}
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnknownSetMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownSetMatcher) ProtoMessage() {}

func (x *UnknownSetMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_cel_expr_conformance_test_simple_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownSetMatcher.ProtoReflect.Descriptor instead.
func (*UnknownSetMatcher) Descriptor() ([]byte, []int) {
	return file_cel_expr_conformance_test_simple_proto_rawDescGZIP(), []int{5}
}

func (x *UnknownSetMatcher) GetUnknowns() []*expr.UnknownSet {
	if x != nil {
		return x.Unknowns
	}
	return nil
}

var File_cel_expr_conformance_test_simple_proto protoreflect.FileDescriptor

const file_cel_expr_conformance_test_simple_proto_rawDesc = "" +
	"\n" +
	"&cel/expr/conformance/test/simple.proto\x12\x19cel.expr.conformance.test\x1a\x16cel/expr/checked.proto\x1a\x13cel/expr/eval.proto\x1a\x14cel/expr/value.proto\"\x8e\x01\n" +
	"\x0eSimpleTestFile\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12F\n" +
	"\asection\x18\x03 \x03(\v2,.cel.expr.conformance.test.SimpleTestSectionR\asection\"\x84\x01\n" +
	"\x11SimpleTestSection\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x129\n" +
	"\x04test\x18\x03 \x03(\v2%.cel.expr.conformance.test.SimpleTestR\x04test\"\xdd\x06\n" +
	"\n" +
	"SimpleTest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04expr\x18\x03 \x01(\tR\x04expr\x12%\n" +
	"\x0edisable_macros\x18\x04 \x01(\bR\rdisableMacros\x12#\n" +
	"\rdisable_check\x18\x05 \x01(\bR\fdisableCheck\x12\x1d\n" +
	"\n" +
	"check_only\x18\x0f \x01(\bR\tcheckOnly\x12)\n" +
	"\btype_env\x18\x06 \x03(\v2\x0e.cel.expr.DeclR\atypeEnv\x12\x1c\n" +
	"\tcontainer\x18\r \x01(\tR\tcontainer\x12\x16\n" +
	"\x06locale\x18\x0e \x01(\tR\x06locale\x12O\n" +
	"\bbindings\x18\a \x03(\v23.cel.expr.conformance.test.SimpleTest.BindingsEntryR\bbindings\x12'\n" +
	"\x05value\x18\b \x01(\v2\x0f.cel.expr.ValueH\x00R\x05value\x12K\n" +
	"\ftyped_result\x18\x10 \x01(\v2&.cel.expr.conformance.test.TypedResultH\x00R\vtypedResult\x123\n" +
	"\n" +
	"eval_error\x18\t \x01(\v2\x12.cel.expr.ErrorSetH\x00R\tevalError\x12T\n" +
	"\x0fany_eval_errors\x18\n" +
	" \x01(\v2*.cel.expr.conformance.test.ErrorSetMatcherH\x00R\ranyEvalErrors\x120\n" +
	"\aunknown\x18\v \x01(\v2\x14.cel.expr.UnknownSetH\x00R\aunknown\x12Q\n" +
	"\fany_unknowns\x18\f \x01(\v2,.cel.expr.conformance.test.UnknownSetMatcherH\x00R\vanyUnknowns\x1aP\n" +
	"\rBindingsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.cel.expr.ExprValueR\x05value:\x028\x01B\x10\n" +
	"\x0eresult_matcher\"i\n" +
	"\vTypedResult\x12'\n" +
	"\x06result\x18\x01 \x01(\v2\x0f.cel.expr.ValueR\x06result\x121\n" +
	"\fdeduced_type\x18\x02 \x01(\v2\x0e.cel.expr.TypeR\vdeducedType\"=\n" +
	"\x0fErrorSetMatcher\x12*\n" +
	"\x06errors\x18\x01 \x03(\v2\x12.cel.expr.ErrorSetR\x06errors\"E\n" +
	"\x11UnknownSetMatcher\x120\n" +
	"\bunknowns\x18\x01 \x03(\v2\x14.cel.expr.UnknownSetR\bunknownsBP\n" +
	"\x1ddev.cel.expr.conformance.testB\vSimpleProtoP\x01Z\x1dcel.dev/expr/conformance/test\xf8\x01\x01b\x06proto3"

var (
	file_cel_expr_conformance_test_simple_proto_rawDescOnce sync.Once
	file_cel_expr_conformance_test_simple_proto_rawDescData []byte
)

func file_cel_expr_conformance_test_simple_proto_rawDescGZIP() []byte {
	file_cel_expr_conformance_test_simple_proto_rawDescOnce.Do(func() {
		file_cel_expr_conformance_test_simple_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cel_expr_conformance_test_simple_proto_rawDesc), len(file_cel_expr_conformance_test_simple_proto_rawDesc)))
	})
	return file_cel_expr_conformance_test_simple_proto_rawDescData
}

var file_cel_expr_conformance_test_simple_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cel_expr_conformance_test_simple_proto_goTypes = []any{
	(*SimpleTestFile)(nil),    // 0: cel.expr.conformance.test.SimpleTestFile
	(*SimpleTestSection)(nil), // 1: cel.expr.conformance.test.SimpleTestSection
	(*SimpleTest)(nil),        // 2: cel.expr.conformance.test.SimpleTest
	(*TypedResult)(nil),       // 3: cel.expr.conformance.test.TypedResult
	(*ErrorSetMatcher)(nil),   // 4: cel.expr.conformance.test.ErrorSetMatcher
	(*UnknownSetMatcher)(nil), // 5: cel.expr.conformance.test.UnknownSetMatcher
	nil,                       // 6: cel.expr.conformance.test.SimpleTest.BindingsEntry
	(*expr.Decl)(nil),         // 7: cel.expr.Decl
	(*expr.Value)(nil),        // 8: cel.expr.Value
	(*expr.ErrorSet)(nil),     // 9: cel.expr.ErrorSet
	(*expr.UnknownSet)(nil),   // 10: cel.expr.UnknownSet
	(*expr.Type)(nil),         // 11: cel.expr.Type
	(*expr.ExprValue)(nil),    // 12: cel.expr.ExprValue
}
var file_cel_expr_conformance_test_simple_proto_depIdxs = []int32{
	1,  // 0: cel.expr.conformance.test.SimpleTestFile.section:type_name -> cel.expr.conformance.test.SimpleTestSection
	2,  // 1: cel.expr.conformance.test.SimpleTestSection.test:type_name -> cel.expr.conformance.test.SimpleTest
	7,  // 2: cel.expr.conformance.test.SimpleTest.type_env:type_name -> cel.expr.Decl
	6,  // 3: cel.expr.conformance.test.SimpleTest.bindings:type_name -> cel.expr.conformance.test.SimpleTest.BindingsEntry
	8,  // 4: cel.expr.conformance.test.SimpleTest.value:type_name -> cel.expr.Value
	3,  // 5: cel.expr.conformance.test.SimpleTest.typed_result:type_name -> cel.expr.conformance.test.TypedResult
	9,  // 6: cel.expr.conformance.test.SimpleTest.eval_error:type_name -> cel.expr.ErrorSet
	4,  // 7: cel.expr.conformance.test.SimpleTest.any_eval_errors:type_name -> cel.expr.conformance.test.ErrorSetMatcher
	10, // 8: cel.expr.conformance.test.SimpleTest.unknown:type_name -> cel.expr.UnknownSet
	5,  // 9: cel.expr.conformance.test.SimpleTest.any_unknowns:type_name -> cel.expr.conformance.test.UnknownSetMatcher
	8,  // 10: cel.expr.conformance.test.TypedResult.result:type_name -> cel.expr.Value
	11, // 11: cel.expr.conformance.test.TypedResult.deduced_type:type_name -> cel.expr.Type
	9,  // 12: cel.expr.conformance.test.ErrorSetMatcher.errors:type_name -> cel.expr.ErrorSet
	10, // 13: cel.expr.conformance.test.UnknownSetMatcher.unknowns:type_name -> cel.expr.UnknownSet
	12, // 14: cel.expr.conformance.test.SimpleTest.BindingsEntry.value:type_name -> cel.expr.ExprValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cel_expr_conformance_test_simple_proto_init() }
func file_cel_expr_conformance_test_simple_proto_init() {
	if File_cel_expr_conformance_test_simple_proto != nil {
		return
	}
	file_cel_expr_conformance_test_simple_proto_msgTypes[2].OneofWrappers = []any{
		(*SimpleTest_Value)(nil),
		(*SimpleTest_TypedResult)(nil),
		(*SimpleTest_EvalError)(nil),
		(*SimpleTest_AnyEvalErrors)(nil),
		(*SimpleTest_Unknown)(nil),
		(*SimpleTest_AnyUnknowns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cel_expr_conformance_test_simple_proto_rawDesc), len(file_cel_expr_conformance_test_simple_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cel_expr_conformance_test_simple_proto_goTypes,
		DependencyIndexes: file_cel_expr_conformance_test_simple_proto_depIdxs,
		MessageInfos:      file_cel_expr_conformance_test_simple_proto_msgTypes,
	}.Build()
	File_cel_expr_conformance_test_simple_proto = out.File
	file_cel_expr_conformance_test_simple_proto_goTypes = nil
	file_cel_expr_conformance_test_simple_proto_depIdxs = nil
}
