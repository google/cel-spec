// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: proto/test/v1/simple.proto

package testpb

import (
	proto "github.com/golang/protobuf/proto"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SimpleTestFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Section     []*SimpleTestSection `protobuf:"bytes,3,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *SimpleTestFile) Reset() {
	*x = SimpleTestFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_v1_simple_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTestFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTestFile) ProtoMessage() {}

func (x *SimpleTestFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_v1_simple_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTestFile.ProtoReflect.Descriptor instead.
func (*SimpleTestFile) Descriptor() ([]byte, []int) {
	return file_proto_test_v1_simple_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleTestFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleTestFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleTestFile) GetSection() []*SimpleTestSection {
	if x != nil {
		return x.Section
	}
	return nil
}

type SimpleTestSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Test        []*SimpleTest `protobuf:"bytes,3,rep,name=test,proto3" json:"test,omitempty"`
}

func (x *SimpleTestSection) Reset() {
	*x = SimpleTestSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_v1_simple_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTestSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTestSection) ProtoMessage() {}

func (x *SimpleTestSection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_v1_simple_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTestSection.ProtoReflect.Descriptor instead.
func (*SimpleTestSection) Descriptor() ([]byte, []int) {
	return file_proto_test_v1_simple_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleTestSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleTestSection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleTestSection) GetTest() []*SimpleTest {
	if x != nil {
		return x.Test
	}
	return nil
}

type SimpleTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Expr          string                         `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	DisableMacros bool                           `protobuf:"varint,4,opt,name=disable_macros,json=disableMacros,proto3" json:"disable_macros,omitempty"`
	DisableCheck  bool                           `protobuf:"varint,5,opt,name=disable_check,json=disableCheck,proto3" json:"disable_check,omitempty"`
	TypeEnv       []*v1alpha1.Decl               `protobuf:"bytes,6,rep,name=type_env,json=typeEnv,proto3" json:"type_env,omitempty"`
	Container     string                         `protobuf:"bytes,13,opt,name=container,proto3" json:"container,omitempty"`
	Bindings      map[string]*v1alpha1.ExprValue `protobuf:"bytes,7,rep,name=bindings,proto3" json:"bindings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to ResultMatcher:
	//	*SimpleTest_Value
	//	*SimpleTest_EvalError
	//	*SimpleTest_AnyEvalErrors
	//	*SimpleTest_Unknown
	//	*SimpleTest_AnyUnknowns
	ResultMatcher isSimpleTest_ResultMatcher `protobuf_oneof:"result_matcher"`
}

func (x *SimpleTest) Reset() {
	*x = SimpleTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_v1_simple_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTest) ProtoMessage() {}

func (x *SimpleTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_v1_simple_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTest.ProtoReflect.Descriptor instead.
func (*SimpleTest) Descriptor() ([]byte, []int) {
	return file_proto_test_v1_simple_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleTest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleTest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *SimpleTest) GetDisableMacros() bool {
	if x != nil {
		return x.DisableMacros
	}
	return false
}

func (x *SimpleTest) GetDisableCheck() bool {
	if x != nil {
		return x.DisableCheck
	}
	return false
}

func (x *SimpleTest) GetTypeEnv() []*v1alpha1.Decl {
	if x != nil {
		return x.TypeEnv
	}
	return nil
}

func (x *SimpleTest) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *SimpleTest) GetBindings() map[string]*v1alpha1.ExprValue {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (m *SimpleTest) GetResultMatcher() isSimpleTest_ResultMatcher {
	if m != nil {
		return m.ResultMatcher
	}
	return nil
}

func (x *SimpleTest) GetValue() *v1alpha1.Value {
	if x, ok := x.GetResultMatcher().(*SimpleTest_Value); ok {
		return x.Value
	}
	return nil
}

func (x *SimpleTest) GetEvalError() *v1alpha1.ErrorSet {
	if x, ok := x.GetResultMatcher().(*SimpleTest_EvalError); ok {
		return x.EvalError
	}
	return nil
}

func (x *SimpleTest) GetAnyEvalErrors() *ErrorSetMatcher {
	if x, ok := x.GetResultMatcher().(*SimpleTest_AnyEvalErrors); ok {
		return x.AnyEvalErrors
	}
	return nil
}

func (x *SimpleTest) GetUnknown() *v1alpha1.UnknownSet {
	if x, ok := x.GetResultMatcher().(*SimpleTest_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *SimpleTest) GetAnyUnknowns() *UnknownSetMatcher {
	if x, ok := x.GetResultMatcher().(*SimpleTest_AnyUnknowns); ok {
		return x.AnyUnknowns
	}
	return nil
}

type isSimpleTest_ResultMatcher interface {
	isSimpleTest_ResultMatcher()
}

type SimpleTest_Value struct {
	Value *v1alpha1.Value `protobuf:"bytes,8,opt,name=value,proto3,oneof"`
}

type SimpleTest_EvalError struct {
	EvalError *v1alpha1.ErrorSet `protobuf:"bytes,9,opt,name=eval_error,json=evalError,proto3,oneof"`
}

type SimpleTest_AnyEvalErrors struct {
	AnyEvalErrors *ErrorSetMatcher `protobuf:"bytes,10,opt,name=any_eval_errors,json=anyEvalErrors,proto3,oneof"`
}

type SimpleTest_Unknown struct {
	Unknown *v1alpha1.UnknownSet `protobuf:"bytes,11,opt,name=unknown,proto3,oneof"`
}

type SimpleTest_AnyUnknowns struct {
	AnyUnknowns *UnknownSetMatcher `protobuf:"bytes,12,opt,name=any_unknowns,json=anyUnknowns,proto3,oneof"`
}

func (*SimpleTest_Value) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_EvalError) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_AnyEvalErrors) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_Unknown) isSimpleTest_ResultMatcher() {}

func (*SimpleTest_AnyUnknowns) isSimpleTest_ResultMatcher() {}

type ErrorSetMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*v1alpha1.ErrorSet `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ErrorSetMatcher) Reset() {
	*x = ErrorSetMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_v1_simple_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorSetMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorSetMatcher) ProtoMessage() {}

func (x *ErrorSetMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_v1_simple_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorSetMatcher.ProtoReflect.Descriptor instead.
func (*ErrorSetMatcher) Descriptor() ([]byte, []int) {
	return file_proto_test_v1_simple_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorSetMatcher) GetErrors() []*v1alpha1.ErrorSet {
	if x != nil {
		return x.Errors
	}
	return nil
}

type UnknownSetMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unknowns []*v1alpha1.UnknownSet `protobuf:"bytes,1,rep,name=unknowns,proto3" json:"unknowns,omitempty"`
}

func (x *UnknownSetMatcher) Reset() {
	*x = UnknownSetMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_v1_simple_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownSetMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownSetMatcher) ProtoMessage() {}

func (x *UnknownSetMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_v1_simple_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownSetMatcher.ProtoReflect.Descriptor instead.
func (*UnknownSetMatcher) Descriptor() ([]byte, []int) {
	return file_proto_test_v1_simple_proto_rawDescGZIP(), []int{4}
}

func (x *UnknownSetMatcher) GetUnknowns() []*v1alpha1.UnknownSet {
	if x != nil {
		return x.Unknowns
	}
	return nil
}

var File_proto_test_v1_simple_proto protoreflect.FileDescriptor

var file_proto_test_v1_simple_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0xa3, 0x06, 0x0a,
	0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x61, 0x6e, 0x79, 0x5f, 0x65,
	0x76, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e,
	0x79, 0x45, 0x76, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x4f, 0x0a,
	0x0c, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x6e, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x1a, 0x60,
	0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x55, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x08,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x65,
	0x6c, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_test_v1_simple_proto_rawDescOnce sync.Once
	file_proto_test_v1_simple_proto_rawDescData = file_proto_test_v1_simple_proto_rawDesc
)

func file_proto_test_v1_simple_proto_rawDescGZIP() []byte {
	file_proto_test_v1_simple_proto_rawDescOnce.Do(func() {
		file_proto_test_v1_simple_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_test_v1_simple_proto_rawDescData)
	})
	return file_proto_test_v1_simple_proto_rawDescData
}

var file_proto_test_v1_simple_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_test_v1_simple_proto_goTypes = []interface{}{
	(*SimpleTestFile)(nil),      // 0: google.api.expr.test.v1.SimpleTestFile
	(*SimpleTestSection)(nil),   // 1: google.api.expr.test.v1.SimpleTestSection
	(*SimpleTest)(nil),          // 2: google.api.expr.test.v1.SimpleTest
	(*ErrorSetMatcher)(nil),     // 3: google.api.expr.test.v1.ErrorSetMatcher
	(*UnknownSetMatcher)(nil),   // 4: google.api.expr.test.v1.UnknownSetMatcher
	nil,                         // 5: google.api.expr.test.v1.SimpleTest.BindingsEntry
	(*v1alpha1.Decl)(nil),       // 6: google.api.expr.v1alpha1.Decl
	(*v1alpha1.Value)(nil),      // 7: google.api.expr.v1alpha1.Value
	(*v1alpha1.ErrorSet)(nil),   // 8: google.api.expr.v1alpha1.ErrorSet
	(*v1alpha1.UnknownSet)(nil), // 9: google.api.expr.v1alpha1.UnknownSet
	(*v1alpha1.ExprValue)(nil),  // 10: google.api.expr.v1alpha1.ExprValue
}
var file_proto_test_v1_simple_proto_depIdxs = []int32{
	1,  // 0: google.api.expr.test.v1.SimpleTestFile.section:type_name -> google.api.expr.test.v1.SimpleTestSection
	2,  // 1: google.api.expr.test.v1.SimpleTestSection.test:type_name -> google.api.expr.test.v1.SimpleTest
	6,  // 2: google.api.expr.test.v1.SimpleTest.type_env:type_name -> google.api.expr.v1alpha1.Decl
	5,  // 3: google.api.expr.test.v1.SimpleTest.bindings:type_name -> google.api.expr.test.v1.SimpleTest.BindingsEntry
	7,  // 4: google.api.expr.test.v1.SimpleTest.value:type_name -> google.api.expr.v1alpha1.Value
	8,  // 5: google.api.expr.test.v1.SimpleTest.eval_error:type_name -> google.api.expr.v1alpha1.ErrorSet
	3,  // 6: google.api.expr.test.v1.SimpleTest.any_eval_errors:type_name -> google.api.expr.test.v1.ErrorSetMatcher
	9,  // 7: google.api.expr.test.v1.SimpleTest.unknown:type_name -> google.api.expr.v1alpha1.UnknownSet
	4,  // 8: google.api.expr.test.v1.SimpleTest.any_unknowns:type_name -> google.api.expr.test.v1.UnknownSetMatcher
	8,  // 9: google.api.expr.test.v1.ErrorSetMatcher.errors:type_name -> google.api.expr.v1alpha1.ErrorSet
	9,  // 10: google.api.expr.test.v1.UnknownSetMatcher.unknowns:type_name -> google.api.expr.v1alpha1.UnknownSet
	10, // 11: google.api.expr.test.v1.SimpleTest.BindingsEntry.value:type_name -> google.api.expr.v1alpha1.ExprValue
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_test_v1_simple_proto_init() }
func file_proto_test_v1_simple_proto_init() {
	if File_proto_test_v1_simple_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_test_v1_simple_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTestFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_v1_simple_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTestSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_v1_simple_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_v1_simple_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorSetMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_v1_simple_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownSetMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_test_v1_simple_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SimpleTest_Value)(nil),
		(*SimpleTest_EvalError)(nil),
		(*SimpleTest_AnyEvalErrors)(nil),
		(*SimpleTest_Unknown)(nil),
		(*SimpleTest_AnyUnknowns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_test_v1_simple_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_test_v1_simple_proto_goTypes,
		DependencyIndexes: file_proto_test_v1_simple_proto_depIdxs,
		MessageInfos:      file_proto_test_v1_simple_proto_msgTypes,
	}.Build()
	File_proto_test_v1_simple_proto = out.File
	file_proto_test_v1_simple_proto_rawDesc = nil
	file_proto_test_v1_simple_proto_goTypes = nil
	file_proto_test_v1_simple_proto_depIdxs = nil
}
