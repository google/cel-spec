// Protocol buffer definitions for conformance testing.

syntax = "proto3";

package google.api.expr.test.v1;

import "google/api/expr/v1alpha1/checked.proto";
import "google/api/expr/v1alpha1/eval.proto";
import "google/api/expr/v1alpha1/value.proto";
import "google/protobuf/empty.proto";

// Configuration needed for running any test.
message Config {
  // Command line for executing the CelService server to be used
  // when no call-specific server is specified.
  string server_cmd = 1;

  // Command line for executing a CelService server to be used
  // for Parse() calls.  Default to server_cmd if empty.
  string parse_server_cmd = 2;

  // Command line for executing a CelService server to be used
  // for Check() calls.  Default to server_cmd if empty.
  string check_server_cmd = 3;

  // Command line for executing a CelService server to be used
  // for Eval() calls.  Default to server_cmd if empty.
  string eval_server_cmd = 4;
}

// Description of the correct response(s) to a parse-(check)-eval pipeline.
// Interpretation of a matcher has a few subtleties described below
message EvalResponseMatcher {
  oneof kind {
    // A normal value, which must match the evaluation result exactly
    // via value equality semantics.  This coincides with proto equality,
    // except for:
    // *   maps are order-agnostic.
    // *   a floating point NaN should match any NaN.
    google.api.expr.v1alpha1.Value value = 1;

    // Possible error collections.  See below.
    ErrorSets errors = 2;

    // Possible unknowns.  See below.
    UnknownSets unknowns = 3;

    // A regexp which should match against the string representation
    // of a parse error.  Can match against any one of multiple errors.
    // Use "." until we standardize error strings.
    string parse_failure_regex = 4;

    // A regexp which should match against the string representation
    // of a check error.  Can match against any one of multiple errors.
    // Use "." until we standardize error strings.
    string check_failure_regex = 5;

    // A shortcut for the true boolean value.
    google.protobuf.Empty trueval = 6;
  }
}

// A collection of ErrorSets.  The match is successful if evaluation
// returns an ErrorSet that matches *any* of the listed ErrorSets.
message ErrorSets {
  // Success if we match any of these sets.
  repeated google.api.expr.v1alpha1.ErrorSet errors = 1;
}

// A collection of UnknownSets.  The match is successful if evaluation
// returns an UnknownSet that matches *any* of the listed UnknownSets.
message UnknownSets {
  // Success if we match any of these sets.
  repeated google.api.expr.v1alpha1.UnknownSet unknowns = 1;
}

// A test which should run the given CEL program through parsing,
// optionally through checking, then evaluation, with the results
// of the pipeline validated by the given EvalResponseMatcher.
message SimpleEvalTest {
  // Required.  The name of the test, which should be unique in the test file.
  string name = 1;

  // A description of the test.
  string description = 2;

  // Required.  The text of the CEL expression.
  string expr = 3;

  // The type environment to use for the check phase.
  repeated google.api.expr.v1alpha1.Decl type_env = 4;

  // Variable bindings to use for the eval phase.
  map<string, google.api.expr.v1alpha1.ExprValue> bindings = 5;

  // Required.  The expectation of the pipeline result.
  EvalResponseMatcher expected = 6;

  // Enables the check phase.
  bool enable_check = 7;

  // Disables all macro expansion in parsing.
  bool disable_macros = 8;
}

// A collection of related SimpleEvalTests.
//
// The section is the unit of organization within a test file, and should
// guide where new tests are added.
message SimpleEvalTestSection {
  // Required.  The name of the section.
  string name = 1;

  // A description of the section.
  string description = 2;

  // The contained tests.
  repeated SimpleEvalTest test = 3;
}

// The format of a simple test file, expected to be stored in text format.
// A file is the unit of granularity for selecting conformance tests,
// so tests of optional features should be segregated into separate files.
message SimpleEvalTestFile {
  // Required.  The name of the file.  Should match the filename.
  string name = 1;

  // A description of the file.
  string description = 2;

  // The contained sections.
  repeated SimpleEvalTestSection section = 3;
}
