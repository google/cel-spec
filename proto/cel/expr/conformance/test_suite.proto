// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cel.expr.conformance;

import "cel/expr/eval.proto";
import "cel/expr/value.proto";

option cc_enable_arenas = true;
option go_package = "cel.dev/expr/conformance";
option java_multiple_files = true;
option java_outer_classname = "TestSuiteProto";
option java_package = "cel.dev.expr.conformance";

// The format of test suite for CEL tests.
message TestSuite {
  // Description of the test suite.
  string description = 1;

  // Test sections of the test suite.
  // Each section represents a behavior to be tested.
  repeated TestSection sections = 2;
}

// A collection of related test cases.
message TestSection {
  // Name of the test section.
  string name = 1;

  // Description of the test section.
  string description = 2;

  // Test cases of the test section.
  // Each test case represents a test scenario.
  repeated TestCase tests = 3;
}

// A test case which evaluates a CEL checked expression with the given inputs,
// and validates the result against the expected output.
message TestCase {
  // Name of the test case.
  string name = 1;

  // Inputs for the test case.
  // The key is the name of the input variable.
  map<string, InputValue> input = 2;

  // Expected result of the test case.
  oneof result {
    // A normal value, which must match the evaluation result exactly via value
    // equality semantics. This coincides with proto equality, except for:
    // *   maps are order-agnostic
    // *   a floating point NaN should match any NaN
    cel.expr.Value value = 3;

    // An expression to be evaluated using the cel environment configured for
    // the test suite. The result of this expression must match the result of
    // the test case.
    string expr = 4;

    // An error evaluation result set. Success if we match all of the errors in
    // the set.
    cel.expr.ErrorSet eval_error = 5;

    // An unknown evaluation result
    cel.expr.UnknownSet unknown = 6;
  }
}

// The value of an input variable for the test case.
message InputValue {
  // The type of values that can be used as input variables.
  oneof value {
    // The value of the input variable.
    cel.expr.Value expr_value = 1;

    // A context expression representing a context proto variable. The
    // fields of the input proto.Messages are used as top-level variables within
    // an Activation. The expression is evaluated using the cel environment
    // configured for the test suite.
    string context_expr = 2;
  }
}
