// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cel.expr.conformance;

import "cel/expr/checked.proto";
import "google/protobuf/descriptor.proto";

option cc_enable_arenas = true;
option go_package = "cel.dev/expr/conformance";
option java_multiple_files = true;
option java_outer_classname = "EnvironmentProto";
option java_package = "cel.dev.expr.conformance";

// Representation of a CEL Environment, defining what features and extensions
// are available for conformance testing.
message Environment {
  // List of custom declarations to use when type-checking an expression.
  repeated cel.expr.Decl declarations = 1;

  // ContextDeclaration represents a message type to be made available as a
  // context variable to the CEL environment.
  message ContextDeclaration {
    // Qualified message name of the context proto.
    string message_type = 1;
  }
  // If set, adds a context declaration from a proto message.
  //
  // Context messages have all of their top-level fields available as variables
  // in the type checker.
  repeated ContextDeclaration context_declarations = 2;

  // Sets the namespace (container) for the expression.
  // This is used to simplify resolution: e.g. with container
  // `google.rpc.context`, an identifier of
  // `google.rpc.context.AttributeContext` could be referred to simply as
  // `AttributeContext` in the CEL expression.
  string container = 3;

  // Disables including the declarations from the standard CEL environment.
  //
  // NOTE: Do not disable the standard CEL declarations unless you are aware of
  // the implications and have discussed your use case on cel-discuss@
  // or with the members of the cel-governance-team@
  bool disable_standard_cel_declarations = 4;

  // If provided, uses the provided FileDescriptorSet to extend types available
  // the CEL expression. All "well-known" protobuf messages (google.protobuf.*)
  // are known to the CEL compiler, but all others must be provided for type
  // checking.
  google.protobuf.FileDescriptorSet message_type_extension = 5;

  // Disables macros in the CEL compiler. Macros are enabled by default.
  bool disable_macros = 6;

  // When macro call tracking is enabled, the resulting SourceInfo in the
  // CheckedExpr will contain a collection of expressions representing the
  // function calls which were replaced by macros.
  bool enable_macro_call_tracking = 7;

  // CanonicalExtension represents a versioned extension library reference to
  // enable in the CEL environment.
  message CanonicalExtension {
    // Name of the extension library.
    string name = 1;
    // Version of the extension library.
    string version = 2;
  }
  // List of canonical extensions to enable in the CEL environment.
  repeated CanonicalExtension canonical_extensions = 8;
}
