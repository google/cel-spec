name: "integer_math"
description: "Tests for int and uint math."
section {
  name: "int64_math"
  description: "Simple tests for int64."
  test {
    name: "add_positive_positive"
    expr: "42 + 2"
    value: { int64_value: 44 }
  }
  test {
    name: "add_positive_negative"
    expr: "42 + (-2)"
    value: { int64_value: 40 }
  }
  test {
    name: "add_negative_negative"
    expr: "-42 + (-2)"
    value: { int64_value: -44 }
  }
  test {
    name: "sub_positive_positive"
    expr: "42 - 2"
    value: { int64_value: 40 }
  }
  test {
    name: "sub_positive_negative"
    expr: "42 - (-2)"
    value: { int64_value: 44 }
  }
  test {
    name: "sub_negative_negative"
    expr: "-42 - (-2)"
    value: { int64_value: -40 }
  }
  test {
    name: "multiply_positive_positive"
    expr: "42 * 2"
    value: { int64_value: 84 }
  }
  test {
    name: "multiply_positive_negative"
    expr: "42 * (-2)"
    value: { int64_value: -84 }
  }
  test {
    name: "multiply_negative_negative"
    expr: "-42 * (-2)"
    value: { int64_value: 84 }
  }
  test {
    name: "devide_positive_positive"
    expr: "42 / 2"
    value: { int64_value: 21 }
  }
  test {
    name: "devide_positive_negative"
    expr: "-42 / 2"
    value: { int64_value: -21 }
  }
  test {
    name: "devide_negative_negative"
    expr: "-42 / (-2)"
    value: { int64_value: 21 }
  }
  test {
    name: "mod_positive_positive"
    expr: "42 % 5"
    value: { int64_value: 2 }
  }
  test {
    name: "mod_positive_negative"
    expr: "42 % (-5)"
    value: { int64_value: 2 }
  }
  test {
    name: "mod_negative_negative"
    expr: "-42 % (-5)"
    value: { int64_value: -2 }
  }
  test {
    name: "negtive"
    expr: "-(42)"
    value: { int64_value: -42 }
  }
  test {
    name: "mod_zero"
    expr: "42 % 0"
    eval_error: {
      errors: { message:"modulus by zero" }
    }
  }
  test {
    name: "negtive_zero"
    expr: "-(0)"
    value: { int64_value: 0 }
  }
  test {
    name: "double_negtive"
    expr: "-(-42)"
    value: { int64_value: 42 }
  }
  test {
    name: "devide_zero"
    expr: "15 / 0"
    eval_error: {
      errors: { message:"divide by zero" }
    }
  }
  test {
    name: "multiply_zero"
    expr: "15 * 0"
    value: { int64_value: 0 }
  }
}
section {
  name: "uint64_math"
  description: "Simple tests for uint64."
  test {
    name: "add"
    expr: "42u + 2u"
    value: { uint64_value: 44 }
  }
  test {
    name: "sub"
    expr: "42u - 2u"
    value: { uint64_value: 40 }
  }
  test {
    name: "multiply"
    expr: "42u * 2u"
    value: { uint64_value: 84 }
  }
  test {
    name: "devide"
    expr: "42u / 2u"
    value: { uint64_value: 21 }
  }
  test {
    name: "mod"
    expr: "42u % 5u"
    value: { uint64_value: 2 }
  }
  test {
    name: "negtive_no_overload"
    expr: "-(5u)"
    disable_check: true
    eval_error: {
      errors: {  message:"no such overload" }
    }
  }
  test {
    name: "mod_zero"
    expr: "42u % 0u"
    eval_error: {
      errors: { message:"modulus by zero" }
    }
  }
  test {
    name: "devide_zero"
    expr: "15u / 0u"
    eval_error: {
      errors: { message:"divide by zero" }
    }
  }
  test {
    name: "multiply_zero"
    expr: "15u * 0u"
    value: { uint64_value: 0 }
  }
}
