name: "lists"
description: "Tests for list operations."
section {
  name: "concatentation"
  description: "Tests for list concatenation."
  test {
    name: "list_append"
    expr: "[0, 1, 2] + [3, 4, 5] == [0, 1, 2, 3, 4, 5]"
    value: { bool_value: true }
  }
  test {
    name: "list_not_commutative"
    expr: "[0, 1, 2] + [3, 4, 5] == [3, 4, 5, 0, 1, 2]"
    value: { bool_value: false }
  }
  test {
    name: "list_repeat"
    expr: "[2] + [2]"
    value: {
      list_value {
        values: { int64_value: 2 }
        values: { int64_value: 2 }
      }
    }
  }
  test {
    name: "empty_empty"
    expr: "[] + []"
    value: { list_value { } }
  }
  test {
    name: "left_unit"
    expr: "[] + [3, 4]"
    value: {
      list_value {
        values { int64_value: 3 }
        values { int64_value: 4 }
      }
    }
  }
  test {
    name: "right_unit"
    expr: "[1, 2] + []"
    value {
      list_value {
        values { int64_value: 1 }
        values { int64_value: 2 }
      }
    }
  }
}
section {
  name: "index"
  description: "List indexing tests."
  test {
    name: "zero_based"
    expr: "[7, 8, 9][0]"
    value: { int64_value: 7 }
  }
  test {
    name: "singleton"
    expr: "['foo'][0]"
    value: { string_value: "foo" }
  }
  test {
    name: "middle"
    expr: "[0, 1, 1, 2, 3, 5, 8, 13][4]"
    value: { int64_value: 3 }
  }
  test {
    name: "last"
    expr: "['George', 'John', 'Paul', 'Ringo'][3]"
    value: { string_value: "Ringo" }
  }
  test {
    name: "range"
    expr: "[1, 2, 3][3]"
    eval_error {
      errors { message: "invalid_argument" }
    }
  }
}
section {
  name: "in"
  description: "List membership tests."
  test {
    name: "empty"
    expr: "7 in []"
    value: { bool_value: false }
  }
  test {
    name: "singleton"
    expr: "4u in [4u]"
    value: { bool_value: true }
  }
  test {
    name: "first"
    expr: "'alpha' in ['alpha', 'beta', 'gamma']"
    value: { bool_value: true }
  }
  test {
    name: "middle"
    expr: "3 in [5, 4, 3, 2, 1]"
    value: { bool_value: true }
  }
  test {
    name: "last"
    expr: "20u in [4u, 6u, 8u, 12u, 20u]"
    value: { bool_value: true }
  }
  test {
    name: "missing"
    expr: "'hawaiian' in ['meat', 'veggie', 'margarita', 'cheese']"
    value: { bool_value: false }
  }
}
section {
  name: "size"
  description: "List and map size tests."
  test {
    name: "list_empty"
    expr: "size([])"
    value: { int64_value: 0 }
  }
  test {
    name: "list"
    expr: "size([1, 2, 3])"
    value: { int64_value: 3 }
  }
  test {
    name: "map_empty"
    expr: "size({})"
    value: { int64_value: 0 }
  }
  test {
    name: "map"
    expr: "size({1: 'one', 2: 'two', 3: 'three'})"
    value: { int64_value: 3 }
  }
}
