name: "broken"
description:
  "Conformance tests that are not currently working on at least one of the standard implementations."
  "Each section here will be named with filename.textproto/sectionname, to know where it should go once fixed."
section {
  name: "basic.textproto/variables"
  test {
    name: "self_eval_unbound_lookup"
    description: "An unbound variable should be marked as an error during execution. See google/cel-go#154"
    expr: "x"
    disable_check: true
    ## Expected behavior
    eval_error: {
      errors: { message: "undeclared reference to 'x' (in container '')" }
    }
    ## Current behavior as expressed by the cel-go implementation
    #unknown: {
    #  exprs: 1
    #}
  }
}
section {
  name: "comparisons.textproto/in_map_literal"
  test {
    name: "key_in_mixed_key_type_map_error"
    expr: "'key' in {1u:'str', 2:b'bytes'}"
    # Current behavior
    value: { bool_value: false }
    # This behavior is expected for homogeneous equality, but should break 
    # with heterogeneous equality supported in CEL 0.1.0. This case should
    # be revisited when support for heterogeneous equality is added to CEL.
    #
    # Expected behavior:
    # eval_error: {
    #  errors: { message: "no such overload" }
    # }
  }
}
section {
  name: "fields.textproto/fields"
  test {
    name: "map_key_float"
    description: "map should not support float as the key."
    expr: "{3.3:15.15, 1.0: 5}[1.0]"
    disable_check: true # need to make it fail in the evaluation phase
    ## Expected behavior
    ## eval_error: {
    ##   errors: { message: "unsupported key type" }
    ## }
    ## Current behavior
    value: { int64_value: 5 }
  }
  test {
    name: "map_key_null"
    description: "map should not support null as the key."
    expr: "expr: '{null:false}[null]'"
    disable_check: true # need to make it fail in the evaluation phase
    ## Expected behavior
    ## eval_error: {
    ##   errors: { message: "unsupported key type" }
    ## }
    ## Current behavior
    value: { bool_value: false }
  }
  test {
    name: "map_value_repeat_key"
    description: "map should not support repeated key."
    expr: "{true:1,false:2,true:3}[true]"
    ## Expected behavior: Failed with repeated key.
    ## Current behavior:
    value: { int64_value: 1 }
  }
}
section {
  name: "integer_math.textproto/simple_math"
  description: "tests for integer math."
  test {
    name: "int64_overflow_positive"
    description: "LLONG_MAX plus one."
    expr: "9223372036854775807 + 1"
    ## Expected behavior: return error for overflow.
    value: { int64_value: -9223372036854775808 }
  }
  test {
    name: "int64_overflow_negative"
    description: "LLONG_MIN minus one."
    expr: "-9223372036854775808 - 1"
    ## Expected behavior: return error for overflow.
    value: { int64_value: 9223372036854775807 }
  }
  test {
    name: "uint64_overflow_positive"
    description: "ULLONG_MAX plus one."
    expr: "18446744073709551615u + 1u"
    ## Expected behavior: return error for overflow.
    value: { uint64_value: 0 }
  }
  test {
    name: "uint64_overflow_negative"
    description: "zero minus one."
    expr: "0u - 1u"
    ## Expected behavior: return error for overflow.
    value: { uint64_value: 18446744073709551615 }
  }
}
