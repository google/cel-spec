name: "broken"
description:
  "Conformance tests that are not currently working on at least one of the standard implementations."
  "Each section here will be named with filename.textproto/sectionname, to know where it should go once fixed."
section {
  name: "basic.textproto/variables"
  test {
    name: "self_eval_unbound_lookup"
    description: "An unbound variable should be marked as an error during execution. See google/cel-go#154"
    expr: "x"
    disable_check: true
    ## Expected behavior
    eval_error: {
      errors: { message: "undeclared reference to 'x' (in container '')" }
    }
    ## Current behavior as expressed by the cel-go implementation
    #unknown: {
    #  exprs: 1
    #}
  }
}
section {
  name: "basic.textproto/self_eval_nonzeroish"
  test {
    name: "self_eval_map_twoitems"
    description: "Map literals should be order independent for the checker. google/cel-go#156"
    expr: '{"k1":"v1","k":"v"}'
    value: {
      map_value {
        entries {
          key: { string_value: "k" }
          value: { string_value: "v" }
        }
        entries {
          key: { string_value: "k1" }
          value: { string_value: "v1" }
        }
      }
    }
  }
}
section {
  name: "basic.textproto/variables"
  test {
    name: "self_eval_container_lookup"
    expr: "y"
    container: "x"
    type_env: {
      name: "x.y",
      ident: { type: { primitive: BOOL } }
    }
    type_env: {
      name: "y",
      ident: { type: { primitive: BOOL } }
    }
    bindings: {
      key: "x.y",
      value: { value: { bool_value: true } }
    }
    bindings: {
      key: "y",
      value: { value: { bool_value: false } }
    }
    value: { bool_value: true }
    # Current behavior in cel-go: unknown:<exprs:1 >
  }
}
section {
  name: "comparisons.textproto/Literal Comparison"
  test {
    name: "self_test_equals_mixed_types"
    description: "A mix of types fails during type checks but can't be captured in the conformance tests yet (See google/cel-go#155). Also, if you disable checks it yields {bool_value: false} where it should also yield an error"
    expr: "1.0 == 1"
    disable_check: true # need to make it fail in the evaluation phase
    eval_error : {
      errors: { message: "found no matching overload for '_==_' applied to '(double, int)'" }
    }
  }
  test {
    name: "self_test_not_equals_data_type"
    description: "A mix of types in a list fails during type checks. See #self_test_equals_mixed_types"
    expr: "[1] == [1.0]"
    disable_check: true # need to make it fail in the evaluation phase
    eval_error: {
      # Note: The type checker error shows (list(int), list(double)) instead
      errors: { message: "found no matching overload for '_==_' applied to '(list, list)'" }
    }
  }
}
section {
  name: "fields.textproto/fields"
  test {
    name: "map_key_float"
    description: "map should not support float as the key."
    expr: "{3.3:15.15, 1.0: 5}[1.0]"
    disable_check: true # need to make it fail in the evaluation phase
    ## Expected behavior
    ## eval_error: {
    ##   errors: { message: "unsupported key type" }
    ## }
    ## Current behavior
    value: { int64_value: 5 }
  }
  test {
    name: "map_key_null"
    description: "map should not support null as the key."
    expr: "expr: '{null:false}[null]'"
    disable_check: true # need to make it fail in the evaluation phase
    ## Expected behavior
    ## eval_error: {
    ##   errors: { message: "unsupported key type" }
    ## }
    ## Current behavior
    value: { bool_value: false }
  }
  test {
    name: "map_value_repeat_key"
    description: "map should not support repeated key."
    expr: "{true:1,false:2,true:3}[true]"
    ## Expected behavior: Failed with repeated key.
    ## Current behavior:
    value: { int64_value: 1 }
  }
  test {
    name: "ident_with_longest_prefix_check"
    description: "namespace resolution should try to find the longest prefix for the checker."
    expr: "a.b.c"
    type_env: {
      name: "a.b.c",
      ident: { type: { primitive: STRING } }
    }
    bindings: {
      key: "a.b.c",
      value: { value: { string_value: "yeah" } }
    }
    type_env: {
      name: "a.b",
      ident: {
        type: {
          map_type: {
            key_type: {primitive: STRING}
            value_type: {primitive: STRING}
          }
        }
      }
    }
    bindings: {
      key: "a.b"
      value: {
        value: {
          map_value: {
            entries {
              key: { string_value: "c" }
              value: { string_value: "oops" }
            }
          }
        }
      }
    }
    ## Expected behavior: "yeah"
    value: { string_value: "oops" }
  }
  test {
    name: "ident_with_longest_prefix_eval"
    description: "namespace resolution should try to find the longest prefix for the evaluator."
    expr: "a.b.c"
    type_env: {
      name: "a.b.c",
      ident: { type: { primitive: STRING } }
    }
    bindings: {
      key: "a.b.c",
      value: { value: { string_value: "yeah" } }
    }
    type_env: {
      name: "a.b",
      ident: {
        type: {
          map_type: {
            key_type: {primitive: STRING}
            value_type: {primitive: STRING}
          }
        }
      }
    }
    bindings: {
      key: "a.b"
      value: {
        value: {
          map_value: {
            entries {
              key: { string_value: "c" }
              value: { string_value: "oops" }
            }
          }
        }
      }
    }
    disable_check: true ## when check is disabled, the evaluator should evaluate it in the correct order
    ## Expected behavior: "yeah"
    value: { string_value: "oops" }
  }
}
section {
  name: "integer_math.textproto/simple_math"
  description: "tests for integer math."
  test {
    name: "int64_overflow"
    description: "LLONG_MAX plus one."
    expr: "9223372036854775807 + 1"
    ## Expected behavior: return error for overflow.
    value: { int64_value: -9223372036854775808 }
  }
  test {
    name: "int64_underflow"
    description: "LLONG_MIN minus one."
    expr: "-9223372036854775808 - 1"
    ## Expected behavior: return error for underflow.
    value: { int64_value: 9223372036854775807 }
  }
  test {
    name: "uint64_overflow"
    description: "ULLONG_MAX plus one."
    expr: "18446744073709551615u + 1u"
    ## Expected behavior: return error for overflow.
    value: { uint64_value: 0 }
  }
  test {
    name: "uint64_underflow"
    description: "zero minus one."
    expr: "0u - 1u"
    ## Expected behavior: return error for underflow.
    value: { uint64_value: 18446744073709551615 }
  }
}
